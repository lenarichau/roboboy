
Armuro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007570  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08007700  08007700  00008700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077b0  080077b0  00009090  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080077b0  080077b0  000087b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077b8  080077b8  00009090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077b8  080077b8  000087b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080077bc  080077bc  000087bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  080077c0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  20000090  08007850  00009090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08007850  00009430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144fd  00000000  00000000  000090c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d2f  00000000  00000000  0001d5bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  000202f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e5e  00000000  00000000  00021578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233af  00000000  00000000  000223d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016523  00000000  00000000  00045785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dabc9  00000000  00000000  0005bca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136871  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005384  00000000  00000000  001368b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0013bc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080076e8 	.word	0x080076e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080076e8 	.word	0x080076e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b988 	b.w	8000d84 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	468e      	mov	lr, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	4688      	mov	r8, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d962      	bls.n	8000b68 <__udivmoddi4+0xdc>
 8000aa2:	fab2 f682 	clz	r6, r2
 8000aa6:	b14e      	cbz	r6, 8000abc <__udivmoddi4+0x30>
 8000aa8:	f1c6 0320 	rsb	r3, r6, #32
 8000aac:	fa01 f806 	lsl.w	r8, r1, r6
 8000ab0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab4:	40b7      	lsls	r7, r6
 8000ab6:	ea43 0808 	orr.w	r8, r3, r8
 8000aba:	40b4      	lsls	r4, r6
 8000abc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ac0:	fa1f fc87 	uxth.w	ip, r7
 8000ac4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ac8:	0c23      	lsrs	r3, r4, #16
 8000aca:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ace:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d909      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ae0:	f080 80ea 	bcs.w	8000cb8 <__udivmoddi4+0x22c>
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	f240 80e7 	bls.w	8000cb8 <__udivmoddi4+0x22c>
 8000aea:	3902      	subs	r1, #2
 8000aec:	443b      	add	r3, r7
 8000aee:	1a9a      	subs	r2, r3, r2
 8000af0:	b2a3      	uxth	r3, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000afe:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b02:	459c      	cmp	ip, r3
 8000b04:	d909      	bls.n	8000b1a <__udivmoddi4+0x8e>
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0c:	f080 80d6 	bcs.w	8000cbc <__udivmoddi4+0x230>
 8000b10:	459c      	cmp	ip, r3
 8000b12:	f240 80d3 	bls.w	8000cbc <__udivmoddi4+0x230>
 8000b16:	443b      	add	r3, r7
 8000b18:	3802      	subs	r0, #2
 8000b1a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b1e:	eba3 030c 	sub.w	r3, r3, ip
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11d      	cbz	r5, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40f3      	lsrs	r3, r6
 8000b28:	2200      	movs	r2, #0
 8000b2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d905      	bls.n	8000b42 <__udivmoddi4+0xb6>
 8000b36:	b10d      	cbz	r5, 8000b3c <__udivmoddi4+0xb0>
 8000b38:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4608      	mov	r0, r1
 8000b40:	e7f5      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b42:	fab3 f183 	clz	r1, r3
 8000b46:	2900      	cmp	r1, #0
 8000b48:	d146      	bne.n	8000bd8 <__udivmoddi4+0x14c>
 8000b4a:	4573      	cmp	r3, lr
 8000b4c:	d302      	bcc.n	8000b54 <__udivmoddi4+0xc8>
 8000b4e:	4282      	cmp	r2, r0
 8000b50:	f200 8105 	bhi.w	8000d5e <__udivmoddi4+0x2d2>
 8000b54:	1a84      	subs	r4, r0, r2
 8000b56:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	4690      	mov	r8, r2
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d0e5      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b62:	e9c5 4800 	strd	r4, r8, [r5]
 8000b66:	e7e2      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	2a00      	cmp	r2, #0
 8000b6a:	f000 8090 	beq.w	8000c8e <__udivmoddi4+0x202>
 8000b6e:	fab2 f682 	clz	r6, r2
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	f040 80a4 	bne.w	8000cc0 <__udivmoddi4+0x234>
 8000b78:	1a8a      	subs	r2, r1, r2
 8000b7a:	0c03      	lsrs	r3, r0, #16
 8000b7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b80:	b280      	uxth	r0, r0
 8000b82:	b2bc      	uxth	r4, r7
 8000b84:	2101      	movs	r1, #1
 8000b86:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b8a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b92:	fb04 f20c 	mul.w	r2, r4, ip
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d907      	bls.n	8000baa <__udivmoddi4+0x11e>
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ba0:	d202      	bcs.n	8000ba8 <__udivmoddi4+0x11c>
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	f200 80e0 	bhi.w	8000d68 <__udivmoddi4+0x2dc>
 8000ba8:	46c4      	mov	ip, r8
 8000baa:	1a9b      	subs	r3, r3, r2
 8000bac:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bb0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bb4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bb8:	fb02 f404 	mul.w	r4, r2, r4
 8000bbc:	429c      	cmp	r4, r3
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x144>
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x142>
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	f200 80ca 	bhi.w	8000d62 <__udivmoddi4+0x2d6>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	1b1b      	subs	r3, r3, r4
 8000bd2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bd6:	e7a5      	b.n	8000b24 <__udivmoddi4+0x98>
 8000bd8:	f1c1 0620 	rsb	r6, r1, #32
 8000bdc:	408b      	lsls	r3, r1
 8000bde:	fa22 f706 	lsr.w	r7, r2, r6
 8000be2:	431f      	orrs	r7, r3
 8000be4:	fa0e f401 	lsl.w	r4, lr, r1
 8000be8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bec:	fa2e fe06 	lsr.w	lr, lr, r6
 8000bf0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bf4:	4323      	orrs	r3, r4
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	fa1f fc87 	uxth.w	ip, r7
 8000bfe:	fbbe f0f9 	udiv	r0, lr, r9
 8000c02:	0c1c      	lsrs	r4, r3, #16
 8000c04:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c08:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c0c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	fa02 f201 	lsl.w	r2, r2, r1
 8000c16:	d909      	bls.n	8000c2c <__udivmoddi4+0x1a0>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c1e:	f080 809c 	bcs.w	8000d5a <__udivmoddi4+0x2ce>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f240 8099 	bls.w	8000d5a <__udivmoddi4+0x2ce>
 8000c28:	3802      	subs	r0, #2
 8000c2a:	443c      	add	r4, r7
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	fa1f fe83 	uxth.w	lr, r3
 8000c34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c38:	fb09 4413 	mls	r4, r9, r3, r4
 8000c3c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c40:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c44:	45a4      	cmp	ip, r4
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x1ce>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c4e:	f080 8082 	bcs.w	8000d56 <__udivmoddi4+0x2ca>
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	d97f      	bls.n	8000d56 <__udivmoddi4+0x2ca>
 8000c56:	3b02      	subs	r3, #2
 8000c58:	443c      	add	r4, r7
 8000c5a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c66:	4564      	cmp	r4, ip
 8000c68:	4673      	mov	r3, lr
 8000c6a:	46e1      	mov	r9, ip
 8000c6c:	d362      	bcc.n	8000d34 <__udivmoddi4+0x2a8>
 8000c6e:	d05f      	beq.n	8000d30 <__udivmoddi4+0x2a4>
 8000c70:	b15d      	cbz	r5, 8000c8a <__udivmoddi4+0x1fe>
 8000c72:	ebb8 0203 	subs.w	r2, r8, r3
 8000c76:	eb64 0409 	sbc.w	r4, r4, r9
 8000c7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c82:	431e      	orrs	r6, r3
 8000c84:	40cc      	lsrs	r4, r1
 8000c86:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	e74f      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000c8e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c92:	0c01      	lsrs	r1, r0, #16
 8000c94:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c98:	b280      	uxth	r0, r0
 8000c9a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4638      	mov	r0, r7
 8000ca2:	463c      	mov	r4, r7
 8000ca4:	46b8      	mov	r8, r7
 8000ca6:	46be      	mov	lr, r7
 8000ca8:	2620      	movs	r6, #32
 8000caa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cae:	eba2 0208 	sub.w	r2, r2, r8
 8000cb2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cb6:	e766      	b.n	8000b86 <__udivmoddi4+0xfa>
 8000cb8:	4601      	mov	r1, r0
 8000cba:	e718      	b.n	8000aee <__udivmoddi4+0x62>
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	e72c      	b.n	8000b1a <__udivmoddi4+0x8e>
 8000cc0:	f1c6 0220 	rsb	r2, r6, #32
 8000cc4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cc8:	40b7      	lsls	r7, r6
 8000cca:	40b1      	lsls	r1, r6
 8000ccc:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cda:	b2bc      	uxth	r4, r7
 8000cdc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce6:	fb08 f904 	mul.w	r9, r8, r4
 8000cea:	40b0      	lsls	r0, r6
 8000cec:	4589      	cmp	r9, r1
 8000cee:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cf2:	b280      	uxth	r0, r0
 8000cf4:	d93e      	bls.n	8000d74 <__udivmoddi4+0x2e8>
 8000cf6:	1879      	adds	r1, r7, r1
 8000cf8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cfc:	d201      	bcs.n	8000d02 <__udivmoddi4+0x276>
 8000cfe:	4589      	cmp	r9, r1
 8000d00:	d81f      	bhi.n	8000d42 <__udivmoddi4+0x2b6>
 8000d02:	eba1 0109 	sub.w	r1, r1, r9
 8000d06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0a:	fb09 f804 	mul.w	r8, r9, r4
 8000d0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d12:	b292      	uxth	r2, r2
 8000d14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d18:	4542      	cmp	r2, r8
 8000d1a:	d229      	bcs.n	8000d70 <__udivmoddi4+0x2e4>
 8000d1c:	18ba      	adds	r2, r7, r2
 8000d1e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d22:	d2c4      	bcs.n	8000cae <__udivmoddi4+0x222>
 8000d24:	4542      	cmp	r2, r8
 8000d26:	d2c2      	bcs.n	8000cae <__udivmoddi4+0x222>
 8000d28:	f1a9 0102 	sub.w	r1, r9, #2
 8000d2c:	443a      	add	r2, r7
 8000d2e:	e7be      	b.n	8000cae <__udivmoddi4+0x222>
 8000d30:	45f0      	cmp	r8, lr
 8000d32:	d29d      	bcs.n	8000c70 <__udivmoddi4+0x1e4>
 8000d34:	ebbe 0302 	subs.w	r3, lr, r2
 8000d38:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	46e1      	mov	r9, ip
 8000d40:	e796      	b.n	8000c70 <__udivmoddi4+0x1e4>
 8000d42:	eba7 0909 	sub.w	r9, r7, r9
 8000d46:	4449      	add	r1, r9
 8000d48:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d4c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d50:	fb09 f804 	mul.w	r8, r9, r4
 8000d54:	e7db      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d56:	4673      	mov	r3, lr
 8000d58:	e77f      	b.n	8000c5a <__udivmoddi4+0x1ce>
 8000d5a:	4650      	mov	r0, sl
 8000d5c:	e766      	b.n	8000c2c <__udivmoddi4+0x1a0>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e6fd      	b.n	8000b5e <__udivmoddi4+0xd2>
 8000d62:	443b      	add	r3, r7
 8000d64:	3a02      	subs	r2, #2
 8000d66:	e733      	b.n	8000bd0 <__udivmoddi4+0x144>
 8000d68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d6c:	443b      	add	r3, r7
 8000d6e:	e71c      	b.n	8000baa <__udivmoddi4+0x11e>
 8000d70:	4649      	mov	r1, r9
 8000d72:	e79c      	b.n	8000cae <__udivmoddi4+0x222>
 8000d74:	eba1 0109 	sub.w	r1, r1, r9
 8000d78:	46c4      	mov	ip, r8
 8000d7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d7e:	fb09 f804 	mul.w	r8, r9, r4
 8000d82:	e7c4      	b.n	8000d0e <__udivmoddi4+0x282>

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
 8000d9c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d9e:	4b4d      	ldr	r3, [pc, #308]	@ (8000ed4 <MX_ADC1_Init+0x14c>)
 8000da0:	4a4d      	ldr	r2, [pc, #308]	@ (8000ed8 <MX_ADC1_Init+0x150>)
 8000da2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000da4:	4b4b      	ldr	r3, [pc, #300]	@ (8000ed4 <MX_ADC1_Init+0x14c>)
 8000da6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000daa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dac:	4b49      	ldr	r3, [pc, #292]	@ (8000ed4 <MX_ADC1_Init+0x14c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db2:	4b48      	ldr	r3, [pc, #288]	@ (8000ed4 <MX_ADC1_Init+0x14c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000db8:	4b46      	ldr	r3, [pc, #280]	@ (8000ed4 <MX_ADC1_Init+0x14c>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000dbe:	4b45      	ldr	r3, [pc, #276]	@ (8000ed4 <MX_ADC1_Init+0x14c>)
 8000dc0:	2208      	movs	r2, #8
 8000dc2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dc4:	4b43      	ldr	r3, [pc, #268]	@ (8000ed4 <MX_ADC1_Init+0x14c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000dca:	4b42      	ldr	r3, [pc, #264]	@ (8000ed4 <MX_ADC1_Init+0x14c>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 8000dd0:	4b40      	ldr	r3, [pc, #256]	@ (8000ed4 <MX_ADC1_Init+0x14c>)
 8000dd2:	2206      	movs	r2, #6
 8000dd4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dd6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ed4 <MX_ADC1_Init+0x14c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dde:	4b3d      	ldr	r3, [pc, #244]	@ (8000ed4 <MX_ADC1_Init+0x14c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000de4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ed4 <MX_ADC1_Init+0x14c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dea:	4b3a      	ldr	r3, [pc, #232]	@ (8000ed4 <MX_ADC1_Init+0x14c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000df2:	4b38      	ldr	r3, [pc, #224]	@ (8000ed4 <MX_ADC1_Init+0x14c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000df8:	4b36      	ldr	r3, [pc, #216]	@ (8000ed4 <MX_ADC1_Init+0x14c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e00:	4834      	ldr	r0, [pc, #208]	@ (8000ed4 <MX_ADC1_Init+0x14c>)
 8000e02:	f001 fdd5 	bl	80029b0 <HAL_ADC_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000e0c:	f001 f914 	bl	8002038 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e10:	4b32      	ldr	r3, [pc, #200]	@ (8000edc <MX_ADC1_Init+0x154>)
 8000e12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e14:	2306      	movs	r3, #6
 8000e16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e1c:	237f      	movs	r3, #127	@ 0x7f
 8000e1e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e20:	2304      	movs	r3, #4
 8000e22:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e28:	463b      	mov	r3, r7
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4829      	ldr	r0, [pc, #164]	@ (8000ed4 <MX_ADC1_Init+0x14c>)
 8000e2e:	f001 ff99 	bl	8002d64 <HAL_ADC_ConfigChannel>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000e38:	f001 f8fe 	bl	8002038 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e3c:	4b28      	ldr	r3, [pc, #160]	@ (8000ee0 <MX_ADC1_Init+0x158>)
 8000e3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e40:	230c      	movs	r3, #12
 8000e42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e44:	463b      	mov	r3, r7
 8000e46:	4619      	mov	r1, r3
 8000e48:	4822      	ldr	r0, [pc, #136]	@ (8000ed4 <MX_ADC1_Init+0x14c>)
 8000e4a:	f001 ff8b 	bl	8002d64 <HAL_ADC_ConfigChannel>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000e54:	f001 f8f0 	bl	8002038 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e58:	4b22      	ldr	r3, [pc, #136]	@ (8000ee4 <MX_ADC1_Init+0x15c>)
 8000e5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e5c:	2312      	movs	r3, #18
 8000e5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e60:	463b      	mov	r3, r7
 8000e62:	4619      	mov	r1, r3
 8000e64:	481b      	ldr	r0, [pc, #108]	@ (8000ed4 <MX_ADC1_Init+0x14c>)
 8000e66:	f001 ff7d 	bl	8002d64 <HAL_ADC_ConfigChannel>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000e70:	f001 f8e2 	bl	8002038 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e74:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee8 <MX_ADC1_Init+0x160>)
 8000e76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000e78:	2318      	movs	r3, #24
 8000e7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4814      	ldr	r0, [pc, #80]	@ (8000ed4 <MX_ADC1_Init+0x14c>)
 8000e82:	f001 ff6f 	bl	8002d64 <HAL_ADC_ConfigChannel>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000e8c:	f001 f8d4 	bl	8002038 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e90:	4b16      	ldr	r3, [pc, #88]	@ (8000eec <MX_ADC1_Init+0x164>)
 8000e92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000e94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e98:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	480d      	ldr	r0, [pc, #52]	@ (8000ed4 <MX_ADC1_Init+0x14c>)
 8000ea0:	f001 ff60 	bl	8002d64 <HAL_ADC_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8000eaa:	f001 f8c5 	bl	8002038 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000eae:	4b10      	ldr	r3, [pc, #64]	@ (8000ef0 <MX_ADC1_Init+0x168>)
 8000eb0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000eb2:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000eb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb8:	463b      	mov	r3, r7
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <MX_ADC1_Init+0x14c>)
 8000ebe:	f001 ff51 	bl	8002d64 <HAL_ADC_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 8000ec8:	f001 f8b6 	bl	8002038 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	200000ac 	.word	0x200000ac
 8000ed8:	50040000 	.word	0x50040000
 8000edc:	14f00020 	.word	0x14f00020
 8000ee0:	19200040 	.word	0x19200040
 8000ee4:	21800100 	.word	0x21800100
 8000ee8:	25b00200 	.word	0x25b00200
 8000eec:	2a000400 	.word	0x2a000400
 8000ef0:	32601000 	.word	0x32601000

08000ef4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b09e      	sub	sp, #120	@ 0x78
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	2254      	movs	r2, #84	@ 0x54
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f005 ff69 	bl	8006dec <memset>
  if(adcHandle->Instance==ADC1)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a3b      	ldr	r2, [pc, #236]	@ (800100c <HAL_ADC_MspInit+0x118>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d16e      	bne.n	8001002 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f24:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f28:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000f2a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f2e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000f30:	2301      	movs	r3, #1
 8000f32:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000f38:	2310      	movs	r3, #16
 8000f3a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000f3c:	2307      	movs	r3, #7
 8000f3e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000f40:	2302      	movs	r3, #2
 8000f42:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000f44:	2302      	movs	r3, #2
 8000f46:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000f48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f4e:	f107 0310 	add.w	r3, r7, #16
 8000f52:	4618      	mov	r0, r3
 8000f54:	f003 ff52 	bl	8004dfc <HAL_RCCEx_PeriphCLKConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000f5e:	f001 f86b 	bl	8002038 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f62:	4b2b      	ldr	r3, [pc, #172]	@ (8001010 <HAL_ADC_MspInit+0x11c>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f66:	4a2a      	ldr	r2, [pc, #168]	@ (8001010 <HAL_ADC_MspInit+0x11c>)
 8000f68:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f6e:	4b28      	ldr	r3, [pc, #160]	@ (8001010 <HAL_ADC_MspInit+0x11c>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b25      	ldr	r3, [pc, #148]	@ (8001010 <HAL_ADC_MspInit+0x11c>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7e:	4a24      	ldr	r2, [pc, #144]	@ (8001010 <HAL_ADC_MspInit+0x11c>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f86:	4b22      	ldr	r3, [pc, #136]	@ (8001010 <HAL_ADC_MspInit+0x11c>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = lineSensor_middle_Pin|encoder_left_Pin|lineSensor_right_Pin|battery_Pin
 8000f92:	23bb      	movs	r3, #187	@ 0xbb
 8000f94:	667b      	str	r3, [r7, #100]	@ 0x64
                          |encoder_right_Pin|lineSensor_left_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f96:	230b      	movs	r3, #11
 8000f98:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa8:	f002 fee2 	bl	8003d70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000fac:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fae:	4a1a      	ldr	r2, [pc, #104]	@ (8001018 <HAL_ADC_MspInit+0x124>)
 8000fb0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000fb2:	4b18      	ldr	r3, [pc, #96]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fb8:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fbe:	4b15      	ldr	r3, [pc, #84]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fc4:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fc6:	2280      	movs	r2, #128	@ 0x80
 8000fc8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fca:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fd0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fd2:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000fd8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fdc:	2220      	movs	r2, #32
 8000fde:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fe6:	480b      	ldr	r0, [pc, #44]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000fe8:	f002 fcca 	bl	8003980 <HAL_DMA_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8000ff2:	f001 f821 	bl	8002038 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a06      	ldr	r2, [pc, #24]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000ffa:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000ffc:	4a05      	ldr	r2, [pc, #20]	@ (8001014 <HAL_ADC_MspInit+0x120>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001002:	bf00      	nop
 8001004:	3778      	adds	r7, #120	@ 0x78
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	50040000 	.word	0x50040000
 8001010:	40021000 	.word	0x40021000
 8001014:	20000110 	.word	0x20000110
 8001018:	40020008 	.word	0x40020008

0800101c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001022:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <MX_DMA_Init+0x38>)
 8001024:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001026:	4a0b      	ldr	r2, [pc, #44]	@ (8001054 <MX_DMA_Init+0x38>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6493      	str	r3, [r2, #72]	@ 0x48
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <MX_DMA_Init+0x38>)
 8001030:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	200b      	movs	r0, #11
 8001040:	f002 fc67 	bl	8003912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001044:	200b      	movs	r0, #11
 8001046:	f002 fc80 	bl	800394a <HAL_NVIC_EnableIRQ>

}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000

08001058 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106e:	4b30      	ldr	r3, [pc, #192]	@ (8001130 <MX_GPIO_Init+0xd8>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001072:	4a2f      	ldr	r2, [pc, #188]	@ (8001130 <MX_GPIO_Init+0xd8>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800107a:	4b2d      	ldr	r3, [pc, #180]	@ (8001130 <MX_GPIO_Init+0xd8>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b2a      	ldr	r3, [pc, #168]	@ (8001130 <MX_GPIO_Init+0xd8>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108a:	4a29      	ldr	r2, [pc, #164]	@ (8001130 <MX_GPIO_Init+0xd8>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001092:	4b27      	ldr	r3, [pc, #156]	@ (8001130 <MX_GPIO_Init+0xd8>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	4b24      	ldr	r3, [pc, #144]	@ (8001130 <MX_GPIO_Init+0xd8>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a2:	4a23      	ldr	r2, [pc, #140]	@ (8001130 <MX_GPIO_Init+0xd8>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010aa:	4b21      	ldr	r3, [pc, #132]	@ (8001130 <MX_GPIO_Init+0xd8>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(phase2_L_GPIO_Port, phase2_L_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c0:	f002 ffd8 	bl	8004074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LED_right_Pin|LED_left_Pin|phase2_R_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2178      	movs	r1, #120	@ 0x78
 80010c8:	481a      	ldr	r0, [pc, #104]	@ (8001134 <MX_GPIO_Init+0xdc>)
 80010ca:	f002 ffd3 	bl	8004074 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : switch_right_Pin switch_middle_Pin switch_left_Pin */
  GPIO_InitStruct.Pin = switch_right_Pin|switch_middle_Pin|switch_left_Pin;
 80010ce:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 80010d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	4619      	mov	r1, r3
 80010e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e6:	f002 fe43 	bl	8003d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : phase2_L_Pin */
  GPIO_InitStruct.Pin = phase2_L_Pin;
 80010ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(phase2_L_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	4619      	mov	r1, r3
 8001102:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001106:	f002 fe33 	bl	8003d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LED_right_Pin LED_left_Pin phase2_R_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LED_right_Pin|LED_left_Pin|phase2_R_Pin;
 800110a:	2378      	movs	r3, #120	@ 0x78
 800110c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	4619      	mov	r1, r3
 8001120:	4804      	ldr	r0, [pc, #16]	@ (8001134 <MX_GPIO_Init+0xdc>)
 8001122:	f002 fe25 	bl	8003d70 <HAL_GPIO_Init>

}
 8001126:	bf00      	nop
 8001128:	3720      	adds	r7, #32
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000
 8001134:	48000400 	.word	0x48000400

08001138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113c:	f001 f9fb 	bl	8002536 <HAL_Init>
  /* USER CODE BEGIN Init */
  /* INITIALIZE PWM */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001140:	f000 f86c 	bl	800121c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001144:	f7ff ff88 	bl	8001058 <MX_GPIO_Init>
  MX_DMA_Init();
 8001148:	f7ff ff68 	bl	800101c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800114c:	f001 f930 	bl	80023b0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001150:	f7ff fe1a 	bl	8000d88 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001154:	f001 f81c 	bl	8002190 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, 6);
 8001158:	2206      	movs	r2, #6
 800115a:	4929      	ldr	r1, [pc, #164]	@ (8001200 <main+0xc8>)
 800115c:	4829      	ldr	r0, [pc, #164]	@ (8001204 <main+0xcc>)
 800115e:	f001 fd69 	bl	8002c34 <HAL_ADC_Start_DMA>

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001162:	2104      	movs	r1, #4
 8001164:	4828      	ldr	r0, [pc, #160]	@ (8001208 <main+0xd0>)
 8001166:	f004 ff5f 	bl	8006028 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800116a:	2108      	movs	r1, #8
 800116c:	4826      	ldr	r0, [pc, #152]	@ (8001208 <main+0xd0>)
 800116e:	f004 ff5b 	bl	8006028 <HAL_TIMEx_PWMN_Start>
  TIM1 -> CCR2 = 0;
 8001172:	4b26      	ldr	r3, [pc, #152]	@ (800120c <main+0xd4>)
 8001174:	2200      	movs	r2, #0
 8001176:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM1 -> CCR3 = 0;
 8001178:	4b24      	ldr	r3, [pc, #144]	@ (800120c <main+0xd4>)
 800117a:	2200      	movs	r2, #0
 800117c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (conversion_done_flag) {
 800117e:	4b24      	ldr	r3, [pc, #144]	@ (8001210 <main+0xd8>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0fa      	beq.n	800117e <main+0x46>
		  readSensorsAndPrint();
 8001188:	f000 fb06 	bl	8001798 <readSensorsAndPrint>

		  process_encoder_signals();
 800118c:	f000 fb5a 	bl	8001844 <process_encoder_signals>
		  taskLED();
 8001190:	f000 fbb4 	bl	80018fc <taskLED>

		  switch (course_state) {
 8001194:	4b1f      	ldr	r3, [pc, #124]	@ (8001214 <main+0xdc>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b05      	cmp	r3, #5
 800119a:	d826      	bhi.n	80011ea <main+0xb2>
 800119c:	a201      	add	r2, pc, #4	@ (adr r2, 80011a4 <main+0x6c>)
 800119e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a2:	bf00      	nop
 80011a4:	080011bd 	.word	0x080011bd
 80011a8:	080011c3 	.word	0x080011c3
 80011ac:	080011c9 	.word	0x080011c9
 80011b0:	080011cf 	.word	0x080011cf
 80011b4:	080011d5 	.word	0x080011d5
 80011b8:	080011db 	.word	0x080011db
		  	  case FOLLOW_TRAJECTORY:
		  		  task_followTrajectory();
 80011bc:	f000 fc14 	bl	80019e8 <task_followTrajectory>
		  		  break;
 80011c0:	e01c      	b.n	80011fc <main+0xc4>
		  	  case FOLLOW_LINE:
		  		  task_followLine();
 80011c2:	f000 fd8f 	bl	8001ce4 <task_followLine>
		  		  break;
 80011c6:	e019      	b.n	80011fc <main+0xc4>
		  	  case SEARCH_LINE:
		  		  task_searchLine();
 80011c8:	f000 fdc0 	bl	8001d4c <task_searchLine>
		  		  break;
 80011cc:	e016      	b.n	80011fc <main+0xc4>
		  	  case OVERCOME_GAP:
		  		  task_overcomeGap();
 80011ce:	f000 ff1d 	bl	800200c <task_overcomeGap>
		  		  break;
 80011d2:	e013      	b.n	80011fc <main+0xc4>
		  	  case AVOID_OBSTACLE:
		  		  task_avoidObstacle();
 80011d4:	f000 fe6e 	bl	8001eb4 <task_avoidObstacle>
		  		  break;
 80011d8:	e010      	b.n	80011fc <main+0xc4>
		  	  case COURSE_DONE:
		  		  moveRoboboy(1, 1, 0, 0);
 80011da:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8001218 <main+0xe0>
 80011de:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8001218 <main+0xe0>
 80011e2:	2101      	movs	r1, #1
 80011e4:	2001      	movs	r0, #1
 80011e6:	f000 f8f9 	bl	80013dc <moveRoboboy>
		  	  default:
		  		  moveRoboboy(1, 1, 0, 0);
 80011ea:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8001218 <main+0xe0>
 80011ee:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001218 <main+0xe0>
 80011f2:	2101      	movs	r1, #1
 80011f4:	2001      	movs	r0, #1
 80011f6:	f000 f8f1 	bl	80013dc <moveRoboboy>
		  		  break;
 80011fa:	bf00      	nop
	  if (conversion_done_flag) {
 80011fc:	e7bf      	b.n	800117e <main+0x46>
 80011fe:	bf00      	nop
 8001200:	20000170 	.word	0x20000170
 8001204:	200000ac 	.word	0x200000ac
 8001208:	20000210 	.word	0x20000210
 800120c:	40012c00 	.word	0x40012c00
 8001210:	20000030 	.word	0x20000030
 8001214:	200001fd 	.word	0x200001fd
 8001218:	00000000 	.word	0x00000000

0800121c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b096      	sub	sp, #88	@ 0x58
 8001220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	2244      	movs	r2, #68	@ 0x44
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f005 fdde 	bl	8006dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001230:	463b      	mov	r3, r7
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800123e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001242:	f002 ff4d 	bl	80040e0 <HAL_PWREx_ControlVoltageScaling>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800124c:	f000 fef4 	bl	8002038 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001250:	f002 ff28 	bl	80040a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001254:	4b21      	ldr	r3, [pc, #132]	@ (80012dc <SystemClock_Config+0xc0>)
 8001256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800125a:	4a20      	ldr	r2, [pc, #128]	@ (80012dc <SystemClock_Config+0xc0>)
 800125c:	f023 0318 	bic.w	r3, r3, #24
 8001260:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001264:	2314      	movs	r3, #20
 8001266:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001268:	2301      	movs	r3, #1
 800126a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800126c:	2301      	movs	r3, #1
 800126e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001274:	2360      	movs	r3, #96	@ 0x60
 8001276:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001278:	2302      	movs	r3, #2
 800127a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800127c:	2301      	movs	r3, #1
 800127e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001280:	2301      	movs	r3, #1
 8001282:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001284:	2310      	movs	r3, #16
 8001286:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001288:	2307      	movs	r3, #7
 800128a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800128c:	2302      	movs	r3, #2
 800128e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001290:	2302      	movs	r3, #2
 8001292:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4618      	mov	r0, r3
 800129a:	f002 ff77 	bl	800418c <HAL_RCC_OscConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80012a4:	f000 fec8 	bl	8002038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a8:	230f      	movs	r3, #15
 80012aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ac:	2303      	movs	r3, #3
 80012ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012bc:	463b      	mov	r3, r7
 80012be:	2101      	movs	r1, #1
 80012c0:	4618      	mov	r0, r3
 80012c2:	f003 fb77 	bl	80049b4 <HAL_RCC_ClockConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80012cc:	f000 feb4 	bl	8002038 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80012d0:	f003 ff8a 	bl	80051e8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80012d4:	bf00      	nop
 80012d6:	3758      	adds	r7, #88	@ 0x58
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40021000 	.word	0x40021000

080012e0 <getVel>:
 * @brief Returns fraction of maximum velocity, either inverted or not
 *
 * @param vel must be in range [0,1],
 * @param dir must be 1 - forwards or 0 - backwards, otherwise return -1
 */
float getVel(float vel, int dir) {
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80012ea:	6038      	str	r0, [r7, #0]
	if ((dir != 1 && dir != 0) || vel < 0 || vel > 1) return -1;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d002      	beq.n	80012f8 <getVel+0x18>
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d10f      	bne.n	8001318 <getVel+0x38>
 80012f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001304:	d408      	bmi.n	8001318 <getVel+0x38>
 8001306:	edd7 7a01 	vldr	s15, [r7, #4]
 800130a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800130e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001316:	dd02      	ble.n	800131e <getVel+0x3e>
 8001318:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 800131c:	e013      	b.n	8001346 <getVel+0x66>

	if (dir) {
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d00a      	beq.n	800133a <getVel+0x5a>
		return PWM_MAX * (1 - vel);
 8001324:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001328:	edd7 7a01 	vldr	s15, [r7, #4]
 800132c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001330:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001354 <getVel+0x74>
 8001334:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001338:	e005      	b.n	8001346 <getVel+0x66>
	} else {
		return PWM_MAX * vel;
 800133a:	edd7 7a01 	vldr	s15, [r7, #4]
 800133e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001354 <getVel+0x74>
 8001342:	ee67 7a87 	vmul.f32	s15, s15, s14
	}
}
 8001346:	eeb0 0a67 	vmov.f32	s0, s15
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	477fff00 	.word	0x477fff00

08001358 <setMotors>:
 * @param velL velocity of left motor, must be in range [0,65535],
 * @param velR velocity of right motor, must be in range [0,65535],
 * @param leftF bit indicating left motor spin direction, must be 1 or 0,
 * @param rightF bit indicating right motor spin direction, must be 1 or 0
 */
void setMotors(int leftF, int rightF, float velL, float velR) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	ed87 0a01 	vstr	s0, [r7, #4]
 8001366:	edc7 0a00 	vstr	s1, [r7]
	// ==== left motor h-bridges ====
	if (leftF == 0) {
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d107      	bne.n	8001380 <setMotors+0x28>
		// case: forwards
		HAL_GPIO_WritePin(GPIOA, phase2_L_Pin, GPIO_PIN_RESET);
 8001370:	2200      	movs	r2, #0
 8001372:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001376:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800137a:	f002 fe7b 	bl	8004074 <HAL_GPIO_WritePin>
 800137e:	e006      	b.n	800138e <setMotors+0x36>
	} else {
	    // case: backwards
		HAL_GPIO_WritePin(GPIOA, phase2_L_Pin, GPIO_PIN_SET);
 8001380:	2201      	movs	r2, #1
 8001382:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001386:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800138a:	f002 fe73 	bl	8004074 <HAL_GPIO_WritePin>
	}

	// ==== right motor h-bridges ====
	if (rightF == 0) {
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d105      	bne.n	80013a0 <setMotors+0x48>
		// case: forwards
	    HAL_GPIO_WritePin(GPIOB, phase2_R_Pin, GPIO_PIN_RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	2140      	movs	r1, #64	@ 0x40
 8001398:	480e      	ldr	r0, [pc, #56]	@ (80013d4 <setMotors+0x7c>)
 800139a:	f002 fe6b 	bl	8004074 <HAL_GPIO_WritePin>
 800139e:	e004      	b.n	80013aa <setMotors+0x52>
	} else {
    	// case: backwards
	    HAL_GPIO_WritePin(GPIOB, phase2_R_Pin, GPIO_PIN_SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	2140      	movs	r1, #64	@ 0x40
 80013a4:	480b      	ldr	r0, [pc, #44]	@ (80013d4 <setMotors+0x7c>)
 80013a6:	f002 fe65 	bl	8004074 <HAL_GPIO_WritePin>
	}

	// set Motor velocities
	TIM1->CCR2 = velL;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	@ (80013d8 <setMotors+0x80>)
 80013ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80013b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013b4:	ee17 2a90 	vmov	r2, s15
 80013b8:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM1->CCR3 = velR;
 80013ba:	4b07      	ldr	r3, [pc, #28]	@ (80013d8 <setMotors+0x80>)
 80013bc:	edd7 7a00 	vldr	s15, [r7]
 80013c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013c4:	ee17 2a90 	vmov	r2, s15
 80013c8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	48000400 	.word	0x48000400
 80013d8:	40012c00 	.word	0x40012c00

080013dc <moveRoboboy>:
 * @param leftF bit indicating left motor spin direction, must be 1 or 0,
 * @param rightF bit indicating right motor spin direction, must be 1 or 0
 * @param velL velocity of right motor, must be in range [0,1],
 * @param velR velocity of right motor, must be in range [0,1],
 */
void moveRoboboy(int leftF, int rightF, float velL, float velR) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80013ea:	edc7 0a00 	vstr	s1, [r7]
	if((leftF != 1 && leftF != 0) || (rightF != 1 && rightF != 0)) return;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d002      	beq.n	80013fa <moveRoboboy+0x1e>
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d14b      	bne.n	8001492 <moveRoboboy+0xb6>
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d002      	beq.n	8001406 <moveRoboboy+0x2a>
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d145      	bne.n	8001492 <moveRoboboy+0xb6>

	//right motor runs "backwards"
	rightF = !rightF;
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	2b00      	cmp	r3, #0
 800140a:	bf0c      	ite	eq
 800140c:	2301      	moveq	r3, #1
 800140e:	2300      	movne	r3, #0
 8001410:	b2db      	uxtb	r3, r3
 8001412:	60bb      	str	r3, [r7, #8]

	if (velL < 0) {
 8001414:	edd7 7a01 	vldr	s15, [r7, #4]
 8001418:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800141c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001420:	d50c      	bpl.n	800143c <moveRoboboy+0x60>
		leftF = !leftF;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	bf0c      	ite	eq
 8001428:	2301      	moveq	r3, #1
 800142a:	2300      	movne	r3, #0
 800142c:	b2db      	uxtb	r3, r3
 800142e:	60fb      	str	r3, [r7, #12]
		velL = -velL;
 8001430:	edd7 7a01 	vldr	s15, [r7, #4]
 8001434:	eef1 7a67 	vneg.f32	s15, s15
 8001438:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	if (velR < 0) {
 800143c:	edd7 7a00 	vldr	s15, [r7]
 8001440:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001448:	d50c      	bpl.n	8001464 <moveRoboboy+0x88>
		rightF = !rightF;
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	2b00      	cmp	r3, #0
 800144e:	bf0c      	ite	eq
 8001450:	2301      	moveq	r3, #1
 8001452:	2300      	movne	r3, #0
 8001454:	b2db      	uxtb	r3, r3
 8001456:	60bb      	str	r3, [r7, #8]
		velR = -velR;
 8001458:	edd7 7a00 	vldr	s15, [r7]
 800145c:	eef1 7a67 	vneg.f32	s15, s15
 8001460:	edc7 7a00 	vstr	s15, [r7]
	}

	//potentially flip velocity due to h-bridge
	velL = getVel(velL, leftF);
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	ed97 0a01 	vldr	s0, [r7, #4]
 800146a:	f7ff ff39 	bl	80012e0 <getVel>
 800146e:	ed87 0a01 	vstr	s0, [r7, #4]
	velR = getVel(velR, rightF);
 8001472:	68b8      	ldr	r0, [r7, #8]
 8001474:	ed97 0a00 	vldr	s0, [r7]
 8001478:	f7ff ff32 	bl	80012e0 <getVel>
 800147c:	ed87 0a00 	vstr	s0, [r7]

	setMotors(leftF, rightF, velL, velR);
 8001480:	edd7 0a00 	vldr	s1, [r7]
 8001484:	ed97 0a01 	vldr	s0, [r7, #4]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f7ff ff64 	bl	8001358 <setMotors>
 8001490:	e000      	b.n	8001494 <moveRoboboy+0xb8>
	if((leftF != 1 && leftF != 0) || (rightF != 1 && rightF != 0)) return;
 8001492:	bf00      	nop
}
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <driveMotorsCooperative>:
 * This function should be called repeatedly in a cooperative main loop.
 *
 * @param leftF  Direction for the left motor (0 = forward, 1 = backward)
 * @param rightF Direction for the right motor (0 = forward, 1 = backward)
 */
void driveMotorsCooperative(int leftF, int rightF) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
	if((leftF != 1 && leftF != 0) || (rightF != 1 && rightF != 0)) return;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d002      	beq.n	80014b2 <driveMotorsCooperative+0x16>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d17d      	bne.n	80015ae <driveMotorsCooperative+0x112>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d002      	beq.n	80014be <driveMotorsCooperative+0x22>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d177      	bne.n	80015ae <driveMotorsCooperative+0x112>

	int encoderDiff = left_total_count - right_total_count;
 80014be:	4b3e      	ldr	r3, [pc, #248]	@ (80015b8 <driveMotorsCooperative+0x11c>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4b3e      	ldr	r3, [pc, #248]	@ (80015bc <driveMotorsCooperative+0x120>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	60fb      	str	r3, [r7, #12]

	float newSpeedRight;
	float newSpeedLeft;

	if (encoderDiff > MAX_ENCODER_DIFF) {
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2b1e      	cmp	r3, #30
 80014ce:	dd06      	ble.n	80014de <driveMotorsCooperative+0x42>
		newSpeedRight = 0.0f;
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
		newSpeedLeft = 0.75f;
 80014d6:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	e032      	b.n	8001544 <driveMotorsCooperative+0xa8>
	} else if (encoderDiff < -MAX_ENCODER_DIFF) {
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f113 0f1e 	cmn.w	r3, #30
 80014e4:	da06      	bge.n	80014f4 <driveMotorsCooperative+0x58>
		newSpeedRight = 0.75f;
 80014e6:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 80014ea:	617b      	str	r3, [r7, #20]
		newSpeedLeft = 0.0f;
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	e027      	b.n	8001544 <driveMotorsCooperative+0xa8>
	} else {
		newSpeedRight = MOTOR_BASE_SPEED - (encoderDiff / 3 * MAX_ENCODER_DIFF);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4a32      	ldr	r2, [pc, #200]	@ (80015c0 <driveMotorsCooperative+0x124>)
 80014f8:	fb82 1203 	smull	r1, r2, r2, r3
 80014fc:	17db      	asrs	r3, r3, #31
 80014fe:	1ad2      	subs	r2, r2, r3
 8001500:	4613      	mov	r3, r2
 8001502:	011b      	lsls	r3, r3, #4
 8001504:	1a9b      	subs	r3, r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	ee07 3a90 	vmov	s15, r3
 800150c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001510:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001518:	edc7 7a05 	vstr	s15, [r7, #20]
		newSpeedLeft = MOTOR_BASE_SPEED + (encoderDiff / 3 * MAX_ENCODER_DIFF);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4a28      	ldr	r2, [pc, #160]	@ (80015c0 <driveMotorsCooperative+0x124>)
 8001520:	fb82 1203 	smull	r1, r2, r2, r3
 8001524:	17db      	asrs	r3, r3, #31
 8001526:	1ad2      	subs	r2, r2, r3
 8001528:	4613      	mov	r3, r2
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	1a9b      	subs	r3, r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	ee07 3a90 	vmov	s15, r3
 8001534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001538:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800153c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001540:	edc7 7a04 	vstr	s15, [r7, #16]
	}

	// Clamp to 0–1
	if (newSpeedLeft > 1.0f) newSpeedLeft = 1.0f;
 8001544:	edd7 7a04 	vldr	s15, [r7, #16]
 8001548:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800154c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001554:	dd02      	ble.n	800155c <driveMotorsCooperative+0xc0>
 8001556:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800155a:	613b      	str	r3, [r7, #16]
	if (newSpeedLeft > 1.0f) newSpeedLeft = 1.0f;
 800155c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001560:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156c:	dd02      	ble.n	8001574 <driveMotorsCooperative+0xd8>
 800156e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001572:	613b      	str	r3, [r7, #16]
	if (newSpeedRight < 0.0f) newSpeedRight = 0.0f;
 8001574:	edd7 7a05 	vldr	s15, [r7, #20]
 8001578:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800157c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001580:	d502      	bpl.n	8001588 <driveMotorsCooperative+0xec>
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
	if (newSpeedRight < 0.0f) newSpeedRight = 0.0f;
 8001588:	edd7 7a05 	vldr	s15, [r7, #20]
 800158c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001594:	d502      	bpl.n	800159c <driveMotorsCooperative+0x100>
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	617b      	str	r3, [r7, #20]

	moveRoboboy(leftF, rightF, newSpeedLeft, newSpeedRight);
 800159c:	edd7 0a05 	vldr	s1, [r7, #20]
 80015a0:	ed97 0a04 	vldr	s0, [r7, #16]
 80015a4:	6839      	ldr	r1, [r7, #0]
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ff18 	bl	80013dc <moveRoboboy>
 80015ac:	e000      	b.n	80015b0 <driveMotorsCooperative+0x114>
	if((leftF != 1 && leftF != 0) || (rightF != 1 && rightF != 0)) return;
 80015ae:	bf00      	nop
}
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200001e8 	.word	0x200001e8
 80015bc:	200001ec 	.word	0x200001ec
 80015c0:	55555556 	.word	0x55555556

080015c4 <driveMMStraightCooperative>:
 *
 * @param forward Movement direction (1 = forward, 0 = backward)
 * @param mm      Distance to travel in millimeters
 * @return        1 when the distance is completed, 0 otherwise
 */
char driveMMStraightCooperative(int forward, float mm) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	ed87 0a00 	vstr	s0, [r7]
	if (driving == 0) {
 80015d0:	4b24      	ldr	r3, [pc, #144]	@ (8001664 <driveMMStraightCooperative+0xa0>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d113      	bne.n	8001600 <driveMMStraightCooperative+0x3c>
		target_pulses = mm_to_pulses(mm);
 80015d8:	ed97 0a00 	vldr	s0, [r7]
 80015dc:	f000 f9c8 	bl	8001970 <mm_to_pulses>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4a21      	ldr	r2, [pc, #132]	@ (8001668 <driveMMStraightCooperative+0xa4>)
 80015e4:	6013      	str	r3, [r2, #0]
		start_left = left_total_count;
 80015e6:	4b21      	ldr	r3, [pc, #132]	@ (800166c <driveMMStraightCooperative+0xa8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b20      	ldr	r3, [pc, #128]	@ (8001670 <driveMMStraightCooperative+0xac>)
 80015ee:	601a      	str	r2, [r3, #0]
		start_right = right_total_count;
 80015f0:	4b20      	ldr	r3, [pc, #128]	@ (8001674 <driveMMStraightCooperative+0xb0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b20      	ldr	r3, [pc, #128]	@ (8001678 <driveMMStraightCooperative+0xb4>)
 80015f8:	601a      	str	r2, [r3, #0]
		driving = 1;
 80015fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <driveMMStraightCooperative+0xa0>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	701a      	strb	r2, [r3, #0]
	}
	if (forward == 1) {
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d104      	bne.n	8001610 <driveMMStraightCooperative+0x4c>
		driveMotorsCooperative(1, 1);
 8001606:	2101      	movs	r1, #1
 8001608:	2001      	movs	r0, #1
 800160a:	f7ff ff47 	bl	800149c <driveMotorsCooperative>
 800160e:	e003      	b.n	8001618 <driveMMStraightCooperative+0x54>
	} else {
		driveMotorsCooperative(0, 0);
 8001610:	2100      	movs	r1, #0
 8001612:	2000      	movs	r0, #0
 8001614:	f7ff ff42 	bl	800149c <driveMotorsCooperative>
	}

	if ((left_total_count - start_left) >= target_pulses &&
 8001618:	4b14      	ldr	r3, [pc, #80]	@ (800166c <driveMMStraightCooperative+0xa8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <driveMMStraightCooperative+0xac>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	4a10      	ldr	r2, [pc, #64]	@ (8001668 <driveMMStraightCooperative+0xa4>)
 8001626:	6812      	ldr	r2, [r2, #0]
 8001628:	4293      	cmp	r3, r2
 800162a:	d316      	bcc.n	800165a <driveMMStraightCooperative+0x96>
	        (right_total_count - start_right) >= target_pulses) {
 800162c:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <driveMMStraightCooperative+0xb0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <driveMMStraightCooperative+0xb4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	4a0b      	ldr	r2, [pc, #44]	@ (8001668 <driveMMStraightCooperative+0xa4>)
 800163a:	6812      	ldr	r2, [r2, #0]
	if ((left_total_count - start_left) >= target_pulses &&
 800163c:	4293      	cmp	r3, r2
 800163e:	d30c      	bcc.n	800165a <driveMMStraightCooperative+0x96>
	        moveRoboboy(1, 1, 0, 0);  // stop
 8001640:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 800167c <driveMMStraightCooperative+0xb8>
 8001644:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 800167c <driveMMStraightCooperative+0xb8>
 8001648:	2101      	movs	r1, #1
 800164a:	2001      	movs	r0, #1
 800164c:	f7ff fec6 	bl	80013dc <moveRoboboy>
	        driving = 0;
 8001650:	4b04      	ldr	r3, [pc, #16]	@ (8001664 <driveMMStraightCooperative+0xa0>)
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
	        return 1;
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <driveMMStraightCooperative+0x98>
	    }
	return 0;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200001fc 	.word	0x200001fc
 8001668:	200001f8 	.word	0x200001f8
 800166c:	200001e8 	.word	0x200001e8
 8001670:	200001f0 	.word	0x200001f0
 8001674:	200001ec 	.word	0x200001ec
 8001678:	200001f4 	.word	0x200001f4
 800167c:	00000000 	.word	0x00000000

08001680 <spinDegreesCooperative>:
 *
 * @param direction Direction of rotation (LEFT = 0, RIGHT = 1)
 * @param degrees   Angle to rotate in degrees
 * @return          1 when the rotation is completed, 0 otherwise
 */
char spinDegreesCooperative(int direction, float degrees) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	ed87 0a00 	vstr	s0, [r7]
    if (driving == 0) {
 800168c:	4b25      	ldr	r3, [pc, #148]	@ (8001724 <spinDegreesCooperative+0xa4>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d114      	bne.n	80016be <spinDegreesCooperative+0x3e>
        target_pulses = degrees_to_pulses(degrees);
 8001694:	ed97 0a00 	vldr	s0, [r7]
 8001698:	f000 f986 	bl	80019a8 <degrees_to_pulses>
 800169c:	4603      	mov	r3, r0
 800169e:	4a22      	ldr	r2, [pc, #136]	@ (8001728 <spinDegreesCooperative+0xa8>)
 80016a0:	6013      	str	r3, [r2, #0]
        start_left = left_total_count;
 80016a2:	4b22      	ldr	r3, [pc, #136]	@ (800172c <spinDegreesCooperative+0xac>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	461a      	mov	r2, r3
 80016a8:	4b21      	ldr	r3, [pc, #132]	@ (8001730 <spinDegreesCooperative+0xb0>)
 80016aa:	601a      	str	r2, [r3, #0]
        start_right = right_total_count;
 80016ac:	4b21      	ldr	r3, [pc, #132]	@ (8001734 <spinDegreesCooperative+0xb4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b21      	ldr	r3, [pc, #132]	@ (8001738 <spinDegreesCooperative+0xb8>)
 80016b4:	601a      	str	r2, [r3, #0]
        driving = 1;
 80016b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001724 <spinDegreesCooperative+0xa4>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	701a      	strb	r2, [r3, #0]
 80016bc:	e020      	b.n	8001700 <spinDegreesCooperative+0x80>
    } else if ((left_total_count - start_left) >= target_pulses && (right_total_count - start_right) >= target_pulses) {
 80016be:	4b1b      	ldr	r3, [pc, #108]	@ (800172c <spinDegreesCooperative+0xac>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	461a      	mov	r2, r3
 80016c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <spinDegreesCooperative+0xb0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	4a17      	ldr	r2, [pc, #92]	@ (8001728 <spinDegreesCooperative+0xa8>)
 80016cc:	6812      	ldr	r2, [r2, #0]
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d316      	bcc.n	8001700 <spinDegreesCooperative+0x80>
 80016d2:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <spinDegreesCooperative+0xb4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b17      	ldr	r3, [pc, #92]	@ (8001738 <spinDegreesCooperative+0xb8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	4a12      	ldr	r2, [pc, #72]	@ (8001728 <spinDegreesCooperative+0xa8>)
 80016e0:	6812      	ldr	r2, [r2, #0]
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d30c      	bcc.n	8001700 <spinDegreesCooperative+0x80>
    	moveRoboboy(1, 1, 0, 0);
 80016e6:	eddf 0a15 	vldr	s1, [pc, #84]	@ 800173c <spinDegreesCooperative+0xbc>
 80016ea:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 800173c <spinDegreesCooperative+0xbc>
 80016ee:	2101      	movs	r1, #1
 80016f0:	2001      	movs	r0, #1
 80016f2:	f7ff fe73 	bl	80013dc <moveRoboboy>
    	driving = 0;
 80016f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001724 <spinDegreesCooperative+0xa4>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
    	return 1;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e00c      	b.n	800171a <spinDegreesCooperative+0x9a>
    }

    if (direction == RIGHT) {
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d104      	bne.n	8001710 <spinDegreesCooperative+0x90>
         // left forward, right backward
        driveMotorsCooperative(0, 1);
 8001706:	2101      	movs	r1, #1
 8001708:	2000      	movs	r0, #0
 800170a:	f7ff fec7 	bl	800149c <driveMotorsCooperative>
 800170e:	e003      	b.n	8001718 <spinDegreesCooperative+0x98>
    } else {
    	// left backwards, right forwards
    	driveMotorsCooperative(1, 0);
 8001710:	2100      	movs	r1, #0
 8001712:	2001      	movs	r0, #1
 8001714:	f7ff fec2 	bl	800149c <driveMotorsCooperative>
    }
    return 0;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200001fc 	.word	0x200001fc
 8001728:	200001f8 	.word	0x200001f8
 800172c:	200001e8 	.word	0x200001e8
 8001730:	200001f0 	.word	0x200001f0
 8001734:	200001ec 	.word	0x200001ec
 8001738:	200001f4 	.word	0x200001f4
 800173c:	00000000 	.word	0x00000000

08001740 <HAL_ADC_ConvCpltCallback>:
 * Stores the read ADC value into the adc[] buffer and starts the next conversion cycle.
 * This function is automatically called when the ADC finishes a conversion.
 *
 * @param hadc Pointer to the ADC handler (should be ADC1)
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0e      	ldr	r2, [pc, #56]	@ (8001788 <HAL_ADC_ConvCpltCallback+0x48>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d114      	bne.n	800177c <HAL_ADC_ConvCpltCallback+0x3c>
	        for (int i = 0; i < 6; i++) {
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	e00b      	b.n	8001770 <HAL_ADC_ConvCpltCallback+0x30>
	            adc[i] = buffer[i];
 8001758:	4a0c      	ldr	r2, [pc, #48]	@ (800178c <HAL_ADC_ConvCpltCallback+0x4c>)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001760:	b299      	uxth	r1, r3
 8001762:	4a0b      	ldr	r2, [pc, #44]	@ (8001790 <HAL_ADC_ConvCpltCallback+0x50>)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	        for (int i = 0; i < 6; i++) {
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	3301      	adds	r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2b05      	cmp	r3, #5
 8001774:	ddf0      	ble.n	8001758 <HAL_ADC_ConvCpltCallback+0x18>
	        }
	        conversion_done_flag = 1;
 8001776:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <HAL_ADC_ConvCpltCallback+0x54>)
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
	    }
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	50040000 	.word	0x50040000
 800178c:	20000170 	.word	0x20000170
 8001790:	20000164 	.word	0x20000164
 8001794:	20000030 	.word	0x20000030

08001798 <readSensorsAndPrint>:

void readSensorsAndPrint(void) {
 8001798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179a:	b089      	sub	sp, #36	@ 0x24
 800179c:	af06      	add	r7, sp, #24
	if (conversion_done_flag) {
 800179e:	4b20      	ldr	r3, [pc, #128]	@ (8001820 <readSensorsAndPrint+0x88>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d007      	beq.n	80017b8 <readSensorsAndPrint+0x20>
		conversion_done_flag = 0;
 80017a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001820 <readSensorsAndPrint+0x88>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
	    HAL_ADC_Start_DMA(&hadc1, buffer, 6);
 80017ae:	2206      	movs	r2, #6
 80017b0:	491c      	ldr	r1, [pc, #112]	@ (8001824 <readSensorsAndPrint+0x8c>)
 80017b2:	481d      	ldr	r0, [pc, #116]	@ (8001828 <readSensorsAndPrint+0x90>)
 80017b4:	f001 fa3e 	bl	8002c34 <HAL_ADC_Start_DMA>
	}

    int len = sprintf(string_buf,
    		"ADC: [%4d %4d %4d %4d %4d %4d] ENC: L=%4d R=%4d\r\n",
			adc[0], adc[1], adc[2], adc[3], adc[4], adc[5],
 80017b8:	4b1c      	ldr	r3, [pc, #112]	@ (800182c <readSensorsAndPrint+0x94>)
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	b29b      	uxth	r3, r3
    int len = sprintf(string_buf,
 80017be:	461e      	mov	r6, r3
			adc[0], adc[1], adc[2], adc[3], adc[4], adc[5],
 80017c0:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <readSensorsAndPrint+0x94>)
 80017c2:	885b      	ldrh	r3, [r3, #2]
 80017c4:	b29b      	uxth	r3, r3
    int len = sprintf(string_buf,
 80017c6:	469c      	mov	ip, r3
			adc[0], adc[1], adc[2], adc[3], adc[4], adc[5],
 80017c8:	4b18      	ldr	r3, [pc, #96]	@ (800182c <readSensorsAndPrint+0x94>)
 80017ca:	889b      	ldrh	r3, [r3, #4]
 80017cc:	b29b      	uxth	r3, r3
    int len = sprintf(string_buf,
 80017ce:	4619      	mov	r1, r3
			adc[0], adc[1], adc[2], adc[3], adc[4], adc[5],
 80017d0:	4b16      	ldr	r3, [pc, #88]	@ (800182c <readSensorsAndPrint+0x94>)
 80017d2:	88db      	ldrh	r3, [r3, #6]
 80017d4:	b29b      	uxth	r3, r3
    int len = sprintf(string_buf,
 80017d6:	4618      	mov	r0, r3
			adc[0], adc[1], adc[2], adc[3], adc[4], adc[5],
 80017d8:	4b14      	ldr	r3, [pc, #80]	@ (800182c <readSensorsAndPrint+0x94>)
 80017da:	891b      	ldrh	r3, [r3, #8]
 80017dc:	b29b      	uxth	r3, r3
    int len = sprintf(string_buf,
 80017de:	461c      	mov	r4, r3
			adc[0], adc[1], adc[2], adc[3], adc[4], adc[5],
 80017e0:	4b12      	ldr	r3, [pc, #72]	@ (800182c <readSensorsAndPrint+0x94>)
 80017e2:	895b      	ldrh	r3, [r3, #10]
 80017e4:	b29b      	uxth	r3, r3
    int len = sprintf(string_buf,
 80017e6:	461d      	mov	r5, r3
 80017e8:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <readSensorsAndPrint+0x98>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a11      	ldr	r2, [pc, #68]	@ (8001834 <readSensorsAndPrint+0x9c>)
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	9205      	str	r2, [sp, #20]
 80017f2:	9304      	str	r3, [sp, #16]
 80017f4:	9503      	str	r5, [sp, #12]
 80017f6:	9402      	str	r4, [sp, #8]
 80017f8:	9001      	str	r0, [sp, #4]
 80017fa:	9100      	str	r1, [sp, #0]
 80017fc:	4663      	mov	r3, ip
 80017fe:	4632      	mov	r2, r6
 8001800:	490d      	ldr	r1, [pc, #52]	@ (8001838 <readSensorsAndPrint+0xa0>)
 8001802:	480e      	ldr	r0, [pc, #56]	@ (800183c <readSensorsAndPrint+0xa4>)
 8001804:	f005 fad0 	bl	8006da8 <siprintf>
 8001808:	6078      	str	r0, [r7, #4]
			left_total_count, right_total_count);
    HAL_UART_Transmit(&huart2, (uint8_t*)string_buf, len, 100);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	b29a      	uxth	r2, r3
 800180e:	2364      	movs	r3, #100	@ 0x64
 8001810:	490a      	ldr	r1, [pc, #40]	@ (800183c <readSensorsAndPrint+0xa4>)
 8001812:	480b      	ldr	r0, [pc, #44]	@ (8001840 <readSensorsAndPrint+0xa8>)
 8001814:	f004 fdf7 	bl	8006406 <HAL_UART_Transmit>
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001820:	20000030 	.word	0x20000030
 8001824:	20000170 	.word	0x20000170
 8001828:	200000ac 	.word	0x200000ac
 800182c:	20000164 	.word	0x20000164
 8001830:	200001e8 	.word	0x200001e8
 8001834:	200001ec 	.word	0x200001ec
 8001838:	08007700 	.word	0x08007700
 800183c:	2000017c 	.word	0x2000017c
 8001840:	2000025c 	.word	0x2000025c

08001844 <process_encoder_signals>:
 *
 * Increments the global encoder tick counters for the left and right wheel
 * when a rising edge is detected in the analog signal.
 * This function should be called regularly (e.g. in main loop).
 */
void process_encoder_signals() {
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
    // Left encoder
    uint16_t val_l = adc[1];
 800184a:	4b27      	ldr	r3, [pc, #156]	@ (80018e8 <process_encoder_signals+0xa4>)
 800184c:	885b      	ldrh	r3, [r3, #2]
 800184e:	80fb      	strh	r3, [r7, #6]
    uint8_t state_l = (val_l > HIGH_THRESHOLD) ? 1 : (val_l < LOW_THRESHOLD) ? 0 : left_prev_state;
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001856:	4293      	cmp	r3, r2
 8001858:	d809      	bhi.n	800186e <process_encoder_signals+0x2a>
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001860:	d303      	bcc.n	800186a <process_encoder_signals+0x26>
 8001862:	4b22      	ldr	r3, [pc, #136]	@ (80018ec <process_encoder_signals+0xa8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	e002      	b.n	8001870 <process_encoder_signals+0x2c>
 800186a:	2300      	movs	r3, #0
 800186c:	e000      	b.n	8001870 <process_encoder_signals+0x2c>
 800186e:	2301      	movs	r3, #1
 8001870:	717b      	strb	r3, [r7, #5]
    if (state_l != left_prev_state && state_l == 1) {
 8001872:	797a      	ldrb	r2, [r7, #5]
 8001874:	4b1d      	ldr	r3, [pc, #116]	@ (80018ec <process_encoder_signals+0xa8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d007      	beq.n	800188c <process_encoder_signals+0x48>
 800187c:	797b      	ldrb	r3, [r7, #5]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d104      	bne.n	800188c <process_encoder_signals+0x48>
        left_total_count++;
 8001882:	4b1b      	ldr	r3, [pc, #108]	@ (80018f0 <process_encoder_signals+0xac>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	3301      	adds	r3, #1
 8001888:	4a19      	ldr	r2, [pc, #100]	@ (80018f0 <process_encoder_signals+0xac>)
 800188a:	6013      	str	r3, [r2, #0]
    }
    left_prev_state = state_l;
 800188c:	797b      	ldrb	r3, [r7, #5]
 800188e:	4a17      	ldr	r2, [pc, #92]	@ (80018ec <process_encoder_signals+0xa8>)
 8001890:	6013      	str	r3, [r2, #0]

    // Right encoder
    uint16_t val_r = adc[4];
 8001892:	4b15      	ldr	r3, [pc, #84]	@ (80018e8 <process_encoder_signals+0xa4>)
 8001894:	891b      	ldrh	r3, [r3, #8]
 8001896:	807b      	strh	r3, [r7, #2]
    uint8_t state_r = (val_r > HIGH_THRESHOLD) ? 1 : (val_r < LOW_THRESHOLD) ? 0 : right_prev_state;
 8001898:	887b      	ldrh	r3, [r7, #2]
 800189a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800189e:	4293      	cmp	r3, r2
 80018a0:	d809      	bhi.n	80018b6 <process_encoder_signals+0x72>
 80018a2:	887b      	ldrh	r3, [r7, #2]
 80018a4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80018a8:	d303      	bcc.n	80018b2 <process_encoder_signals+0x6e>
 80018aa:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <process_encoder_signals+0xb0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	e002      	b.n	80018b8 <process_encoder_signals+0x74>
 80018b2:	2300      	movs	r3, #0
 80018b4:	e000      	b.n	80018b8 <process_encoder_signals+0x74>
 80018b6:	2301      	movs	r3, #1
 80018b8:	707b      	strb	r3, [r7, #1]
    if (state_r != right_prev_state && state_r == 1) {
 80018ba:	787a      	ldrb	r2, [r7, #1]
 80018bc:	4b0d      	ldr	r3, [pc, #52]	@ (80018f4 <process_encoder_signals+0xb0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d007      	beq.n	80018d4 <process_encoder_signals+0x90>
 80018c4:	787b      	ldrb	r3, [r7, #1]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d104      	bne.n	80018d4 <process_encoder_signals+0x90>
        right_total_count++;
 80018ca:	4b0b      	ldr	r3, [pc, #44]	@ (80018f8 <process_encoder_signals+0xb4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	4a09      	ldr	r2, [pc, #36]	@ (80018f8 <process_encoder_signals+0xb4>)
 80018d2:	6013      	str	r3, [r2, #0]
    }
    right_prev_state = state_r;
 80018d4:	787b      	ldrb	r3, [r7, #1]
 80018d6:	4a07      	ldr	r2, [pc, #28]	@ (80018f4 <process_encoder_signals+0xb0>)
 80018d8:	6013      	str	r3, [r2, #0]
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000164 	.word	0x20000164
 80018ec:	200001e0 	.word	0x200001e0
 80018f0:	200001e8 	.word	0x200001e8
 80018f4:	200001e4 	.word	0x200001e4
 80018f8:	200001ec 	.word	0x200001ec

080018fc <taskLED>:
 * @brief Blinks the onboard LED in a cooperative, non-blocking manner.
 *
 * Uses a state machine and HAL_GetTick() to toggle the LED every 500 ms.
 * Should be called regularly in the main loop.
 */
void taskLED(void) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8001902:	f000 fe81 	bl	8002608 <HAL_GetTick>
 8001906:	6078      	str	r0, [r7, #4]

    if (current_time < taskLED_timeout) return;
 8001908:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <taskLED+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	429a      	cmp	r2, r3
 8001910:	d322      	bcc.n	8001958 <taskLED+0x5c>

    switch (taskLED_state) {
 8001912:	4b14      	ldr	r3, [pc, #80]	@ (8001964 <taskLED+0x68>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <taskLED+0x24>
 800191a:	2b01      	cmp	r3, #1
 800191c:	d00e      	beq.n	800193c <taskLED+0x40>
 800191e:	e01c      	b.n	800195a <taskLED+0x5e>
        case LED_ON:
            HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001920:	2201      	movs	r2, #1
 8001922:	2108      	movs	r1, #8
 8001924:	4810      	ldr	r0, [pc, #64]	@ (8001968 <taskLED+0x6c>)
 8001926:	f002 fba5 	bl	8004074 <HAL_GPIO_WritePin>
            taskLED_timeout = current_time + 500;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001930:	4a0b      	ldr	r2, [pc, #44]	@ (8001960 <taskLED+0x64>)
 8001932:	6013      	str	r3, [r2, #0]
            taskLED_state = LED_OFF;
 8001934:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <taskLED+0x68>)
 8001936:	2201      	movs	r2, #1
 8001938:	701a      	strb	r2, [r3, #0]
            break;
 800193a:	e00e      	b.n	800195a <taskLED+0x5e>

        case LED_OFF:
            HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800193c:	2200      	movs	r2, #0
 800193e:	2108      	movs	r1, #8
 8001940:	4809      	ldr	r0, [pc, #36]	@ (8001968 <taskLED+0x6c>)
 8001942:	f002 fb97 	bl	8004074 <HAL_GPIO_WritePin>
            taskLED_timeout = current_time + 500;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800194c:	4a04      	ldr	r2, [pc, #16]	@ (8001960 <taskLED+0x64>)
 800194e:	6013      	str	r3, [r2, #0]
            taskLED_state = LED_ON;
 8001950:	4b04      	ldr	r3, [pc, #16]	@ (8001964 <taskLED+0x68>)
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
            break;
 8001956:	e000      	b.n	800195a <taskLED+0x5e>
    if (current_time < taskLED_timeout) return;
 8001958:	bf00      	nop
    }
}
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	2000015c 	.word	0x2000015c
 8001964:	20000158 	.word	0x20000158
 8001968:	48000400 	.word	0x48000400
 800196c:	00000000 	.word	0x00000000

08001970 <mm_to_pulses>:
 * @brief Converts a linear distance in millimeters to encoder pulses.
 *
 * @param mm Distance in millimeters
 * @return Number of encoder pulses corresponding to the distance
 */
int mm_to_pulses(float mm) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	ed87 0a01 	vstr	s0, [r7, #4]
    return (int)(mm / MM_PER_PULSE);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7fe fddc 	bl	8000538 <__aeabi_f2d>
 8001980:	a307      	add	r3, pc, #28	@ (adr r3, 80019a0 <mm_to_pulses+0x30>)
 8001982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001986:	f7fe ff59 	bl	800083c <__aeabi_ddiv>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	f7ff f83b 	bl	8000a0c <__aeabi_d2iz>
 8001996:	4603      	mov	r3, r0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	c638d03f 	.word	0xc638d03f
 80019a4:	4024f1a6 	.word	0x4024f1a6

080019a8 <degrees_to_pulses>:
 * Assumes the robot rotates around its center (point turn).
 *
 * @param degrees Angle in degrees
 * @return Number of pulses required for the given rotation
 */
int degrees_to_pulses(float degrees) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	ed87 0a01 	vstr	s0, [r7, #4]
    float turn_circumference = M_PI * WHEEL_BASE_MM;
 80019b2:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <degrees_to_pulses+0x38>)
 80019b4:	60fb      	str	r3, [r7, #12]
    float arc_length = (degrees / 360.0f) * turn_circumference;
 80019b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80019ba:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80019e4 <degrees_to_pulses+0x3c>
 80019be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019c2:	ed97 7a03 	vldr	s14, [r7, #12]
 80019c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ca:	edc7 7a02 	vstr	s15, [r7, #8]
    return (int) mm_to_pulses(arc_length);
 80019ce:	ed97 0a02 	vldr	s0, [r7, #8]
 80019d2:	f7ff ffcd 	bl	8001970 <mm_to_pulses>
 80019d6:	4603      	mov	r3, r0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	437b53d1 	.word	0x437b53d1
 80019e4:	43b40000 	.word	0x43b40000

080019e8 <task_followTrajectory>:
 * @brief Drives a predefined path made of trajectory steps (forward/turn).
 *
 * Executes each step from the global path[] array cooperatively. Advances to the next step
 * only after the current movement or turn completes. Transitions to FOLLOW_LINE state once done.
 */
void task_followTrajectory(void) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
    TrajectoryStep* step = &path[current_step];
 80019ee:	4b3b      	ldr	r3, [pc, #236]	@ (8001adc <task_followTrajectory+0xf4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	4a3a      	ldr	r2, [pc, #232]	@ (8001ae0 <task_followTrajectory+0xf8>)
 80019f6:	4413      	add	r3, r2
 80019f8:	607b      	str	r3, [r7, #4]

    switch (step->type) {
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d867      	bhi.n	8001ad2 <task_followTrajectory+0xea>
 8001a02:	a201      	add	r2, pc, #4	@ (adr r2, 8001a08 <task_followTrajectory+0x20>)
 8001a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a08:	08001a19 	.word	0x08001a19
 8001a0c:	08001a4b 	.word	0x08001a4b
 8001a10:	08001a81 	.word	0x08001a81
 8001a14:	08001ab7 	.word	0x08001ab7
        case MOVE_FORWARD:
            if (driveMMStraightCooperative(1, step->value)) {
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a22:	2001      	movs	r0, #1
 8001a24:	f7ff fdce 	bl	80015c4 <driveMMStraightCooperative>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d04c      	beq.n	8001ac8 <task_followTrajectory+0xe0>
            	moveRoboboy(1, 1, 0, 0);
 8001a2e:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8001ae4 <task_followTrajectory+0xfc>
 8001a32:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8001ae4 <task_followTrajectory+0xfc>
 8001a36:	2101      	movs	r1, #1
 8001a38:	2001      	movs	r0, #1
 8001a3a:	f7ff fccf 	bl	80013dc <moveRoboboy>
            	current_step++;
 8001a3e:	4b27      	ldr	r3, [pc, #156]	@ (8001adc <task_followTrajectory+0xf4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	3301      	adds	r3, #1
 8001a44:	4a25      	ldr	r2, [pc, #148]	@ (8001adc <task_followTrajectory+0xf4>)
 8001a46:	6013      	str	r3, [r2, #0]
            }
            break;
 8001a48:	e03e      	b.n	8001ac8 <task_followTrajectory+0xe0>

        case TURN_LEFT:
            if (spinDegreesCooperative(LEFT, step->value)) {
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a50:	eeb0 0a67 	vmov.f32	s0, s15
 8001a54:	2000      	movs	r0, #0
 8001a56:	f7ff fe13 	bl	8001680 <spinDegreesCooperative>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d035      	beq.n	8001acc <task_followTrajectory+0xe4>
            	moveRoboboy(1, 1, 0, 0);
 8001a60:	eddf 0a20 	vldr	s1, [pc, #128]	@ 8001ae4 <task_followTrajectory+0xfc>
 8001a64:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8001ae4 <task_followTrajectory+0xfc>
 8001a68:	2101      	movs	r1, #1
 8001a6a:	2001      	movs	r0, #1
 8001a6c:	f7ff fcb6 	bl	80013dc <moveRoboboy>
            	current_step++;
 8001a70:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <task_followTrajectory+0xf4>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	3301      	adds	r3, #1
 8001a76:	4a19      	ldr	r2, [pc, #100]	@ (8001adc <task_followTrajectory+0xf4>)
 8001a78:	6013      	str	r3, [r2, #0]
                reset_encoder_counters();
 8001a7a:	f000 f835 	bl	8001ae8 <reset_encoder_counters>
            }
            break;
 8001a7e:	e025      	b.n	8001acc <task_followTrajectory+0xe4>

        case TURN_RIGHT:
        	if (spinDegreesCooperative(RIGHT, step->value)) {
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a86:	eeb0 0a67 	vmov.f32	s0, s15
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f7ff fdf8 	bl	8001680 <spinDegreesCooperative>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d01c      	beq.n	8001ad0 <task_followTrajectory+0xe8>
        		moveRoboboy(1, 1, 0, 0);
 8001a96:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8001ae4 <task_followTrajectory+0xfc>
 8001a9a:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8001ae4 <task_followTrajectory+0xfc>
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	f7ff fc9b 	bl	80013dc <moveRoboboy>
        		current_step++;
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8001adc <task_followTrajectory+0xf4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	4a0b      	ldr	r2, [pc, #44]	@ (8001adc <task_followTrajectory+0xf4>)
 8001aae:	6013      	str	r3, [r2, #0]
        		reset_encoder_counters();
 8001ab0:	f000 f81a 	bl	8001ae8 <reset_encoder_counters>
        	}
            break;
 8001ab4:	e00c      	b.n	8001ad0 <task_followTrajectory+0xe8>

        case DONE:
            moveRoboboy(1, 1, 0, 0);
 8001ab6:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8001ae4 <task_followTrajectory+0xfc>
 8001aba:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001ae4 <task_followTrajectory+0xfc>
 8001abe:	2101      	movs	r1, #1
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f7ff fc8b 	bl	80013dc <moveRoboboy>
            break;
 8001ac6:	e004      	b.n	8001ad2 <task_followTrajectory+0xea>
            break;
 8001ac8:	bf00      	nop
 8001aca:	e002      	b.n	8001ad2 <task_followTrajectory+0xea>
            break;
 8001acc:	bf00      	nop
 8001ace:	e000      	b.n	8001ad2 <task_followTrajectory+0xea>
            break;
 8001ad0:	bf00      	nop
    }
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000160 	.word	0x20000160
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	00000000 	.word	0x00000000

08001ae8 <reset_encoder_counters>:

/*
 * @brief Resets encoder pulse counts to 0.
 */
void reset_encoder_counters(void) {
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
    left_total_count = 0;
 8001aec:	4b05      	ldr	r3, [pc, #20]	@ (8001b04 <reset_encoder_counters+0x1c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
    right_total_count = 0;
 8001af2:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <reset_encoder_counters+0x20>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	200001e8 	.word	0x200001e8
 8001b08:	200001ec 	.word	0x200001ec

08001b0c <line_detected>:
/*
 * @brief Checks if any line sensor detects a dark surface.
 *
 * @return true if any sensor value is above the line detection threshold
 */
char line_detected(void) {
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
    return (adc[0] > LINE_HIGH_THRESHOLD || adc[2] > LINE_HIGH_THRESHOLD || adc[5] > LINE_HIGH_THRESHOLD);
 8001b10:	4b0d      	ldr	r3, [pc, #52]	@ (8001b48 <line_detected+0x3c>)
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b1a:	d80b      	bhi.n	8001b34 <line_detected+0x28>
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b48 <line_detected+0x3c>)
 8001b1e:	889b      	ldrh	r3, [r3, #4]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b26:	d805      	bhi.n	8001b34 <line_detected+0x28>
 8001b28:	4b07      	ldr	r3, [pc, #28]	@ (8001b48 <line_detected+0x3c>)
 8001b2a:	895b      	ldrh	r3, [r3, #10]
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b32:	d901      	bls.n	8001b38 <line_detected+0x2c>
 8001b34:	2301      	movs	r3, #1
 8001b36:	e000      	b.n	8001b3a <line_detected+0x2e>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	b2db      	uxtb	r3, r3
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	20000164 	.word	0x20000164

08001b4c <collision_detected>:
/*
 * @brief Checks if any line sensor detects a dark surface.
 *
 * @return true if any sensor value is above the line detection threshold
 */
char collision_detected(void) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
	return (!HAL_GPIO_ReadPin(GPIOA, switch_left_Pin) || !HAL_GPIO_ReadPin(GPIOA, switch_middle_Pin) || !HAL_GPIO_ReadPin(GPIOA, switch_right_Pin));
 8001b50:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b58:	f002 fa74 	bl	8004044 <HAL_GPIO_ReadPin>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d011      	beq.n	8001b86 <collision_detected+0x3a>
 8001b62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b6a:	f002 fa6b 	bl	8004044 <HAL_GPIO_ReadPin>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d008      	beq.n	8001b86 <collision_detected+0x3a>
 8001b74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b7c:	f002 fa62 	bl	8004044 <HAL_GPIO_ReadPin>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <collision_detected+0x3e>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <collision_detected+0x40>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <get_pwm_values>:
 * position error and applies a P-controller to derive speed correction.
 *
 * @return Pointer to float[2] array: {left PWM, right PWM}
 * @note Dynamically allocates memory — caller is responsible for freeing it if needed.
 */
float* get_pwm_values(void) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
    // All sensors see white → line lost
	static float pwm_values[2];
    if (line_detected() == FALSE) {
 8001b9a:	f7ff ffb7 	bl	8001b0c <line_detected>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d109      	bne.n	8001bb8 <get_pwm_values+0x24>
    	pwm_values[0] = 0;
 8001ba4:	4b4c      	ldr	r3, [pc, #304]	@ (8001cd8 <get_pwm_values+0x144>)
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
    	pwm_values[1] = 0;
 8001bac:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd8 <get_pwm_values+0x144>)
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	605a      	str	r2, [r3, #4]
    	return pwm_values;
 8001bb4:	4b48      	ldr	r3, [pc, #288]	@ (8001cd8 <get_pwm_values+0x144>)
 8001bb6:	e08b      	b.n	8001cd0 <get_pwm_values+0x13c>
    }

    int sum = adc[0] + adc[2] + adc[5];
 8001bb8:	4b48      	ldr	r3, [pc, #288]	@ (8001cdc <get_pwm_values+0x148>)
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4b46      	ldr	r3, [pc, #280]	@ (8001cdc <get_pwm_values+0x148>)
 8001bc2:	889b      	ldrh	r3, [r3, #4]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a44      	ldr	r2, [pc, #272]	@ (8001cdc <get_pwm_values+0x148>)
 8001bca:	8952      	ldrh	r2, [r2, #10]
 8001bcc:	b292      	uxth	r2, r2
 8001bce:	4413      	add	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]
    if (sum == 0) {
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d109      	bne.n	8001bec <get_pwm_values+0x58>
    	// case: weird stuff and we dont want division by zero errors
    	pwm_values[0] = 0;
 8001bd8:	4b3f      	ldr	r3, [pc, #252]	@ (8001cd8 <get_pwm_values+0x144>)
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
    	pwm_values[1] = 0;
 8001be0:	4b3d      	ldr	r3, [pc, #244]	@ (8001cd8 <get_pwm_values+0x144>)
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	605a      	str	r2, [r3, #4]
    	return pwm_values;
 8001be8:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd8 <get_pwm_values+0x144>)
 8001bea:	e071      	b.n	8001cd0 <get_pwm_values+0x13c>
    }
    // Weighted sum for error calculations: left = -1, middle = 0, right = +1
    int error = (-1 * adc[5] + 0 * adc[0] + 1 * adc[2]) * 1000 / sum;
 8001bec:	4b3b      	ldr	r3, [pc, #236]	@ (8001cdc <get_pwm_values+0x148>)
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	4b3a      	ldr	r3, [pc, #232]	@ (8001cdc <get_pwm_values+0x148>)
 8001bf2:	889b      	ldrh	r3, [r3, #4]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b38      	ldr	r3, [pc, #224]	@ (8001cdc <get_pwm_values+0x148>)
 8001bfa:	895b      	ldrh	r3, [r3, #10]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c04:	fb03 f202 	mul.w	r2, r3, r2
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c0e:	60bb      	str	r3, [r7, #8]

    float correction = LINE_KP * (float)error / 1000.0f;
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	ee07 3a90 	vmov	s15, r3
 8001c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c1a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c22:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8001ce0 <get_pwm_values+0x14c>
 8001c26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c2a:	edc7 7a01 	vstr	s15, [r7, #4]

    float speed_left = MOTOR_BASE_SPEED - correction;
 8001c2e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c32:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c3a:	edc7 7a05 	vstr	s15, [r7, #20]
    float speed_right = MOTOR_BASE_SPEED + correction;
 8001c3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c42:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c4a:	edc7 7a04 	vstr	s15, [r7, #16]

    // Clamp
    if (speed_left > 1.0f) speed_left = 1.0f;
 8001c4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5e:	dd02      	ble.n	8001c66 <get_pwm_values+0xd2>
 8001c60:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001c64:	617b      	str	r3, [r7, #20]
    if (speed_left < 0.0f) speed_left = 0.0f;
 8001c66:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c72:	d502      	bpl.n	8001c7a <get_pwm_values+0xe6>
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
    if (speed_right > 1.0f) speed_right = 1.0f;
 8001c7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8a:	dd02      	ble.n	8001c92 <get_pwm_values+0xfe>
 8001c8c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001c90:	613b      	str	r3, [r7, #16]
    if (speed_right < 0.0f) speed_right = 0.0f;
 8001c92:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9e:	d502      	bpl.n	8001ca6 <get_pwm_values+0x112>
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]

    pwm_values[0] = getVel(speed_left, FORWARDS);
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	ed97 0a05 	vldr	s0, [r7, #20]
 8001cac:	f7ff fb18 	bl	80012e0 <getVel>
 8001cb0:	eef0 7a40 	vmov.f32	s15, s0
 8001cb4:	4b08      	ldr	r3, [pc, #32]	@ (8001cd8 <get_pwm_values+0x144>)
 8001cb6:	edc3 7a00 	vstr	s15, [r3]
    pwm_values[1]= getVel(speed_right, FORWARDS);
 8001cba:	2001      	movs	r0, #1
 8001cbc:	ed97 0a04 	vldr	s0, [r7, #16]
 8001cc0:	f7ff fb0e 	bl	80012e0 <getVel>
 8001cc4:	eef0 7a40 	vmov.f32	s15, s0
 8001cc8:	4b03      	ldr	r3, [pc, #12]	@ (8001cd8 <get_pwm_values+0x144>)
 8001cca:	edc3 7a01 	vstr	s15, [r3, #4]

    return pwm_values;
 8001cce:	4b02      	ldr	r3, [pc, #8]	@ (8001cd8 <get_pwm_values+0x144>)
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000204 	.word	0x20000204
 8001cdc:	20000164 	.word	0x20000164
 8001ce0:	447a0000 	.word	0x447a0000

08001ce4 <task_followLine>:
 *
 * Performs a left-right sweep using one-sided turns to relocate the line.
 * If no line is found, transitions to OVERCOME_GAP state.
 * If the line is found during the search, resumes line following.
 */
void task_followLine() {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
	float* pwm = get_pwm_values();
 8001cea:	f7ff ff53 	bl	8001b94 <get_pwm_values>
 8001cee:	6078      	str	r0, [r7, #4]

	if (line_detected()) {
 8001cf0:	f7ff ff0c 	bl	8001b0c <line_detected>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00f      	beq.n	8001d1a <task_followLine+0x36>
		setMotors(0, 0, pwm[0], pwm[1]);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	edd3 7a00 	vldr	s15, [r3]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3304      	adds	r3, #4
 8001d04:	ed93 7a00 	vldr	s14, [r3]
 8001d08:	eef0 0a47 	vmov.f32	s1, s14
 8001d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d10:	2100      	movs	r1, #0
 8001d12:	2000      	movs	r0, #0
 8001d14:	f7ff fb20 	bl	8001358 <setMotors>
		reset_encoder_counters();
		course_state = AVOID_OBSTACLE;
	} else {
		course_state = SEARCH_LINE;
	}
}
 8001d18:	e010      	b.n	8001d3c <task_followLine+0x58>
	} else if (collision_detected()){
 8001d1a:	f7ff ff17 	bl	8001b4c <collision_detected>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d008      	beq.n	8001d36 <task_followLine+0x52>
		avoidObstacleState = 0;
 8001d24:	4b07      	ldr	r3, [pc, #28]	@ (8001d44 <task_followLine+0x60>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
		reset_encoder_counters();
 8001d2a:	f7ff fedd 	bl	8001ae8 <reset_encoder_counters>
		course_state = AVOID_OBSTACLE;
 8001d2e:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <task_followLine+0x64>)
 8001d30:	2204      	movs	r2, #4
 8001d32:	701a      	strb	r2, [r3, #0]
}
 8001d34:	e002      	b.n	8001d3c <task_followLine+0x58>
		course_state = SEARCH_LINE;
 8001d36:	4b04      	ldr	r3, [pc, #16]	@ (8001d48 <task_followLine+0x64>)
 8001d38:	2202      	movs	r2, #2
 8001d3a:	701a      	strb	r2, [r3, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000200 	.word	0x20000200
 8001d48:	200001fd 	.word	0x200001fd

08001d4c <task_searchLine>:
 *
 * Performs a left-right sweep using one-sided turns to relocate the line.
 * If no line is found, transitions to OVERCOME_GAP state.
 * If the line is found during the search, resumes line following.
 */
void task_searchLine(void) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
    switch (search_state) {
 8001d50:	4b54      	ldr	r3, [pc, #336]	@ (8001ea4 <task_searchLine+0x158>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b05      	cmp	r3, #5
 8001d56:	f200 80a2 	bhi.w	8001e9e <task_searchLine+0x152>
 8001d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d60 <task_searchLine+0x14>)
 8001d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d60:	08001d79 	.word	0x08001d79
 8001d64:	08001d91 	.word	0x08001d91
 8001d68:	08001ddb 	.word	0x08001ddb
 8001d6c:	08001e03 	.word	0x08001e03
 8001d70:	08001e4d 	.word	0x08001e4d
 8001d74:	08001e7f 	.word	0x08001e7f
        case SEARCH_INIT:
            moveRoboboy(1, 1, 0, 0);
 8001d78:	eddf 0a4b 	vldr	s1, [pc, #300]	@ 8001ea8 <task_searchLine+0x15c>
 8001d7c:	ed9f 0a4a 	vldr	s0, [pc, #296]	@ 8001ea8 <task_searchLine+0x15c>
 8001d80:	2101      	movs	r1, #1
 8001d82:	2001      	movs	r0, #1
 8001d84:	f7ff fb2a 	bl	80013dc <moveRoboboy>
            search_state = SEARCH_ROTATE_RIGHT;
 8001d88:	4b46      	ldr	r3, [pc, #280]	@ (8001ea4 <task_searchLine+0x158>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]
            break;
 8001d8e:	e086      	b.n	8001e9e <task_searchLine+0x152>

        case SEARCH_ROTATE_RIGHT:
            if (spinDegreesCooperative(RIGHT, 100.0f)) {
 8001d90:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 8001eac <task_searchLine+0x160>
 8001d94:	2001      	movs	r0, #1
 8001d96:	f7ff fc73 	bl	8001680 <spinDegreesCooperative>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00b      	beq.n	8001db8 <task_searchLine+0x6c>
            	moveRoboboy(1, 1, 0, 0);
 8001da0:	eddf 0a41 	vldr	s1, [pc, #260]	@ 8001ea8 <task_searchLine+0x15c>
 8001da4:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8001ea8 <task_searchLine+0x15c>
 8001da8:	2101      	movs	r1, #1
 8001daa:	2001      	movs	r0, #1
 8001dac:	f7ff fb16 	bl	80013dc <moveRoboboy>
                search_state = SEARCH_ROTATE_RIGHT_BACK;
 8001db0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ea4 <task_searchLine+0x158>)
 8001db2:	2202      	movs	r2, #2
 8001db4:	701a      	strb	r2, [r3, #0]
            } else if (line_detected()) {
                moveRoboboy(1, 1, 0, 0);
                search_state = SEARCH_DONE;
            }
            break;
 8001db6:	e06b      	b.n	8001e90 <task_searchLine+0x144>
            } else if (line_detected()) {
 8001db8:	f7ff fea8 	bl	8001b0c <line_detected>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d066      	beq.n	8001e90 <task_searchLine+0x144>
                moveRoboboy(1, 1, 0, 0);
 8001dc2:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8001ea8 <task_searchLine+0x15c>
 8001dc6:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 8001ea8 <task_searchLine+0x15c>
 8001dca:	2101      	movs	r1, #1
 8001dcc:	2001      	movs	r0, #1
 8001dce:	f7ff fb05 	bl	80013dc <moveRoboboy>
                search_state = SEARCH_DONE;
 8001dd2:	4b34      	ldr	r3, [pc, #208]	@ (8001ea4 <task_searchLine+0x158>)
 8001dd4:	2205      	movs	r2, #5
 8001dd6:	701a      	strb	r2, [r3, #0]
            break;
 8001dd8:	e05a      	b.n	8001e90 <task_searchLine+0x144>

        case SEARCH_ROTATE_RIGHT_BACK:
        	if (spinDegreesCooperative(LEFT, 100.0f)) {
 8001dda:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8001eac <task_searchLine+0x160>
 8001dde:	2000      	movs	r0, #0
 8001de0:	f7ff fc4e 	bl	8001680 <spinDegreesCooperative>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d054      	beq.n	8001e94 <task_searchLine+0x148>
        		moveRoboboy(1, 1, 0, 0);
 8001dea:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8001ea8 <task_searchLine+0x15c>
 8001dee:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8001ea8 <task_searchLine+0x15c>
 8001df2:	2101      	movs	r1, #1
 8001df4:	2001      	movs	r0, #1
 8001df6:	f7ff faf1 	bl	80013dc <moveRoboboy>
                search_state = SEARCH_ROTATE_LEFT;
 8001dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea4 <task_searchLine+0x158>)
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	701a      	strb	r2, [r3, #0]
        	}
            break;
 8001e00:	e048      	b.n	8001e94 <task_searchLine+0x148>

        case SEARCH_ROTATE_LEFT:
        	if (spinDegreesCooperative(LEFT, 100.0f)) {
 8001e02:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8001eac <task_searchLine+0x160>
 8001e06:	2000      	movs	r0, #0
 8001e08:	f7ff fc3a 	bl	8001680 <spinDegreesCooperative>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00b      	beq.n	8001e2a <task_searchLine+0xde>
        		// case: no line found
        		moveRoboboy(1, 1, 0, 0);
 8001e12:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8001ea8 <task_searchLine+0x15c>
 8001e16:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8001ea8 <task_searchLine+0x15c>
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	f7ff fadd 	bl	80013dc <moveRoboboy>
        		search_state = SEARCH_ROTATE_LEFT_BACK;
 8001e22:	4b20      	ldr	r3, [pc, #128]	@ (8001ea4 <task_searchLine+0x158>)
 8001e24:	2204      	movs	r2, #4
 8001e26:	701a      	strb	r2, [r3, #0]
        	} else if (line_detected()) {
                moveRoboboy(1, 1, 0, 0);
                search_state = SEARCH_DONE;
            }
            break;
 8001e28:	e036      	b.n	8001e98 <task_searchLine+0x14c>
        	} else if (line_detected()) {
 8001e2a:	f7ff fe6f 	bl	8001b0c <line_detected>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d031      	beq.n	8001e98 <task_searchLine+0x14c>
                moveRoboboy(1, 1, 0, 0);
 8001e34:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8001ea8 <task_searchLine+0x15c>
 8001e38:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8001ea8 <task_searchLine+0x15c>
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	2001      	movs	r0, #1
 8001e40:	f7ff facc 	bl	80013dc <moveRoboboy>
                search_state = SEARCH_DONE;
 8001e44:	4b17      	ldr	r3, [pc, #92]	@ (8001ea4 <task_searchLine+0x158>)
 8001e46:	2205      	movs	r2, #5
 8001e48:	701a      	strb	r2, [r3, #0]
            break;
 8001e4a:	e025      	b.n	8001e98 <task_searchLine+0x14c>

        case SEARCH_ROTATE_LEFT_BACK:
        	if (spinDegreesCooperative(RIGHT, 100.0f)) {
 8001e4c:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8001eac <task_searchLine+0x160>
 8001e50:	2001      	movs	r0, #1
 8001e52:	f7ff fc15 	bl	8001680 <spinDegreesCooperative>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d01f      	beq.n	8001e9c <task_searchLine+0x150>
        		moveRoboboy(1, 1, 0, 0);
 8001e5c:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8001ea8 <task_searchLine+0x15c>
 8001e60:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8001ea8 <task_searchLine+0x15c>
 8001e64:	2101      	movs	r1, #1
 8001e66:	2001      	movs	r0, #1
 8001e68:	f7ff fab8 	bl	80013dc <moveRoboboy>
        		reset_encoder_counters();
 8001e6c:	f7ff fe3c 	bl	8001ae8 <reset_encoder_counters>
        		search_state = SEARCH_INIT;
 8001e70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea4 <task_searchLine+0x158>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	701a      	strb	r2, [r3, #0]
                course_state = OVERCOME_GAP;
 8001e76:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <task_searchLine+0x164>)
 8001e78:	2203      	movs	r2, #3
 8001e7a:	701a      	strb	r2, [r3, #0]
        	}
            break;
 8001e7c:	e00e      	b.n	8001e9c <task_searchLine+0x150>
        case SEARCH_DONE:
            course_state = FOLLOW_LINE;
 8001e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb0 <task_searchLine+0x164>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
            reset_encoder_counters();
 8001e84:	f7ff fe30 	bl	8001ae8 <reset_encoder_counters>
            search_state = SEARCH_INIT;
 8001e88:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <task_searchLine+0x158>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
            break;
 8001e8e:	e006      	b.n	8001e9e <task_searchLine+0x152>
            break;
 8001e90:	bf00      	nop
 8001e92:	e004      	b.n	8001e9e <task_searchLine+0x152>
            break;
 8001e94:	bf00      	nop
 8001e96:	e002      	b.n	8001e9e <task_searchLine+0x152>
            break;
 8001e98:	bf00      	nop
 8001e9a:	e000      	b.n	8001e9e <task_searchLine+0x152>
            break;
 8001e9c:	bf00      	nop
    }
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	200001fe 	.word	0x200001fe
 8001ea8:	00000000 	.word	0x00000000
 8001eac:	42c80000 	.word	0x42c80000
 8001eb0:	200001fd 	.word	0x200001fd

08001eb4 <task_avoidObstacle>:
 * The robot first drives backward, turns, then bypasses the obstacle
 * using a sequence of trajectory steps.
 * Each step is executed cooperatively via driveMMStraightCooperative() and spinDegreesCooperative().
 */

void task_avoidObstacle() {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
	switch(avoidObstacleState) {
 8001eb8:	4b4e      	ldr	r3, [pc, #312]	@ (8001ff4 <task_avoidObstacle+0x140>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b07      	cmp	r3, #7
 8001ebe:	f200 8083 	bhi.w	8001fc8 <task_avoidObstacle+0x114>
 8001ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ec8 <task_avoidObstacle+0x14>)
 8001ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec8:	08001ee9 	.word	0x08001ee9
 8001ecc:	08001f05 	.word	0x08001f05
 8001ed0:	08001f21 	.word	0x08001f21
 8001ed4:	08001f3d 	.word	0x08001f3d
 8001ed8:	08001f59 	.word	0x08001f59
 8001edc:	08001f75 	.word	0x08001f75
 8001ee0:	08001f91 	.word	0x08001f91
 8001ee4:	08001fad 	.word	0x08001fad
		case 0:
			if (driveMMStraightCooperative(0, 50)) {
 8001ee8:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8001ff8 <task_avoidObstacle+0x144>
 8001eec:	2000      	movs	r0, #0
 8001eee:	f7ff fb69 	bl	80015c4 <driveMMStraightCooperative>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d06b      	beq.n	8001fd0 <task_avoidObstacle+0x11c>
				avoidObstacleState++;
 8001ef8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ff4 <task_avoidObstacle+0x140>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	3301      	adds	r3, #1
 8001efe:	4a3d      	ldr	r2, [pc, #244]	@ (8001ff4 <task_avoidObstacle+0x140>)
 8001f00:	6013      	str	r3, [r2, #0]
			}
			break;
 8001f02:	e065      	b.n	8001fd0 <task_avoidObstacle+0x11c>
		case 1:
			if (spinDegreesCooperative(RIGHT, 90)) {
 8001f04:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 8001ffc <task_avoidObstacle+0x148>
 8001f08:	2001      	movs	r0, #1
 8001f0a:	f7ff fbb9 	bl	8001680 <spinDegreesCooperative>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d05f      	beq.n	8001fd4 <task_avoidObstacle+0x120>
				avoidObstacleState++;
 8001f14:	4b37      	ldr	r3, [pc, #220]	@ (8001ff4 <task_avoidObstacle+0x140>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	4a36      	ldr	r2, [pc, #216]	@ (8001ff4 <task_avoidObstacle+0x140>)
 8001f1c:	6013      	str	r3, [r2, #0]
			}
			break;
 8001f1e:	e059      	b.n	8001fd4 <task_avoidObstacle+0x120>
		case 2:
			if (driveMMStraightCooperative(1, 150)) {
 8001f20:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8002000 <task_avoidObstacle+0x14c>
 8001f24:	2001      	movs	r0, #1
 8001f26:	f7ff fb4d 	bl	80015c4 <driveMMStraightCooperative>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d053      	beq.n	8001fd8 <task_avoidObstacle+0x124>
			    avoidObstacleState++;
 8001f30:	4b30      	ldr	r3, [pc, #192]	@ (8001ff4 <task_avoidObstacle+0x140>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	3301      	adds	r3, #1
 8001f36:	4a2f      	ldr	r2, [pc, #188]	@ (8001ff4 <task_avoidObstacle+0x140>)
 8001f38:	6013      	str	r3, [r2, #0]
			}
			break;
 8001f3a:	e04d      	b.n	8001fd8 <task_avoidObstacle+0x124>
		case 3:
			if (spinDegreesCooperative(LEFT, 90)) {
 8001f3c:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 8001ffc <task_avoidObstacle+0x148>
 8001f40:	2000      	movs	r0, #0
 8001f42:	f7ff fb9d 	bl	8001680 <spinDegreesCooperative>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d047      	beq.n	8001fdc <task_avoidObstacle+0x128>
				avoidObstacleState++;
 8001f4c:	4b29      	ldr	r3, [pc, #164]	@ (8001ff4 <task_avoidObstacle+0x140>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	3301      	adds	r3, #1
 8001f52:	4a28      	ldr	r2, [pc, #160]	@ (8001ff4 <task_avoidObstacle+0x140>)
 8001f54:	6013      	str	r3, [r2, #0]
			}
			break;
 8001f56:	e041      	b.n	8001fdc <task_avoidObstacle+0x128>
		case 4:
			if (driveMMStraightCooperative(1, 200)) {
 8001f58:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8002004 <task_avoidObstacle+0x150>
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	f7ff fb31 	bl	80015c4 <driveMMStraightCooperative>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d03b      	beq.n	8001fe0 <task_avoidObstacle+0x12c>
				avoidObstacleState++;
 8001f68:	4b22      	ldr	r3, [pc, #136]	@ (8001ff4 <task_avoidObstacle+0x140>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	4a21      	ldr	r2, [pc, #132]	@ (8001ff4 <task_avoidObstacle+0x140>)
 8001f70:	6013      	str	r3, [r2, #0]
			}
			break;
 8001f72:	e035      	b.n	8001fe0 <task_avoidObstacle+0x12c>
		case 5:
			if (spinDegreesCooperative(LEFT, 90)) {
 8001f74:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8001ffc <task_avoidObstacle+0x148>
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f7ff fb81 	bl	8001680 <spinDegreesCooperative>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d02f      	beq.n	8001fe4 <task_avoidObstacle+0x130>
				avoidObstacleState++;
 8001f84:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff4 <task_avoidObstacle+0x140>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ff4 <task_avoidObstacle+0x140>)
 8001f8c:	6013      	str	r3, [r2, #0]
			}
			break;
 8001f8e:	e029      	b.n	8001fe4 <task_avoidObstacle+0x130>
		case 6:
			if (driveMMStraightCooperative(1, 150)) {
 8001f90:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8002000 <task_avoidObstacle+0x14c>
 8001f94:	2001      	movs	r0, #1
 8001f96:	f7ff fb15 	bl	80015c4 <driveMMStraightCooperative>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d023      	beq.n	8001fe8 <task_avoidObstacle+0x134>
				avoidObstacleState++;
 8001fa0:	4b14      	ldr	r3, [pc, #80]	@ (8001ff4 <task_avoidObstacle+0x140>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	4a13      	ldr	r2, [pc, #76]	@ (8001ff4 <task_avoidObstacle+0x140>)
 8001fa8:	6013      	str	r3, [r2, #0]
			}
			break;
 8001faa:	e01d      	b.n	8001fe8 <task_avoidObstacle+0x134>
		case 7:
			if (spinDegreesCooperative(RIGHT, 90)) {
 8001fac:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8001ffc <task_avoidObstacle+0x148>
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	f7ff fb65 	bl	8001680 <spinDegreesCooperative>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d017      	beq.n	8001fec <task_avoidObstacle+0x138>
				avoidObstacleState++;
 8001fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff4 <task_avoidObstacle+0x140>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	4a0c      	ldr	r2, [pc, #48]	@ (8001ff4 <task_avoidObstacle+0x140>)
 8001fc4:	6013      	str	r3, [r2, #0]
			}
			break;
 8001fc6:	e011      	b.n	8001fec <task_avoidObstacle+0x138>
		default:
			course_state = FOLLOW_LINE;
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <task_avoidObstacle+0x154>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	701a      	strb	r2, [r3, #0]
	}
}
 8001fce:	e00e      	b.n	8001fee <task_avoidObstacle+0x13a>
			break;
 8001fd0:	bf00      	nop
 8001fd2:	e00c      	b.n	8001fee <task_avoidObstacle+0x13a>
			break;
 8001fd4:	bf00      	nop
 8001fd6:	e00a      	b.n	8001fee <task_avoidObstacle+0x13a>
			break;
 8001fd8:	bf00      	nop
 8001fda:	e008      	b.n	8001fee <task_avoidObstacle+0x13a>
			break;
 8001fdc:	bf00      	nop
 8001fde:	e006      	b.n	8001fee <task_avoidObstacle+0x13a>
			break;
 8001fe0:	bf00      	nop
 8001fe2:	e004      	b.n	8001fee <task_avoidObstacle+0x13a>
			break;
 8001fe4:	bf00      	nop
 8001fe6:	e002      	b.n	8001fee <task_avoidObstacle+0x13a>
			break;
 8001fe8:	bf00      	nop
 8001fea:	e000      	b.n	8001fee <task_avoidObstacle+0x13a>
			break;
 8001fec:	bf00      	nop
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000200 	.word	0x20000200
 8001ff8:	42480000 	.word	0x42480000
 8001ffc:	42b40000 	.word	0x42b40000
 8002000:	43160000 	.word	0x43160000
 8002004:	43480000 	.word	0x43480000
 8002008:	200001fd 	.word	0x200001fd

0800200c <task_overcomeGap>:
 * @brief Handles the case when the robot lost the line due to a gap.
 *
 * Continues driving straight while checking for the line.
 * Once the line is detected again, switches back to FOLLOW_LINE state.
 */
void task_overcomeGap() {
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
	if (line_detected()) {
 8002010:	f7ff fd7c 	bl	8001b0c <line_detected>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <task_overcomeGap+0x16>
		course_state = FOLLOW_LINE;
 800201a:	4b05      	ldr	r3, [pc, #20]	@ (8002030 <task_overcomeGap+0x24>)
 800201c:	2201      	movs	r2, #1
 800201e:	701a      	strb	r2, [r3, #0]
	} else {
		driveMMStraightCooperative(1, 100);
	}
}
 8002020:	e004      	b.n	800202c <task_overcomeGap+0x20>
		driveMMStraightCooperative(1, 100);
 8002022:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8002034 <task_overcomeGap+0x28>
 8002026:	2001      	movs	r0, #1
 8002028:	f7ff facc 	bl	80015c4 <driveMMStraightCooperative>
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	200001fd 	.word	0x200001fd
 8002034:	42c80000 	.word	0x42c80000

08002038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800203c:	b672      	cpsid	i
}
 800203e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <Error_Handler+0x8>

08002044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204a:	4b0f      	ldr	r3, [pc, #60]	@ (8002088 <HAL_MspInit+0x44>)
 800204c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800204e:	4a0e      	ldr	r2, [pc, #56]	@ (8002088 <HAL_MspInit+0x44>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6613      	str	r3, [r2, #96]	@ 0x60
 8002056:	4b0c      	ldr	r3, [pc, #48]	@ (8002088 <HAL_MspInit+0x44>)
 8002058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	4b09      	ldr	r3, [pc, #36]	@ (8002088 <HAL_MspInit+0x44>)
 8002064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002066:	4a08      	ldr	r2, [pc, #32]	@ (8002088 <HAL_MspInit+0x44>)
 8002068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800206c:	6593      	str	r3, [r2, #88]	@ 0x58
 800206e:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <HAL_MspInit+0x44>)
 8002070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000

0800208c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002090:	bf00      	nop
 8002092:	e7fd      	b.n	8002090 <NMI_Handler+0x4>

08002094 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <HardFault_Handler+0x4>

0800209c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <MemManage_Handler+0x4>

080020a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a8:	bf00      	nop
 80020aa:	e7fd      	b.n	80020a8 <BusFault_Handler+0x4>

080020ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <UsageFault_Handler+0x4>

080020b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020e2:	f000 fa7d 	bl	80025e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020f0:	4802      	ldr	r0, [pc, #8]	@ (80020fc <DMA1_Channel1_IRQHandler+0x10>)
 80020f2:	f001 fd5d 	bl	8003bb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000110 	.word	0x20000110

08002100 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002108:	4a14      	ldr	r2, [pc, #80]	@ (800215c <_sbrk+0x5c>)
 800210a:	4b15      	ldr	r3, [pc, #84]	@ (8002160 <_sbrk+0x60>)
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002114:	4b13      	ldr	r3, [pc, #76]	@ (8002164 <_sbrk+0x64>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d102      	bne.n	8002122 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800211c:	4b11      	ldr	r3, [pc, #68]	@ (8002164 <_sbrk+0x64>)
 800211e:	4a12      	ldr	r2, [pc, #72]	@ (8002168 <_sbrk+0x68>)
 8002120:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002122:	4b10      	ldr	r3, [pc, #64]	@ (8002164 <_sbrk+0x64>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	429a      	cmp	r2, r3
 800212e:	d207      	bcs.n	8002140 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002130:	f004 fe64 	bl	8006dfc <__errno>
 8002134:	4603      	mov	r3, r0
 8002136:	220c      	movs	r2, #12
 8002138:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
 800213e:	e009      	b.n	8002154 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002140:	4b08      	ldr	r3, [pc, #32]	@ (8002164 <_sbrk+0x64>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002146:	4b07      	ldr	r3, [pc, #28]	@ (8002164 <_sbrk+0x64>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	4a05      	ldr	r2, [pc, #20]	@ (8002164 <_sbrk+0x64>)
 8002150:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002152:	68fb      	ldr	r3, [r7, #12]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	2000c000 	.word	0x2000c000
 8002160:	00000400 	.word	0x00000400
 8002164:	2000020c 	.word	0x2000020c
 8002168:	20000430 	.word	0x20000430

0800216c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002170:	4b06      	ldr	r3, [pc, #24]	@ (800218c <SystemInit+0x20>)
 8002172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002176:	4a05      	ldr	r2, [pc, #20]	@ (800218c <SystemInit+0x20>)
 8002178:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800217c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b09a      	sub	sp, #104	@ 0x68
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002196:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
 80021c0:	615a      	str	r2, [r3, #20]
 80021c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	222c      	movs	r2, #44	@ 0x2c
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f004 fe0e 	bl	8006dec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021d0:	4b49      	ldr	r3, [pc, #292]	@ (80022f8 <MX_TIM1_Init+0x168>)
 80021d2:	4a4a      	ldr	r2, [pc, #296]	@ (80022fc <MX_TIM1_Init+0x16c>)
 80021d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80021d6:	4b48      	ldr	r3, [pc, #288]	@ (80022f8 <MX_TIM1_Init+0x168>)
 80021d8:	2200      	movs	r2, #0
 80021da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021dc:	4b46      	ldr	r3, [pc, #280]	@ (80022f8 <MX_TIM1_Init+0x168>)
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80021e2:	4b45      	ldr	r3, [pc, #276]	@ (80022f8 <MX_TIM1_Init+0x168>)
 80021e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ea:	4b43      	ldr	r3, [pc, #268]	@ (80022f8 <MX_TIM1_Init+0x168>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021f0:	4b41      	ldr	r3, [pc, #260]	@ (80022f8 <MX_TIM1_Init+0x168>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021f6:	4b40      	ldr	r3, [pc, #256]	@ (80022f8 <MX_TIM1_Init+0x168>)
 80021f8:	2280      	movs	r2, #128	@ 0x80
 80021fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021fc:	483e      	ldr	r0, [pc, #248]	@ (80022f8 <MX_TIM1_Init+0x168>)
 80021fe:	f003 f8f5 	bl	80053ec <HAL_TIM_Base_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002208:	f7ff ff16 	bl	8002038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800220c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002210:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002212:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002216:	4619      	mov	r1, r3
 8002218:	4837      	ldr	r0, [pc, #220]	@ (80022f8 <MX_TIM1_Init+0x168>)
 800221a:	f003 fab3 	bl	8005784 <HAL_TIM_ConfigClockSource>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002224:	f7ff ff08 	bl	8002038 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002228:	4833      	ldr	r0, [pc, #204]	@ (80022f8 <MX_TIM1_Init+0x168>)
 800222a:	f003 f936 	bl	800549a <HAL_TIM_PWM_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002234:	f7ff ff00 	bl	8002038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002238:	2300      	movs	r3, #0
 800223a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800223c:	2300      	movs	r3, #0
 800223e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002240:	2300      	movs	r3, #0
 8002242:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002244:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002248:	4619      	mov	r1, r3
 800224a:	482b      	ldr	r0, [pc, #172]	@ (80022f8 <MX_TIM1_Init+0x168>)
 800224c:	f003 ff8a 	bl	8006164 <HAL_TIMEx_MasterConfigSynchronization>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002256:	f7ff feef 	bl	8002038 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800225a:	2360      	movs	r3, #96	@ 0x60
 800225c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002262:	2300      	movs	r3, #0
 8002264:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002266:	2300      	movs	r3, #0
 8002268:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800226a:	2300      	movs	r3, #0
 800226c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800226e:	2300      	movs	r3, #0
 8002270:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002272:	2300      	movs	r3, #0
 8002274:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002276:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800227a:	2204      	movs	r2, #4
 800227c:	4619      	mov	r1, r3
 800227e:	481e      	ldr	r0, [pc, #120]	@ (80022f8 <MX_TIM1_Init+0x168>)
 8002280:	f003 f96c 	bl	800555c <HAL_TIM_PWM_ConfigChannel>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800228a:	f7ff fed5 	bl	8002038 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800228e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002292:	2208      	movs	r2, #8
 8002294:	4619      	mov	r1, r3
 8002296:	4818      	ldr	r0, [pc, #96]	@ (80022f8 <MX_TIM1_Init+0x168>)
 8002298:	f003 f960 	bl	800555c <HAL_TIM_PWM_ConfigChannel>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80022a2:	f7ff fec9 	bl	8002038 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022a6:	2300      	movs	r3, #0
 80022a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80022c4:	2300      	movs	r3, #0
 80022c6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80022c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022d2:	2300      	movs	r3, #0
 80022d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	4619      	mov	r1, r3
 80022da:	4807      	ldr	r0, [pc, #28]	@ (80022f8 <MX_TIM1_Init+0x168>)
 80022dc:	f003 ffa8 	bl	8006230 <HAL_TIMEx_ConfigBreakDeadTime>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80022e6:	f7ff fea7 	bl	8002038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80022ea:	4803      	ldr	r0, [pc, #12]	@ (80022f8 <MX_TIM1_Init+0x168>)
 80022ec:	f000 f828 	bl	8002340 <HAL_TIM_MspPostInit>

}
 80022f0:	bf00      	nop
 80022f2:	3768      	adds	r7, #104	@ 0x68
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000210 	.word	0x20000210
 80022fc:	40012c00 	.word	0x40012c00

08002300 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0a      	ldr	r2, [pc, #40]	@ (8002338 <HAL_TIM_Base_MspInit+0x38>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d10b      	bne.n	800232a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002312:	4b0a      	ldr	r3, [pc, #40]	@ (800233c <HAL_TIM_Base_MspInit+0x3c>)
 8002314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002316:	4a09      	ldr	r2, [pc, #36]	@ (800233c <HAL_TIM_Base_MspInit+0x3c>)
 8002318:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800231c:	6613      	str	r3, [r2, #96]	@ 0x60
 800231e:	4b07      	ldr	r3, [pc, #28]	@ (800233c <HAL_TIM_Base_MspInit+0x3c>)
 8002320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002322:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40012c00 	.word	0x40012c00
 800233c:	40021000 	.word	0x40021000

08002340 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 030c 	add.w	r3, r7, #12
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a11      	ldr	r2, [pc, #68]	@ (80023a4 <HAL_TIM_MspPostInit+0x64>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d11b      	bne.n	800239a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002362:	4b11      	ldr	r3, [pc, #68]	@ (80023a8 <HAL_TIM_MspPostInit+0x68>)
 8002364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002366:	4a10      	ldr	r2, [pc, #64]	@ (80023a8 <HAL_TIM_MspPostInit+0x68>)
 8002368:	f043 0302 	orr.w	r3, r3, #2
 800236c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800236e:	4b0e      	ldr	r3, [pc, #56]	@ (80023a8 <HAL_TIM_MspPostInit+0x68>)
 8002370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = Phase1_L_CH2N_Pin|Phase1_R_CH3N_Pin;
 800237a:	2303      	movs	r3, #3
 800237c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2300      	movs	r3, #0
 8002388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800238a:	2301      	movs	r3, #1
 800238c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800238e:	f107 030c 	add.w	r3, r7, #12
 8002392:	4619      	mov	r1, r3
 8002394:	4805      	ldr	r0, [pc, #20]	@ (80023ac <HAL_TIM_MspPostInit+0x6c>)
 8002396:	f001 fceb 	bl	8003d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800239a:	bf00      	nop
 800239c:	3720      	adds	r7, #32
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40012c00 	.word	0x40012c00
 80023a8:	40021000 	.word	0x40021000
 80023ac:	48000400 	.word	0x48000400

080023b0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023b4:	4b14      	ldr	r3, [pc, #80]	@ (8002408 <MX_USART2_UART_Init+0x58>)
 80023b6:	4a15      	ldr	r2, [pc, #84]	@ (800240c <MX_USART2_UART_Init+0x5c>)
 80023b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023ba:	4b13      	ldr	r3, [pc, #76]	@ (8002408 <MX_USART2_UART_Init+0x58>)
 80023bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023c2:	4b11      	ldr	r3, [pc, #68]	@ (8002408 <MX_USART2_UART_Init+0x58>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002408 <MX_USART2_UART_Init+0x58>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002408 <MX_USART2_UART_Init+0x58>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002408 <MX_USART2_UART_Init+0x58>)
 80023d6:	220c      	movs	r2, #12
 80023d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023da:	4b0b      	ldr	r3, [pc, #44]	@ (8002408 <MX_USART2_UART_Init+0x58>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023e0:	4b09      	ldr	r3, [pc, #36]	@ (8002408 <MX_USART2_UART_Init+0x58>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023e6:	4b08      	ldr	r3, [pc, #32]	@ (8002408 <MX_USART2_UART_Init+0x58>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023ec:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <MX_USART2_UART_Init+0x58>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023f2:	4805      	ldr	r0, [pc, #20]	@ (8002408 <MX_USART2_UART_Init+0x58>)
 80023f4:	f003 ffb9 	bl	800636a <HAL_UART_Init>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80023fe:	f7ff fe1b 	bl	8002038 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	2000025c 	.word	0x2000025c
 800240c:	40004400 	.word	0x40004400

08002410 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b09e      	sub	sp, #120	@ 0x78
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002418:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	60da      	str	r2, [r3, #12]
 8002426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002428:	f107 0310 	add.w	r3, r7, #16
 800242c:	2254      	movs	r2, #84	@ 0x54
 800242e:	2100      	movs	r1, #0
 8002430:	4618      	mov	r0, r3
 8002432:	f004 fcdb 	bl	8006dec <memset>
  if(uartHandle->Instance==USART2)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a28      	ldr	r2, [pc, #160]	@ (80024dc <HAL_UART_MspInit+0xcc>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d148      	bne.n	80024d2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002440:	2302      	movs	r3, #2
 8002442:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002444:	2300      	movs	r3, #0
 8002446:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002448:	f107 0310 	add.w	r3, r7, #16
 800244c:	4618      	mov	r0, r3
 800244e:	f002 fcd5 	bl	8004dfc <HAL_RCCEx_PeriphCLKConfig>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002458:	f7ff fdee 	bl	8002038 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800245c:	4b20      	ldr	r3, [pc, #128]	@ (80024e0 <HAL_UART_MspInit+0xd0>)
 800245e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002460:	4a1f      	ldr	r2, [pc, #124]	@ (80024e0 <HAL_UART_MspInit+0xd0>)
 8002462:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002466:	6593      	str	r3, [r2, #88]	@ 0x58
 8002468:	4b1d      	ldr	r3, [pc, #116]	@ (80024e0 <HAL_UART_MspInit+0xd0>)
 800246a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002474:	4b1a      	ldr	r3, [pc, #104]	@ (80024e0 <HAL_UART_MspInit+0xd0>)
 8002476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002478:	4a19      	ldr	r2, [pc, #100]	@ (80024e0 <HAL_UART_MspInit+0xd0>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002480:	4b17      	ldr	r3, [pc, #92]	@ (80024e0 <HAL_UART_MspInit+0xd0>)
 8002482:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800248c:	2304      	movs	r3, #4
 800248e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002498:	2303      	movs	r3, #3
 800249a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800249c:	2307      	movs	r3, #7
 800249e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80024a0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80024a4:	4619      	mov	r1, r3
 80024a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024aa:	f001 fc61 	bl	8003d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80024ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024b2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b4:	2302      	movs	r3, #2
 80024b6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024bc:	2303      	movs	r3, #3
 80024be:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80024c0:	2303      	movs	r3, #3
 80024c2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80024c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80024c8:	4619      	mov	r1, r3
 80024ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024ce:	f001 fc4f 	bl	8003d70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80024d2:	bf00      	nop
 80024d4:	3778      	adds	r7, #120	@ 0x78
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40004400 	.word	0x40004400
 80024e0:	40021000 	.word	0x40021000

080024e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80024e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800251c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024e8:	f7ff fe40 	bl	800216c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024ec:	480c      	ldr	r0, [pc, #48]	@ (8002520 <LoopForever+0x6>)
  ldr r1, =_edata
 80024ee:	490d      	ldr	r1, [pc, #52]	@ (8002524 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002528 <LoopForever+0xe>)
  movs r3, #0
 80024f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024f4:	e002      	b.n	80024fc <LoopCopyDataInit>

080024f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024fa:	3304      	adds	r3, #4

080024fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002500:	d3f9      	bcc.n	80024f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002502:	4a0a      	ldr	r2, [pc, #40]	@ (800252c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002504:	4c0a      	ldr	r4, [pc, #40]	@ (8002530 <LoopForever+0x16>)
  movs r3, #0
 8002506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002508:	e001      	b.n	800250e <LoopFillZerobss>

0800250a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800250a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800250c:	3204      	adds	r2, #4

0800250e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800250e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002510:	d3fb      	bcc.n	800250a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002512:	f004 fc79 	bl	8006e08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002516:	f7fe fe0f 	bl	8001138 <main>

0800251a <LoopForever>:

LoopForever:
    b LoopForever
 800251a:	e7fe      	b.n	800251a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800251c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8002520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002524:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002528:	080077c0 	.word	0x080077c0
  ldr r2, =_sbss
 800252c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002530:	20000430 	.word	0x20000430

08002534 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002534:	e7fe      	b.n	8002534 <ADC1_IRQHandler>

08002536 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002540:	2003      	movs	r0, #3
 8002542:	f001 f9db 	bl	80038fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002546:	2000      	movs	r0, #0
 8002548:	f000 f80e 	bl	8002568 <HAL_InitTick>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	71fb      	strb	r3, [r7, #7]
 8002556:	e001      	b.n	800255c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002558:	f7ff fd74 	bl	8002044 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800255c:	79fb      	ldrb	r3, [r7, #7]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002574:	4b17      	ldr	r3, [pc, #92]	@ (80025d4 <HAL_InitTick+0x6c>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d023      	beq.n	80025c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800257c:	4b16      	ldr	r3, [pc, #88]	@ (80025d8 <HAL_InitTick+0x70>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b14      	ldr	r3, [pc, #80]	@ (80025d4 <HAL_InitTick+0x6c>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	4619      	mov	r1, r3
 8002586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800258a:	fbb3 f3f1 	udiv	r3, r3, r1
 800258e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002592:	4618      	mov	r0, r3
 8002594:	f001 f9e7 	bl	8003966 <HAL_SYSTICK_Config>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10f      	bne.n	80025be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b0f      	cmp	r3, #15
 80025a2:	d809      	bhi.n	80025b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a4:	2200      	movs	r2, #0
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ac:	f001 f9b1 	bl	8003912 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025b0:	4a0a      	ldr	r2, [pc, #40]	@ (80025dc <HAL_InitTick+0x74>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e007      	b.n	80025c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
 80025bc:	e004      	b.n	80025c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
 80025c2:	e001      	b.n	80025c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	2000003c 	.word	0x2000003c
 80025d8:	20000034 	.word	0x20000034
 80025dc:	20000038 	.word	0x20000038

080025e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025e4:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <HAL_IncTick+0x20>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	4b06      	ldr	r3, [pc, #24]	@ (8002604 <HAL_IncTick+0x24>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4413      	add	r3, r2
 80025f0:	4a04      	ldr	r2, [pc, #16]	@ (8002604 <HAL_IncTick+0x24>)
 80025f2:	6013      	str	r3, [r2, #0]
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	2000003c 	.word	0x2000003c
 8002604:	200002e4 	.word	0x200002e4

08002608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return uwTick;
 800260c:	4b03      	ldr	r3, [pc, #12]	@ (800261c <HAL_GetTick+0x14>)
 800260e:	681b      	ldr	r3, [r3, #0]
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	200002e4 	.word	0x200002e4

08002620 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	609a      	str	r2, [r3, #8]
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	609a      	str	r2, [r3, #8]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002688:	b480      	push	{r7}
 800268a:	b087      	sub	sp, #28
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
 8002694:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	3360      	adds	r3, #96	@ 0x60
 800269a:	461a      	mov	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4b08      	ldr	r3, [pc, #32]	@ (80026cc <LL_ADC_SetOffset+0x44>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80026c0:	bf00      	nop
 80026c2:	371c      	adds	r7, #28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	03fff000 	.word	0x03fff000

080026d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3360      	adds	r3, #96	@ 0x60
 80026de:	461a      	mov	r2, r3
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	3360      	adds	r3, #96	@ 0x60
 800270c:	461a      	mov	r2, r3
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	431a      	orrs	r2, r3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002726:	bf00      	nop
 8002728:	371c      	adds	r7, #28
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	3330      	adds	r3, #48	@ 0x30
 8002768:	461a      	mov	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	0a1b      	lsrs	r3, r3, #8
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	f003 030c 	and.w	r3, r3, #12
 8002774:	4413      	add	r3, r2
 8002776:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f003 031f 	and.w	r3, r3, #31
 8002782:	211f      	movs	r1, #31
 8002784:	fa01 f303 	lsl.w	r3, r1, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	401a      	ands	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	0e9b      	lsrs	r3, r3, #26
 8002790:	f003 011f 	and.w	r1, r3, #31
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	fa01 f303 	lsl.w	r3, r1, r3
 800279e:	431a      	orrs	r2, r3
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80027a4:	bf00      	nop
 80027a6:	371c      	adds	r7, #28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	3314      	adds	r3, #20
 80027c0:	461a      	mov	r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	0e5b      	lsrs	r3, r3, #25
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	4413      	add	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	0d1b      	lsrs	r3, r3, #20
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	2107      	movs	r1, #7
 80027de:	fa01 f303 	lsl.w	r3, r1, r3
 80027e2:	43db      	mvns	r3, r3
 80027e4:	401a      	ands	r2, r3
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	0d1b      	lsrs	r3, r3, #20
 80027ea:	f003 031f 	and.w	r3, r3, #31
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	fa01 f303 	lsl.w	r3, r1, r3
 80027f4:	431a      	orrs	r2, r3
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80027fa:	bf00      	nop
 80027fc:	371c      	adds	r7, #28
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002820:	43db      	mvns	r3, r3
 8002822:	401a      	ands	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f003 0318 	and.w	r3, r3, #24
 800282a:	4908      	ldr	r1, [pc, #32]	@ (800284c <LL_ADC_SetChannelSingleDiff+0x44>)
 800282c:	40d9      	lsrs	r1, r3
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	400b      	ands	r3, r1
 8002832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002836:	431a      	orrs	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800283e:	bf00      	nop
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	0007ffff 	.word	0x0007ffff

08002850 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002860:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6093      	str	r3, [r2, #8]
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002884:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002888:	d101      	bne.n	800288e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80028ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028b0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028d8:	d101      	bne.n	80028de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002900:	f043 0201 	orr.w	r2, r3, #1
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <LL_ADC_IsEnabled+0x18>
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <LL_ADC_IsEnabled+0x1a>
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800294a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800294e:	f043 0204 	orr.w	r2, r3, #4
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b04      	cmp	r3, #4
 8002974:	d101      	bne.n	800297a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b08      	cmp	r3, #8
 800299a:	d101      	bne.n	80029a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e126      	b.n	8002c18 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d109      	bne.n	80029ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7fe fa8b 	bl	8000ef4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff3f 	bl	8002874 <LL_ADC_IsDeepPowerDownEnabled>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d004      	beq.n	8002a06 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff25 	bl	8002850 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff ff5a 	bl	80028c4 <LL_ADC_IsInternalRegulatorEnabled>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d115      	bne.n	8002a42 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff ff3e 	bl	800289c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a20:	4b7f      	ldr	r3, [pc, #508]	@ (8002c20 <HAL_ADC_Init+0x270>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	099b      	lsrs	r3, r3, #6
 8002a26:	4a7f      	ldr	r2, [pc, #508]	@ (8002c24 <HAL_ADC_Init+0x274>)
 8002a28:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2c:	099b      	lsrs	r3, r3, #6
 8002a2e:	3301      	adds	r3, #1
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a34:	e002      	b.n	8002a3c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f9      	bne.n	8002a36 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff ff3c 	bl	80028c4 <LL_ADC_IsInternalRegulatorEnabled>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10d      	bne.n	8002a6e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a56:	f043 0210 	orr.w	r2, r3, #16
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a62:	f043 0201 	orr.w	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff ff75 	bl	8002962 <LL_ADC_REG_IsConversionOngoing>
 8002a78:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a7e:	f003 0310 	and.w	r3, r3, #16
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f040 80bf 	bne.w	8002c06 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f040 80bb 	bne.w	8002c06 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a94:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a98:	f043 0202 	orr.w	r2, r3, #2
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff ff35 	bl	8002914 <LL_ADC_IsEnabled>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10b      	bne.n	8002ac8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ab0:	485d      	ldr	r0, [pc, #372]	@ (8002c28 <HAL_ADC_Init+0x278>)
 8002ab2:	f7ff ff2f 	bl	8002914 <LL_ADC_IsEnabled>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d105      	bne.n	8002ac8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	485a      	ldr	r0, [pc, #360]	@ (8002c2c <HAL_ADC_Init+0x27c>)
 8002ac4:	f7ff fdac 	bl	8002620 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	7e5b      	ldrb	r3, [r3, #25]
 8002acc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ad2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002ad8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002ade:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ae6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d106      	bne.n	8002b04 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afa:	3b01      	subs	r3, #1
 8002afc:	045b      	lsls	r3, r3, #17
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d009      	beq.n	8002b20 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b10:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b18:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	4b42      	ldr	r3, [pc, #264]	@ (8002c30 <HAL_ADC_Init+0x280>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	69b9      	ldr	r1, [r7, #24]
 8002b30:	430b      	orrs	r3, r1
 8002b32:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ff25 	bl	8002988 <LL_ADC_INJ_IsConversionOngoing>
 8002b3e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d13d      	bne.n	8002bc2 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d13a      	bne.n	8002bc2 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b50:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b58:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b68:	f023 0302 	bic.w	r3, r3, #2
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	69b9      	ldr	r1, [r7, #24]
 8002b72:	430b      	orrs	r3, r1
 8002b74:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d118      	bne.n	8002bb2 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002b8a:	f023 0304 	bic.w	r3, r3, #4
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b96:	4311      	orrs	r1, r2
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002b9c:	4311      	orrs	r1, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	611a      	str	r2, [r3, #16]
 8002bb0:	e007      	b.n	8002bc2 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0201 	bic.w	r2, r2, #1
 8002bc0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d10c      	bne.n	8002be4 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd0:	f023 010f 	bic.w	r1, r3, #15
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	1e5a      	subs	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002be2:	e007      	b.n	8002bf4 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 020f 	bic.w	r2, r2, #15
 8002bf2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf8:	f023 0303 	bic.w	r3, r3, #3
 8002bfc:	f043 0201 	orr.w	r2, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	655a      	str	r2, [r3, #84]	@ 0x54
 8002c04:	e007      	b.n	8002c16 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0a:	f043 0210 	orr.w	r2, r3, #16
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c16:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3720      	adds	r7, #32
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20000034 	.word	0x20000034
 8002c24:	053e2d63 	.word	0x053e2d63
 8002c28:	50040000 	.word	0x50040000
 8002c2c:	50040300 	.word	0x50040300
 8002c30:	fff0c007 	.word	0xfff0c007

08002c34 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff fe8c 	bl	8002962 <LL_ADC_REG_IsConversionOngoing>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d167      	bne.n	8002d20 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <HAL_ADC_Start_DMA+0x2a>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e063      	b.n	8002d26 <HAL_ADC_Start_DMA+0xf2>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 fc5e 	bl	8003528 <ADC_Enable>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002c70:	7dfb      	ldrb	r3, [r7, #23]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d14f      	bne.n	8002d16 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c7a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c7e:	f023 0301 	bic.w	r3, r3, #1
 8002c82:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d006      	beq.n	8002ca4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9a:	f023 0206 	bic.w	r2, r3, #6
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ca2:	e002      	b.n	8002caa <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cae:	4a20      	ldr	r2, [pc, #128]	@ (8002d30 <HAL_ADC_Start_DMA+0xfc>)
 8002cb0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cb6:	4a1f      	ldr	r2, [pc, #124]	@ (8002d34 <HAL_ADC_Start_DMA+0x100>)
 8002cb8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8002d38 <HAL_ADC_Start_DMA+0x104>)
 8002cc0:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	221c      	movs	r2, #28
 8002cc8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0210 	orr.w	r2, r2, #16
 8002ce0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f042 0201 	orr.w	r2, r2, #1
 8002cf0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	3340      	adds	r3, #64	@ 0x40
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f000 fef5 	bl	8003af0 <HAL_DMA_Start_IT>
 8002d06:	4603      	mov	r3, r0
 8002d08:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff fe13 	bl	800293a <LL_ADC_REG_StartConversion>
 8002d14:	e006      	b.n	8002d24 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002d1e:	e001      	b.n	8002d24 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d20:	2302      	movs	r3, #2
 8002d22:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	08003635 	.word	0x08003635
 8002d34:	0800370d 	.word	0x0800370d
 8002d38:	08003729 	.word	0x08003729

08002d3c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b0b6      	sub	sp, #216	@ 0xd8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x22>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e3bb      	b.n	80034fe <HAL_ADC_ConfigChannel+0x79a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fde5 	bl	8002962 <LL_ADC_REG_IsConversionOngoing>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f040 83a0 	bne.w	80034e0 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b05      	cmp	r3, #5
 8002dae:	d824      	bhi.n	8002dfa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	3b02      	subs	r3, #2
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d81b      	bhi.n	8002df2 <HAL_ADC_ConfigChannel+0x8e>
 8002dba:	a201      	add	r2, pc, #4	@ (adr r2, 8002dc0 <HAL_ADC_ConfigChannel+0x5c>)
 8002dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc0:	08002dd1 	.word	0x08002dd1
 8002dc4:	08002dd9 	.word	0x08002dd9
 8002dc8:	08002de1 	.word	0x08002de1
 8002dcc:	08002de9 	.word	0x08002de9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002dd0:	230c      	movs	r3, #12
 8002dd2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002dd6:	e010      	b.n	8002dfa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002dd8:	2312      	movs	r3, #18
 8002dda:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002dde:	e00c      	b.n	8002dfa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002de0:	2318      	movs	r3, #24
 8002de2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002de6:	e008      	b.n	8002dfa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002de8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002dec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002df0:	e003      	b.n	8002dfa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002df2:	2306      	movs	r3, #6
 8002df4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002df8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002e08:	f7ff fca6 	bl	8002758 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff fda6 	bl	8002962 <LL_ADC_REG_IsConversionOngoing>
 8002e16:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff fdb2 	bl	8002988 <LL_ADC_INJ_IsConversionOngoing>
 8002e24:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f040 81a4 	bne.w	800317a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f040 819f 	bne.w	800317a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	6819      	ldr	r1, [r3, #0]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	f7ff fcb1 	bl	80027b0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	695a      	ldr	r2, [r3, #20]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	08db      	lsrs	r3, r3, #3
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d00a      	beq.n	8002e86 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6919      	ldr	r1, [r3, #16]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e80:	f7ff fc02 	bl	8002688 <LL_ADC_SetOffset>
 8002e84:	e179      	b.n	800317a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fc1f 	bl	80026d0 <LL_ADC_GetOffsetChannel>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10a      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x14e>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fc14 	bl	80026d0 <LL_ADC_GetOffsetChannel>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	0e9b      	lsrs	r3, r3, #26
 8002eac:	f003 021f 	and.w	r2, r3, #31
 8002eb0:	e01e      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x18c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fc09 	bl	80026d0 <LL_ADC_GetOffsetChannel>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ec8:	fa93 f3a3 	rbit	r3, r3
 8002ecc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ed0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ed8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002ee0:	2320      	movs	r3, #32
 8002ee2:	e004      	b.n	8002eee <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002ee4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ee8:	fab3 f383 	clz	r3, r3
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d105      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x1a4>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	0e9b      	lsrs	r3, r3, #26
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	e018      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x1d6>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f14:	fa93 f3a3 	rbit	r3, r3
 8002f18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002f1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002f24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002f2c:	2320      	movs	r3, #32
 8002f2e:	e004      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002f30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f34:	fab3 f383 	clz	r3, r3
 8002f38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d106      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2200      	movs	r2, #0
 8002f44:	2100      	movs	r1, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fbd8 	bl	80026fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2101      	movs	r1, #1
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fbbc 	bl	80026d0 <LL_ADC_GetOffsetChannel>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10a      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x214>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2101      	movs	r1, #1
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff fbb1 	bl	80026d0 <LL_ADC_GetOffsetChannel>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	0e9b      	lsrs	r3, r3, #26
 8002f72:	f003 021f 	and.w	r2, r3, #31
 8002f76:	e01e      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x252>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fba6 	bl	80026d0 <LL_ADC_GetOffsetChannel>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f8e:	fa93 f3a3 	rbit	r3, r3
 8002f92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002f96:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002f9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002fa6:	2320      	movs	r3, #32
 8002fa8:	e004      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002faa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002fae:	fab3 f383 	clz	r3, r3
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d105      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x26a>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	0e9b      	lsrs	r3, r3, #26
 8002fc8:	f003 031f 	and.w	r3, r3, #31
 8002fcc:	e018      	b.n	8003000 <HAL_ADC_ConfigChannel+0x29c>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fda:	fa93 f3a3 	rbit	r3, r3
 8002fde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002fe2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002fe6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002fea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002ff2:	2320      	movs	r3, #32
 8002ff4:	e004      	b.n	8003000 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002ff6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ffa:	fab3 f383 	clz	r3, r3
 8002ffe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003000:	429a      	cmp	r2, r3
 8003002:	d106      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2200      	movs	r2, #0
 800300a:	2101      	movs	r1, #1
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff fb75 	bl	80026fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2102      	movs	r1, #2
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff fb59 	bl	80026d0 <LL_ADC_GetOffsetChannel>
 800301e:	4603      	mov	r3, r0
 8003020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10a      	bne.n	800303e <HAL_ADC_ConfigChannel+0x2da>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2102      	movs	r1, #2
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fb4e 	bl	80026d0 <LL_ADC_GetOffsetChannel>
 8003034:	4603      	mov	r3, r0
 8003036:	0e9b      	lsrs	r3, r3, #26
 8003038:	f003 021f 	and.w	r2, r3, #31
 800303c:	e01e      	b.n	800307c <HAL_ADC_ConfigChannel+0x318>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2102      	movs	r1, #2
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff fb43 	bl	80026d0 <LL_ADC_GetOffsetChannel>
 800304a:	4603      	mov	r3, r0
 800304c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003054:	fa93 f3a3 	rbit	r3, r3
 8003058:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800305c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003060:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003064:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800306c:	2320      	movs	r3, #32
 800306e:	e004      	b.n	800307a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003070:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003074:	fab3 f383 	clz	r3, r3
 8003078:	b2db      	uxtb	r3, r3
 800307a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003084:	2b00      	cmp	r3, #0
 8003086:	d105      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x330>
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	0e9b      	lsrs	r3, r3, #26
 800308e:	f003 031f 	and.w	r3, r3, #31
 8003092:	e014      	b.n	80030be <HAL_ADC_ConfigChannel+0x35a>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800309c:	fa93 f3a3 	rbit	r3, r3
 80030a0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80030a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80030a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80030b0:	2320      	movs	r3, #32
 80030b2:	e004      	b.n	80030be <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80030b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030b8:	fab3 f383 	clz	r3, r3
 80030bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030be:	429a      	cmp	r2, r3
 80030c0:	d106      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2200      	movs	r2, #0
 80030c8:	2102      	movs	r1, #2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fb16 	bl	80026fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2103      	movs	r1, #3
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fafa 	bl	80026d0 <LL_ADC_GetOffsetChannel>
 80030dc:	4603      	mov	r3, r0
 80030de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10a      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x398>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2103      	movs	r1, #3
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff faef 	bl	80026d0 <LL_ADC_GetOffsetChannel>
 80030f2:	4603      	mov	r3, r0
 80030f4:	0e9b      	lsrs	r3, r3, #26
 80030f6:	f003 021f 	and.w	r2, r3, #31
 80030fa:	e017      	b.n	800312c <HAL_ADC_ConfigChannel+0x3c8>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2103      	movs	r1, #3
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fae4 	bl	80026d0 <LL_ADC_GetOffsetChannel>
 8003108:	4603      	mov	r3, r0
 800310a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800310e:	fa93 f3a3 	rbit	r3, r3
 8003112:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003114:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003116:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003118:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800311e:	2320      	movs	r3, #32
 8003120:	e003      	b.n	800312a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003122:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003124:	fab3 f383 	clz	r3, r3
 8003128:	b2db      	uxtb	r3, r3
 800312a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003134:	2b00      	cmp	r3, #0
 8003136:	d105      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x3e0>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	0e9b      	lsrs	r3, r3, #26
 800313e:	f003 031f 	and.w	r3, r3, #31
 8003142:	e011      	b.n	8003168 <HAL_ADC_ConfigChannel+0x404>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800314c:	fa93 f3a3 	rbit	r3, r3
 8003150:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003152:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003154:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003156:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800315c:	2320      	movs	r3, #32
 800315e:	e003      	b.n	8003168 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003160:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003162:	fab3 f383 	clz	r3, r3
 8003166:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003168:	429a      	cmp	r2, r3
 800316a:	d106      	bne.n	800317a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2200      	movs	r2, #0
 8003172:	2103      	movs	r1, #3
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff fac1 	bl	80026fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fbc8 	bl	8002914 <LL_ADC_IsEnabled>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	f040 8140 	bne.w	800340c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	6819      	ldr	r1, [r3, #0]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	461a      	mov	r2, r3
 800319a:	f7ff fb35 	bl	8002808 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	4a8f      	ldr	r2, [pc, #572]	@ (80033e0 <HAL_ADC_ConfigChannel+0x67c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	f040 8131 	bne.w	800340c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10b      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x46e>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	0e9b      	lsrs	r3, r3, #26
 80031c0:	3301      	adds	r3, #1
 80031c2:	f003 031f 	and.w	r3, r3, #31
 80031c6:	2b09      	cmp	r3, #9
 80031c8:	bf94      	ite	ls
 80031ca:	2301      	movls	r3, #1
 80031cc:	2300      	movhi	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	e019      	b.n	8003206 <HAL_ADC_ConfigChannel+0x4a2>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031da:	fa93 f3a3 	rbit	r3, r3
 80031de:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80031e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80031e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80031ea:	2320      	movs	r3, #32
 80031ec:	e003      	b.n	80031f6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80031ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031f0:	fab3 f383 	clz	r3, r3
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	3301      	adds	r3, #1
 80031f8:	f003 031f 	and.w	r3, r3, #31
 80031fc:	2b09      	cmp	r3, #9
 80031fe:	bf94      	ite	ls
 8003200:	2301      	movls	r3, #1
 8003202:	2300      	movhi	r3, #0
 8003204:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003206:	2b00      	cmp	r3, #0
 8003208:	d079      	beq.n	80032fe <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003212:	2b00      	cmp	r3, #0
 8003214:	d107      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x4c2>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	0e9b      	lsrs	r3, r3, #26
 800321c:	3301      	adds	r3, #1
 800321e:	069b      	lsls	r3, r3, #26
 8003220:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003224:	e015      	b.n	8003252 <HAL_ADC_ConfigChannel+0x4ee>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003234:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003236:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800323e:	2320      	movs	r3, #32
 8003240:	e003      	b.n	800324a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003242:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	b2db      	uxtb	r3, r3
 800324a:	3301      	adds	r3, #1
 800324c:	069b      	lsls	r3, r3, #26
 800324e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x50e>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	0e9b      	lsrs	r3, r3, #26
 8003264:	3301      	adds	r3, #1
 8003266:	f003 031f 	and.w	r3, r3, #31
 800326a:	2101      	movs	r1, #1
 800326c:	fa01 f303 	lsl.w	r3, r1, r3
 8003270:	e017      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x53e>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003278:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003282:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800328a:	2320      	movs	r3, #32
 800328c:	e003      	b.n	8003296 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800328e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003290:	fab3 f383 	clz	r3, r3
 8003294:	b2db      	uxtb	r3, r3
 8003296:	3301      	adds	r3, #1
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	2101      	movs	r1, #1
 800329e:	fa01 f303 	lsl.w	r3, r1, r3
 80032a2:	ea42 0103 	orr.w	r1, r2, r3
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10a      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x564>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	0e9b      	lsrs	r3, r3, #26
 80032b8:	3301      	adds	r3, #1
 80032ba:	f003 021f 	and.w	r2, r3, #31
 80032be:	4613      	mov	r3, r2
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	4413      	add	r3, r2
 80032c4:	051b      	lsls	r3, r3, #20
 80032c6:	e018      	b.n	80032fa <HAL_ADC_ConfigChannel+0x596>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032d0:	fa93 f3a3 	rbit	r3, r3
 80032d4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80032d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80032da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80032e0:	2320      	movs	r3, #32
 80032e2:	e003      	b.n	80032ec <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80032e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e6:	fab3 f383 	clz	r3, r3
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	3301      	adds	r3, #1
 80032ee:	f003 021f 	and.w	r2, r3, #31
 80032f2:	4613      	mov	r3, r2
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	4413      	add	r3, r2
 80032f8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032fa:	430b      	orrs	r3, r1
 80032fc:	e081      	b.n	8003402 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003306:	2b00      	cmp	r3, #0
 8003308:	d107      	bne.n	800331a <HAL_ADC_ConfigChannel+0x5b6>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	0e9b      	lsrs	r3, r3, #26
 8003310:	3301      	adds	r3, #1
 8003312:	069b      	lsls	r3, r3, #26
 8003314:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003318:	e015      	b.n	8003346 <HAL_ADC_ConfigChannel+0x5e2>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800332c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003332:	2320      	movs	r3, #32
 8003334:	e003      	b.n	800333e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003338:	fab3 f383 	clz	r3, r3
 800333c:	b2db      	uxtb	r3, r3
 800333e:	3301      	adds	r3, #1
 8003340:	069b      	lsls	r3, r3, #26
 8003342:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x602>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	0e9b      	lsrs	r3, r3, #26
 8003358:	3301      	adds	r3, #1
 800335a:	f003 031f 	and.w	r3, r3, #31
 800335e:	2101      	movs	r1, #1
 8003360:	fa01 f303 	lsl.w	r3, r1, r3
 8003364:	e017      	b.n	8003396 <HAL_ADC_ConfigChannel+0x632>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	61bb      	str	r3, [r7, #24]
  return result;
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800337e:	2320      	movs	r3, #32
 8003380:	e003      	b.n	800338a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	fab3 f383 	clz	r3, r3
 8003388:	b2db      	uxtb	r3, r3
 800338a:	3301      	adds	r3, #1
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	2101      	movs	r1, #1
 8003392:	fa01 f303 	lsl.w	r3, r1, r3
 8003396:	ea42 0103 	orr.w	r1, r2, r3
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10d      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0x65e>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	0e9b      	lsrs	r3, r3, #26
 80033ac:	3301      	adds	r3, #1
 80033ae:	f003 021f 	and.w	r2, r3, #31
 80033b2:	4613      	mov	r3, r2
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	4413      	add	r3, r2
 80033b8:	3b1e      	subs	r3, #30
 80033ba:	051b      	lsls	r3, r3, #20
 80033bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80033c0:	e01e      	b.n	8003400 <HAL_ADC_ConfigChannel+0x69c>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	fa93 f3a3 	rbit	r3, r3
 80033ce:	60fb      	str	r3, [r7, #12]
  return result;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d104      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80033da:	2320      	movs	r3, #32
 80033dc:	e006      	b.n	80033ec <HAL_ADC_ConfigChannel+0x688>
 80033de:	bf00      	nop
 80033e0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	fab3 f383 	clz	r3, r3
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	3301      	adds	r3, #1
 80033ee:	f003 021f 	and.w	r2, r3, #31
 80033f2:	4613      	mov	r3, r2
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	4413      	add	r3, r2
 80033f8:	3b1e      	subs	r3, #30
 80033fa:	051b      	lsls	r3, r3, #20
 80033fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003400:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003406:	4619      	mov	r1, r3
 8003408:	f7ff f9d2 	bl	80027b0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4b3d      	ldr	r3, [pc, #244]	@ (8003508 <HAL_ADC_ConfigChannel+0x7a4>)
 8003412:	4013      	ands	r3, r2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d06c      	beq.n	80034f2 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003418:	483c      	ldr	r0, [pc, #240]	@ (800350c <HAL_ADC_ConfigChannel+0x7a8>)
 800341a:	f7ff f927 	bl	800266c <LL_ADC_GetCommonPathInternalCh>
 800341e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a3a      	ldr	r2, [pc, #232]	@ (8003510 <HAL_ADC_ConfigChannel+0x7ac>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d127      	bne.n	800347c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800342c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003430:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d121      	bne.n	800347c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a35      	ldr	r2, [pc, #212]	@ (8003514 <HAL_ADC_ConfigChannel+0x7b0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d157      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003442:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003446:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800344a:	4619      	mov	r1, r3
 800344c:	482f      	ldr	r0, [pc, #188]	@ (800350c <HAL_ADC_ConfigChannel+0x7a8>)
 800344e:	f7ff f8fa 	bl	8002646 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003452:	4b31      	ldr	r3, [pc, #196]	@ (8003518 <HAL_ADC_ConfigChannel+0x7b4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	099b      	lsrs	r3, r3, #6
 8003458:	4a30      	ldr	r2, [pc, #192]	@ (800351c <HAL_ADC_ConfigChannel+0x7b8>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	099b      	lsrs	r3, r3, #6
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	4613      	mov	r3, r2
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	4413      	add	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800346c:	e002      	b.n	8003474 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	3b01      	subs	r3, #1
 8003472:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f9      	bne.n	800346e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800347a:	e03a      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a27      	ldr	r2, [pc, #156]	@ (8003520 <HAL_ADC_ConfigChannel+0x7bc>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d113      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003486:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800348a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10d      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a1f      	ldr	r2, [pc, #124]	@ (8003514 <HAL_ADC_ConfigChannel+0x7b0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d12a      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800349c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034a4:	4619      	mov	r1, r3
 80034a6:	4819      	ldr	r0, [pc, #100]	@ (800350c <HAL_ADC_ConfigChannel+0x7a8>)
 80034a8:	f7ff f8cd 	bl	8002646 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034ac:	e021      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003524 <HAL_ADC_ConfigChannel+0x7c0>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d11c      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d116      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a12      	ldr	r2, [pc, #72]	@ (8003514 <HAL_ADC_ConfigChannel+0x7b0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d111      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034d6:	4619      	mov	r1, r3
 80034d8:	480c      	ldr	r0, [pc, #48]	@ (800350c <HAL_ADC_ConfigChannel+0x7a8>)
 80034da:	f7ff f8b4 	bl	8002646 <LL_ADC_SetCommonPathInternalCh>
 80034de:	e008      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e4:	f043 0220 	orr.w	r2, r3, #32
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80034fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80034fe:	4618      	mov	r0, r3
 8003500:	37d8      	adds	r7, #216	@ 0xd8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	80080000 	.word	0x80080000
 800350c:	50040300 	.word	0x50040300
 8003510:	c7520000 	.word	0xc7520000
 8003514:	50040000 	.word	0x50040000
 8003518:	20000034 	.word	0x20000034
 800351c:	053e2d63 	.word	0x053e2d63
 8003520:	cb840000 	.word	0xcb840000
 8003524:	80000001 	.word	0x80000001

08003528 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003530:	2300      	movs	r3, #0
 8003532:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff f9eb 	bl	8002914 <LL_ADC_IsEnabled>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d169      	bne.n	8003618 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	4b36      	ldr	r3, [pc, #216]	@ (8003624 <ADC_Enable+0xfc>)
 800354c:	4013      	ands	r3, r2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00d      	beq.n	800356e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003556:	f043 0210 	orr.w	r2, r3, #16
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003562:	f043 0201 	orr.w	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e055      	b.n	800361a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff f9ba 	bl	80028ec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003578:	482b      	ldr	r0, [pc, #172]	@ (8003628 <ADC_Enable+0x100>)
 800357a:	f7ff f877 	bl	800266c <LL_ADC_GetCommonPathInternalCh>
 800357e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003580:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003584:	2b00      	cmp	r3, #0
 8003586:	d013      	beq.n	80035b0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003588:	4b28      	ldr	r3, [pc, #160]	@ (800362c <ADC_Enable+0x104>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	099b      	lsrs	r3, r3, #6
 800358e:	4a28      	ldr	r2, [pc, #160]	@ (8003630 <ADC_Enable+0x108>)
 8003590:	fba2 2303 	umull	r2, r3, r2, r3
 8003594:	099b      	lsrs	r3, r3, #6
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	4613      	mov	r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035a2:	e002      	b.n	80035aa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1f9      	bne.n	80035a4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80035b0:	f7ff f82a 	bl	8002608 <HAL_GetTick>
 80035b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035b6:	e028      	b.n	800360a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff f9a9 	bl	8002914 <LL_ADC_IsEnabled>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d104      	bne.n	80035d2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff f98d 	bl	80028ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035d2:	f7ff f819 	bl	8002608 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d914      	bls.n	800360a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d00d      	beq.n	800360a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f2:	f043 0210 	orr.w	r2, r3, #16
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fe:	f043 0201 	orr.w	r2, r3, #1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e007      	b.n	800361a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b01      	cmp	r3, #1
 8003616:	d1cf      	bne.n	80035b8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	8000003f 	.word	0x8000003f
 8003628:	50040300 	.word	0x50040300
 800362c:	20000034 	.word	0x20000034
 8003630:	053e2d63 	.word	0x053e2d63

08003634 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003640:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003646:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800364a:	2b00      	cmp	r3, #0
 800364c:	d14b      	bne.n	80036e6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003652:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0308 	and.w	r3, r3, #8
 8003664:	2b00      	cmp	r3, #0
 8003666:	d021      	beq.n	80036ac <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff f860 	bl	8002732 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d032      	beq.n	80036de <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d12b      	bne.n	80036de <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003696:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d11f      	bne.n	80036de <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a2:	f043 0201 	orr.w	r2, r3, #1
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	655a      	str	r2, [r3, #84]	@ 0x54
 80036aa:	e018      	b.n	80036de <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d111      	bne.n	80036de <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036be:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d105      	bne.n	80036de <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d6:	f043 0201 	orr.w	r2, r3, #1
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f7fe f82e 	bl	8001740 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80036e4:	e00e      	b.n	8003704 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ea:	f003 0310 	and.w	r3, r3, #16
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f7ff fb2c 	bl	8002d50 <HAL_ADC_ErrorCallback>
}
 80036f8:	e004      	b.n	8003704 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	4798      	blx	r3
}
 8003704:	bf00      	nop
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003718:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f7ff fb0e 	bl	8002d3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003720:	bf00      	nop
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003734:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800373a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003746:	f043 0204 	orr.w	r2, r3, #4
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f7ff fafe 	bl	8002d50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003754:	bf00      	nop
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800376c:	4b0c      	ldr	r3, [pc, #48]	@ (80037a0 <__NVIC_SetPriorityGrouping+0x44>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003778:	4013      	ands	r3, r2
 800377a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003784:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800378c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800378e:	4a04      	ldr	r2, [pc, #16]	@ (80037a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	60d3      	str	r3, [r2, #12]
}
 8003794:	bf00      	nop
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	e000ed00 	.word	0xe000ed00

080037a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a8:	4b04      	ldr	r3, [pc, #16]	@ (80037bc <__NVIC_GetPriorityGrouping+0x18>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	0a1b      	lsrs	r3, r3, #8
 80037ae:	f003 0307 	and.w	r3, r3, #7
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	e000ed00 	.word	0xe000ed00

080037c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	db0b      	blt.n	80037ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	f003 021f 	and.w	r2, r3, #31
 80037d8:	4907      	ldr	r1, [pc, #28]	@ (80037f8 <__NVIC_EnableIRQ+0x38>)
 80037da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	2001      	movs	r0, #1
 80037e2:	fa00 f202 	lsl.w	r2, r0, r2
 80037e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	e000e100 	.word	0xe000e100

080037fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	6039      	str	r1, [r7, #0]
 8003806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380c:	2b00      	cmp	r3, #0
 800380e:	db0a      	blt.n	8003826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	b2da      	uxtb	r2, r3
 8003814:	490c      	ldr	r1, [pc, #48]	@ (8003848 <__NVIC_SetPriority+0x4c>)
 8003816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381a:	0112      	lsls	r2, r2, #4
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	440b      	add	r3, r1
 8003820:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003824:	e00a      	b.n	800383c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	4908      	ldr	r1, [pc, #32]	@ (800384c <__NVIC_SetPriority+0x50>)
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	3b04      	subs	r3, #4
 8003834:	0112      	lsls	r2, r2, #4
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	440b      	add	r3, r1
 800383a:	761a      	strb	r2, [r3, #24]
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	e000e100 	.word	0xe000e100
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003850:	b480      	push	{r7}
 8003852:	b089      	sub	sp, #36	@ 0x24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f1c3 0307 	rsb	r3, r3, #7
 800386a:	2b04      	cmp	r3, #4
 800386c:	bf28      	it	cs
 800386e:	2304      	movcs	r3, #4
 8003870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3304      	adds	r3, #4
 8003876:	2b06      	cmp	r3, #6
 8003878:	d902      	bls.n	8003880 <NVIC_EncodePriority+0x30>
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3b03      	subs	r3, #3
 800387e:	e000      	b.n	8003882 <NVIC_EncodePriority+0x32>
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003884:	f04f 32ff 	mov.w	r2, #4294967295
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43da      	mvns	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	401a      	ands	r2, r3
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003898:	f04f 31ff 	mov.w	r1, #4294967295
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	fa01 f303 	lsl.w	r3, r1, r3
 80038a2:	43d9      	mvns	r1, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a8:	4313      	orrs	r3, r2
         );
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3724      	adds	r7, #36	@ 0x24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
	...

080038b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038c8:	d301      	bcc.n	80038ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ca:	2301      	movs	r3, #1
 80038cc:	e00f      	b.n	80038ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ce:	4a0a      	ldr	r2, [pc, #40]	@ (80038f8 <SysTick_Config+0x40>)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038d6:	210f      	movs	r1, #15
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295
 80038dc:	f7ff ff8e 	bl	80037fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038e0:	4b05      	ldr	r3, [pc, #20]	@ (80038f8 <SysTick_Config+0x40>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038e6:	4b04      	ldr	r3, [pc, #16]	@ (80038f8 <SysTick_Config+0x40>)
 80038e8:	2207      	movs	r2, #7
 80038ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	e000e010 	.word	0xe000e010

080038fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff ff29 	bl	800375c <__NVIC_SetPriorityGrouping>
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b086      	sub	sp, #24
 8003916:	af00      	add	r7, sp, #0
 8003918:	4603      	mov	r3, r0
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
 800391e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003924:	f7ff ff3e 	bl	80037a4 <__NVIC_GetPriorityGrouping>
 8003928:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	68b9      	ldr	r1, [r7, #8]
 800392e:	6978      	ldr	r0, [r7, #20]
 8003930:	f7ff ff8e 	bl	8003850 <NVIC_EncodePriority>
 8003934:	4602      	mov	r2, r0
 8003936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800393a:	4611      	mov	r1, r2
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff ff5d 	bl	80037fc <__NVIC_SetPriority>
}
 8003942:	bf00      	nop
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	4603      	mov	r3, r0
 8003952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff ff31 	bl	80037c0 <__NVIC_EnableIRQ>
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff ffa2 	bl	80038b8 <SysTick_Config>
 8003974:	4603      	mov	r3, r0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e098      	b.n	8003ac4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	4b4d      	ldr	r3, [pc, #308]	@ (8003ad0 <HAL_DMA_Init+0x150>)
 800399a:	429a      	cmp	r2, r3
 800399c:	d80f      	bhi.n	80039be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	4b4b      	ldr	r3, [pc, #300]	@ (8003ad4 <HAL_DMA_Init+0x154>)
 80039a6:	4413      	add	r3, r2
 80039a8:	4a4b      	ldr	r2, [pc, #300]	@ (8003ad8 <HAL_DMA_Init+0x158>)
 80039aa:	fba2 2303 	umull	r2, r3, r2, r3
 80039ae:	091b      	lsrs	r3, r3, #4
 80039b0:	009a      	lsls	r2, r3, #2
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a48      	ldr	r2, [pc, #288]	@ (8003adc <HAL_DMA_Init+0x15c>)
 80039ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80039bc:	e00e      	b.n	80039dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	461a      	mov	r2, r3
 80039c4:	4b46      	ldr	r3, [pc, #280]	@ (8003ae0 <HAL_DMA_Init+0x160>)
 80039c6:	4413      	add	r3, r2
 80039c8:	4a43      	ldr	r2, [pc, #268]	@ (8003ad8 <HAL_DMA_Init+0x158>)
 80039ca:	fba2 2303 	umull	r2, r3, r2, r3
 80039ce:	091b      	lsrs	r3, r3, #4
 80039d0:	009a      	lsls	r2, r3, #2
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a42      	ldr	r2, [pc, #264]	@ (8003ae4 <HAL_DMA_Init+0x164>)
 80039da:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80039f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a36:	d039      	beq.n	8003aac <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3c:	4a27      	ldr	r2, [pc, #156]	@ (8003adc <HAL_DMA_Init+0x15c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d11a      	bne.n	8003a78 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a42:	4b29      	ldr	r3, [pc, #164]	@ (8003ae8 <HAL_DMA_Init+0x168>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4a:	f003 031c 	and.w	r3, r3, #28
 8003a4e:	210f      	movs	r1, #15
 8003a50:	fa01 f303 	lsl.w	r3, r1, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	4924      	ldr	r1, [pc, #144]	@ (8003ae8 <HAL_DMA_Init+0x168>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003a5c:	4b22      	ldr	r3, [pc, #136]	@ (8003ae8 <HAL_DMA_Init+0x168>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6859      	ldr	r1, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a68:	f003 031c 	and.w	r3, r3, #28
 8003a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a70:	491d      	ldr	r1, [pc, #116]	@ (8003ae8 <HAL_DMA_Init+0x168>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	600b      	str	r3, [r1, #0]
 8003a76:	e019      	b.n	8003aac <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a78:	4b1c      	ldr	r3, [pc, #112]	@ (8003aec <HAL_DMA_Init+0x16c>)
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a80:	f003 031c 	and.w	r3, r3, #28
 8003a84:	210f      	movs	r1, #15
 8003a86:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	4917      	ldr	r1, [pc, #92]	@ (8003aec <HAL_DMA_Init+0x16c>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003a92:	4b16      	ldr	r3, [pc, #88]	@ (8003aec <HAL_DMA_Init+0x16c>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6859      	ldr	r1, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9e:	f003 031c 	and.w	r3, r3, #28
 8003aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa6:	4911      	ldr	r1, [pc, #68]	@ (8003aec <HAL_DMA_Init+0x16c>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	40020407 	.word	0x40020407
 8003ad4:	bffdfff8 	.word	0xbffdfff8
 8003ad8:	cccccccd 	.word	0xcccccccd
 8003adc:	40020000 	.word	0x40020000
 8003ae0:	bffdfbf8 	.word	0xbffdfbf8
 8003ae4:	40020400 	.word	0x40020400
 8003ae8:	400200a8 	.word	0x400200a8
 8003aec:	400204a8 	.word	0x400204a8

08003af0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d101      	bne.n	8003b10 <HAL_DMA_Start_IT+0x20>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e04b      	b.n	8003ba8 <HAL_DMA_Start_IT+0xb8>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d13a      	bne.n	8003b9a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0201 	bic.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	68b9      	ldr	r1, [r7, #8]
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 f8e0 	bl	8003d0e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d008      	beq.n	8003b68 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 020e 	orr.w	r2, r2, #14
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	e00f      	b.n	8003b88 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0204 	bic.w	r2, r2, #4
 8003b76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 020a 	orr.w	r2, r2, #10
 8003b86:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0201 	orr.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	e005      	b.n	8003ba6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bcc:	f003 031c 	and.w	r3, r3, #28
 8003bd0:	2204      	movs	r2, #4
 8003bd2:	409a      	lsls	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d026      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x7a>
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d021      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0320 	and.w	r3, r3, #32
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d107      	bne.n	8003c04 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0204 	bic.w	r2, r2, #4
 8003c02:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c08:	f003 021c 	and.w	r2, r3, #28
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c10:	2104      	movs	r1, #4
 8003c12:	fa01 f202 	lsl.w	r2, r1, r2
 8003c16:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d071      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003c28:	e06c      	b.n	8003d04 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2e:	f003 031c 	and.w	r3, r3, #28
 8003c32:	2202      	movs	r2, #2
 8003c34:	409a      	lsls	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d02e      	beq.n	8003c9c <HAL_DMA_IRQHandler+0xec>
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d029      	beq.n	8003c9c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10b      	bne.n	8003c6e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 020a 	bic.w	r2, r2, #10
 8003c64:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c72:	f003 021c 	and.w	r2, r3, #28
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7a:	2102      	movs	r1, #2
 8003c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c80:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d038      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003c9a:	e033      	b.n	8003d04 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca0:	f003 031c 	and.w	r3, r3, #28
 8003ca4:	2208      	movs	r2, #8
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4013      	ands	r3, r2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d02a      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x156>
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d025      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 020e 	bic.w	r2, r2, #14
 8003cc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cce:	f003 021c 	and.w	r2, r3, #28
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cdc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d004      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d04:	bf00      	nop
 8003d06:	bf00      	nop
}
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b085      	sub	sp, #20
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	607a      	str	r2, [r7, #4]
 8003d1a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d20:	f003 021c 	and.w	r2, r3, #28
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d28:	2101      	movs	r1, #1
 8003d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d2e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	2b10      	cmp	r3, #16
 8003d3e:	d108      	bne.n	8003d52 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d50:	e007      	b.n	8003d62 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	60da      	str	r2, [r3, #12]
}
 8003d62:	bf00      	nop
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
	...

08003d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d7e:	e148      	b.n	8004012 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	2101      	movs	r1, #1
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 813a 	beq.w	800400c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 0303 	and.w	r3, r3, #3
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d005      	beq.n	8003db0 <HAL_GPIO_Init+0x40>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 0303 	and.w	r3, r3, #3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d130      	bne.n	8003e12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	2203      	movs	r2, #3
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003de6:	2201      	movs	r2, #1
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	43db      	mvns	r3, r3
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4013      	ands	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	091b      	lsrs	r3, r3, #4
 8003dfc:	f003 0201 	and.w	r2, r3, #1
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d017      	beq.n	8003e4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	2203      	movs	r2, #3
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4013      	ands	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d123      	bne.n	8003ea2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	08da      	lsrs	r2, r3, #3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3208      	adds	r2, #8
 8003e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	220f      	movs	r2, #15
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43db      	mvns	r3, r3
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	691a      	ldr	r2, [r3, #16]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	08da      	lsrs	r2, r3, #3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3208      	adds	r2, #8
 8003e9c:	6939      	ldr	r1, [r7, #16]
 8003e9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	2203      	movs	r2, #3
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f003 0203 	and.w	r2, r3, #3
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 8094 	beq.w	800400c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ee4:	4b52      	ldr	r3, [pc, #328]	@ (8004030 <HAL_GPIO_Init+0x2c0>)
 8003ee6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ee8:	4a51      	ldr	r2, [pc, #324]	@ (8004030 <HAL_GPIO_Init+0x2c0>)
 8003eea:	f043 0301 	orr.w	r3, r3, #1
 8003eee:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ef0:	4b4f      	ldr	r3, [pc, #316]	@ (8004030 <HAL_GPIO_Init+0x2c0>)
 8003ef2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	60bb      	str	r3, [r7, #8]
 8003efa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003efc:	4a4d      	ldr	r2, [pc, #308]	@ (8004034 <HAL_GPIO_Init+0x2c4>)
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	089b      	lsrs	r3, r3, #2
 8003f02:	3302      	adds	r3, #2
 8003f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f003 0303 	and.w	r3, r3, #3
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	220f      	movs	r2, #15
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f26:	d00d      	beq.n	8003f44 <HAL_GPIO_Init+0x1d4>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a43      	ldr	r2, [pc, #268]	@ (8004038 <HAL_GPIO_Init+0x2c8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d007      	beq.n	8003f40 <HAL_GPIO_Init+0x1d0>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a42      	ldr	r2, [pc, #264]	@ (800403c <HAL_GPIO_Init+0x2cc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d101      	bne.n	8003f3c <HAL_GPIO_Init+0x1cc>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e004      	b.n	8003f46 <HAL_GPIO_Init+0x1d6>
 8003f3c:	2307      	movs	r3, #7
 8003f3e:	e002      	b.n	8003f46 <HAL_GPIO_Init+0x1d6>
 8003f40:	2301      	movs	r3, #1
 8003f42:	e000      	b.n	8003f46 <HAL_GPIO_Init+0x1d6>
 8003f44:	2300      	movs	r3, #0
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	f002 0203 	and.w	r2, r2, #3
 8003f4c:	0092      	lsls	r2, r2, #2
 8003f4e:	4093      	lsls	r3, r2
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f56:	4937      	ldr	r1, [pc, #220]	@ (8004034 <HAL_GPIO_Init+0x2c4>)
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	089b      	lsrs	r3, r3, #2
 8003f5c:	3302      	adds	r3, #2
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f64:	4b36      	ldr	r3, [pc, #216]	@ (8004040 <HAL_GPIO_Init+0x2d0>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4013      	ands	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f88:	4a2d      	ldr	r2, [pc, #180]	@ (8004040 <HAL_GPIO_Init+0x2d0>)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f8e:	4b2c      	ldr	r3, [pc, #176]	@ (8004040 <HAL_GPIO_Init+0x2d0>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	43db      	mvns	r3, r3
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fb2:	4a23      	ldr	r2, [pc, #140]	@ (8004040 <HAL_GPIO_Init+0x2d0>)
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003fb8:	4b21      	ldr	r3, [pc, #132]	@ (8004040 <HAL_GPIO_Init+0x2d0>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003fdc:	4a18      	ldr	r2, [pc, #96]	@ (8004040 <HAL_GPIO_Init+0x2d0>)
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003fe2:	4b17      	ldr	r3, [pc, #92]	@ (8004040 <HAL_GPIO_Init+0x2d0>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	43db      	mvns	r3, r3
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004006:	4a0e      	ldr	r2, [pc, #56]	@ (8004040 <HAL_GPIO_Init+0x2d0>)
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	3301      	adds	r3, #1
 8004010:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	fa22 f303 	lsr.w	r3, r2, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	f47f aeaf 	bne.w	8003d80 <HAL_GPIO_Init+0x10>
  }
}
 8004022:	bf00      	nop
 8004024:	bf00      	nop
 8004026:	371c      	adds	r7, #28
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	40021000 	.word	0x40021000
 8004034:	40010000 	.word	0x40010000
 8004038:	48000400 	.word	0x48000400
 800403c:	48000800 	.word	0x48000800
 8004040:	40010400 	.word	0x40010400

08004044 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	887b      	ldrh	r3, [r7, #2]
 8004056:	4013      	ands	r3, r2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800405c:	2301      	movs	r3, #1
 800405e:	73fb      	strb	r3, [r7, #15]
 8004060:	e001      	b.n	8004066 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004062:	2300      	movs	r3, #0
 8004064:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004066:	7bfb      	ldrb	r3, [r7, #15]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	807b      	strh	r3, [r7, #2]
 8004080:	4613      	mov	r3, r2
 8004082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004084:	787b      	ldrb	r3, [r7, #1]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800408a:	887a      	ldrh	r2, [r7, #2]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004090:	e002      	b.n	8004098 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004092:	887a      	ldrh	r2, [r7, #2]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040a8:	4b05      	ldr	r3, [pc, #20]	@ (80040c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a04      	ldr	r2, [pc, #16]	@ (80040c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040b2:	6013      	str	r3, [r2, #0]
}
 80040b4:	bf00      	nop
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	40007000 	.word	0x40007000

080040c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80040c8:	4b04      	ldr	r3, [pc, #16]	@ (80040dc <HAL_PWREx_GetVoltageRange+0x18>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40007000 	.word	0x40007000

080040e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040ee:	d130      	bne.n	8004152 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80040f0:	4b23      	ldr	r3, [pc, #140]	@ (8004180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040fc:	d038      	beq.n	8004170 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040fe:	4b20      	ldr	r3, [pc, #128]	@ (8004180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004106:	4a1e      	ldr	r2, [pc, #120]	@ (8004180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004108:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800410c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800410e:	4b1d      	ldr	r3, [pc, #116]	@ (8004184 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2232      	movs	r2, #50	@ 0x32
 8004114:	fb02 f303 	mul.w	r3, r2, r3
 8004118:	4a1b      	ldr	r2, [pc, #108]	@ (8004188 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800411a:	fba2 2303 	umull	r2, r3, r2, r3
 800411e:	0c9b      	lsrs	r3, r3, #18
 8004120:	3301      	adds	r3, #1
 8004122:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004124:	e002      	b.n	800412c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	3b01      	subs	r3, #1
 800412a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800412c:	4b14      	ldr	r3, [pc, #80]	@ (8004180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004134:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004138:	d102      	bne.n	8004140 <HAL_PWREx_ControlVoltageScaling+0x60>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1f2      	bne.n	8004126 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004140:	4b0f      	ldr	r3, [pc, #60]	@ (8004180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800414c:	d110      	bne.n	8004170 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e00f      	b.n	8004172 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004152:	4b0b      	ldr	r3, [pc, #44]	@ (8004180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800415a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800415e:	d007      	beq.n	8004170 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004160:	4b07      	ldr	r3, [pc, #28]	@ (8004180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004168:	4a05      	ldr	r2, [pc, #20]	@ (8004180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800416a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800416e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40007000 	.word	0x40007000
 8004184:	20000034 	.word	0x20000034
 8004188:	431bde83 	.word	0x431bde83

0800418c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d102      	bne.n	80041a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	f000 bc02 	b.w	80049a4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041a0:	4b96      	ldr	r3, [pc, #600]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 030c 	and.w	r3, r3, #12
 80041a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041aa:	4b94      	ldr	r3, [pc, #592]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0310 	and.w	r3, r3, #16
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 80e4 	beq.w	800438a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d007      	beq.n	80041d8 <HAL_RCC_OscConfig+0x4c>
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	2b0c      	cmp	r3, #12
 80041cc:	f040 808b 	bne.w	80042e6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	f040 8087 	bne.w	80042e6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041d8:	4b88      	ldr	r3, [pc, #544]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <HAL_RCC_OscConfig+0x64>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e3d9      	b.n	80049a4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a1a      	ldr	r2, [r3, #32]
 80041f4:	4b81      	ldr	r3, [pc, #516]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d004      	beq.n	800420a <HAL_RCC_OscConfig+0x7e>
 8004200:	4b7e      	ldr	r3, [pc, #504]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004208:	e005      	b.n	8004216 <HAL_RCC_OscConfig+0x8a>
 800420a:	4b7c      	ldr	r3, [pc, #496]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 800420c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004210:	091b      	lsrs	r3, r3, #4
 8004212:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004216:	4293      	cmp	r3, r2
 8004218:	d223      	bcs.n	8004262 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fd8c 	bl	8004d3c <RCC_SetFlashLatencyFromMSIRange>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e3ba      	b.n	80049a4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800422e:	4b73      	ldr	r3, [pc, #460]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a72      	ldr	r2, [pc, #456]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 8004234:	f043 0308 	orr.w	r3, r3, #8
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	4b70      	ldr	r3, [pc, #448]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	496d      	ldr	r1, [pc, #436]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 8004248:	4313      	orrs	r3, r2
 800424a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800424c:	4b6b      	ldr	r3, [pc, #428]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	4968      	ldr	r1, [pc, #416]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 800425c:	4313      	orrs	r3, r2
 800425e:	604b      	str	r3, [r1, #4]
 8004260:	e025      	b.n	80042ae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004262:	4b66      	ldr	r3, [pc, #408]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a65      	ldr	r2, [pc, #404]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 8004268:	f043 0308 	orr.w	r3, r3, #8
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	4b63      	ldr	r3, [pc, #396]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	4960      	ldr	r1, [pc, #384]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 800427c:	4313      	orrs	r3, r2
 800427e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004280:	4b5e      	ldr	r3, [pc, #376]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	495b      	ldr	r1, [pc, #364]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 8004290:	4313      	orrs	r3, r2
 8004292:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d109      	bne.n	80042ae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fd4c 	bl	8004d3c <RCC_SetFlashLatencyFromMSIRange>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e37a      	b.n	80049a4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042ae:	f000 fc81 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 80042b2:	4602      	mov	r2, r0
 80042b4:	4b51      	ldr	r3, [pc, #324]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	091b      	lsrs	r3, r3, #4
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	4950      	ldr	r1, [pc, #320]	@ (8004400 <HAL_RCC_OscConfig+0x274>)
 80042c0:	5ccb      	ldrb	r3, [r1, r3]
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ca:	4a4e      	ldr	r2, [pc, #312]	@ (8004404 <HAL_RCC_OscConfig+0x278>)
 80042cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042ce:	4b4e      	ldr	r3, [pc, #312]	@ (8004408 <HAL_RCC_OscConfig+0x27c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fe f948 	bl	8002568 <HAL_InitTick>
 80042d8:	4603      	mov	r3, r0
 80042da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d052      	beq.n	8004388 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	e35e      	b.n	80049a4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d032      	beq.n	8004354 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042ee:	4b43      	ldr	r3, [pc, #268]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a42      	ldr	r2, [pc, #264]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 80042f4:	f043 0301 	orr.w	r3, r3, #1
 80042f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042fa:	f7fe f985 	bl	8002608 <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004300:	e008      	b.n	8004314 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004302:	f7fe f981 	bl	8002608 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e347      	b.n	80049a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004314:	4b39      	ldr	r3, [pc, #228]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0f0      	beq.n	8004302 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004320:	4b36      	ldr	r3, [pc, #216]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a35      	ldr	r2, [pc, #212]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 8004326:	f043 0308 	orr.w	r3, r3, #8
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	4b33      	ldr	r3, [pc, #204]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	4930      	ldr	r1, [pc, #192]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 800433a:	4313      	orrs	r3, r2
 800433c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800433e:	4b2f      	ldr	r3, [pc, #188]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	021b      	lsls	r3, r3, #8
 800434c:	492b      	ldr	r1, [pc, #172]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 800434e:	4313      	orrs	r3, r2
 8004350:	604b      	str	r3, [r1, #4]
 8004352:	e01a      	b.n	800438a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004354:	4b29      	ldr	r3, [pc, #164]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a28      	ldr	r2, [pc, #160]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 800435a:	f023 0301 	bic.w	r3, r3, #1
 800435e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004360:	f7fe f952 	bl	8002608 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004368:	f7fe f94e 	bl	8002608 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e314      	b.n	80049a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800437a:	4b20      	ldr	r3, [pc, #128]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0x1dc>
 8004386:	e000      	b.n	800438a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004388:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d073      	beq.n	800447e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	2b08      	cmp	r3, #8
 800439a:	d005      	beq.n	80043a8 <HAL_RCC_OscConfig+0x21c>
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	2b0c      	cmp	r3, #12
 80043a0:	d10e      	bne.n	80043c0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2b03      	cmp	r3, #3
 80043a6:	d10b      	bne.n	80043c0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a8:	4b14      	ldr	r3, [pc, #80]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d063      	beq.n	800447c <HAL_RCC_OscConfig+0x2f0>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d15f      	bne.n	800447c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e2f1      	b.n	80049a4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043c8:	d106      	bne.n	80043d8 <HAL_RCC_OscConfig+0x24c>
 80043ca:	4b0c      	ldr	r3, [pc, #48]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a0b      	ldr	r2, [pc, #44]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 80043d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	e025      	b.n	8004424 <HAL_RCC_OscConfig+0x298>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043e0:	d114      	bne.n	800440c <HAL_RCC_OscConfig+0x280>
 80043e2:	4b06      	ldr	r3, [pc, #24]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a05      	ldr	r2, [pc, #20]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 80043e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	4b03      	ldr	r3, [pc, #12]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a02      	ldr	r2, [pc, #8]	@ (80043fc <HAL_RCC_OscConfig+0x270>)
 80043f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	e013      	b.n	8004424 <HAL_RCC_OscConfig+0x298>
 80043fc:	40021000 	.word	0x40021000
 8004400:	08007734 	.word	0x08007734
 8004404:	20000034 	.word	0x20000034
 8004408:	20000038 	.word	0x20000038
 800440c:	4ba0      	ldr	r3, [pc, #640]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a9f      	ldr	r2, [pc, #636]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 8004412:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	4b9d      	ldr	r3, [pc, #628]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a9c      	ldr	r2, [pc, #624]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 800441e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d013      	beq.n	8004454 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442c:	f7fe f8ec 	bl	8002608 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004434:	f7fe f8e8 	bl	8002608 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b64      	cmp	r3, #100	@ 0x64
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e2ae      	b.n	80049a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004446:	4b92      	ldr	r3, [pc, #584]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0f0      	beq.n	8004434 <HAL_RCC_OscConfig+0x2a8>
 8004452:	e014      	b.n	800447e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004454:	f7fe f8d8 	bl	8002608 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800445c:	f7fe f8d4 	bl	8002608 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b64      	cmp	r3, #100	@ 0x64
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e29a      	b.n	80049a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800446e:	4b88      	ldr	r3, [pc, #544]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f0      	bne.n	800445c <HAL_RCC_OscConfig+0x2d0>
 800447a:	e000      	b.n	800447e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800447c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d060      	beq.n	800454c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	2b04      	cmp	r3, #4
 800448e:	d005      	beq.n	800449c <HAL_RCC_OscConfig+0x310>
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	2b0c      	cmp	r3, #12
 8004494:	d119      	bne.n	80044ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2b02      	cmp	r3, #2
 800449a:	d116      	bne.n	80044ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800449c:	4b7c      	ldr	r3, [pc, #496]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_RCC_OscConfig+0x328>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e277      	b.n	80049a4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b4:	4b76      	ldr	r3, [pc, #472]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	061b      	lsls	r3, r3, #24
 80044c2:	4973      	ldr	r1, [pc, #460]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044c8:	e040      	b.n	800454c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d023      	beq.n	800451a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044d2:	4b6f      	ldr	r3, [pc, #444]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a6e      	ldr	r2, [pc, #440]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 80044d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044de:	f7fe f893 	bl	8002608 <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e6:	f7fe f88f 	bl	8002608 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e255      	b.n	80049a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044f8:	4b65      	ldr	r3, [pc, #404]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f0      	beq.n	80044e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004504:	4b62      	ldr	r3, [pc, #392]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	061b      	lsls	r3, r3, #24
 8004512:	495f      	ldr	r1, [pc, #380]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 8004514:	4313      	orrs	r3, r2
 8004516:	604b      	str	r3, [r1, #4]
 8004518:	e018      	b.n	800454c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800451a:	4b5d      	ldr	r3, [pc, #372]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a5c      	ldr	r2, [pc, #368]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 8004520:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004526:	f7fe f86f 	bl	8002608 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800452e:	f7fe f86b 	bl	8002608 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e231      	b.n	80049a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004540:	4b53      	ldr	r3, [pc, #332]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1f0      	bne.n	800452e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b00      	cmp	r3, #0
 8004556:	d03c      	beq.n	80045d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d01c      	beq.n	800459a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004560:	4b4b      	ldr	r3, [pc, #300]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 8004562:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004566:	4a4a      	ldr	r2, [pc, #296]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 8004568:	f043 0301 	orr.w	r3, r3, #1
 800456c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004570:	f7fe f84a 	bl	8002608 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004578:	f7fe f846 	bl	8002608 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e20c      	b.n	80049a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800458a:	4b41      	ldr	r3, [pc, #260]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 800458c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0ef      	beq.n	8004578 <HAL_RCC_OscConfig+0x3ec>
 8004598:	e01b      	b.n	80045d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800459a:	4b3d      	ldr	r3, [pc, #244]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 800459c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045a0:	4a3b      	ldr	r2, [pc, #236]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 80045a2:	f023 0301 	bic.w	r3, r3, #1
 80045a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045aa:	f7fe f82d 	bl	8002608 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b2:	f7fe f829 	bl	8002608 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e1ef      	b.n	80049a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045c4:	4b32      	ldr	r3, [pc, #200]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 80045c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1ef      	bne.n	80045b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0304 	and.w	r3, r3, #4
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 80a6 	beq.w	800472c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045e0:	2300      	movs	r3, #0
 80045e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80045e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 80045e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10d      	bne.n	800460c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045f0:	4b27      	ldr	r3, [pc, #156]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 80045f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f4:	4a26      	ldr	r2, [pc, #152]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 80045f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80045fc:	4b24      	ldr	r3, [pc, #144]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 80045fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004608:	2301      	movs	r3, #1
 800460a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800460c:	4b21      	ldr	r3, [pc, #132]	@ (8004694 <HAL_RCC_OscConfig+0x508>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004614:	2b00      	cmp	r3, #0
 8004616:	d118      	bne.n	800464a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004618:	4b1e      	ldr	r3, [pc, #120]	@ (8004694 <HAL_RCC_OscConfig+0x508>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a1d      	ldr	r2, [pc, #116]	@ (8004694 <HAL_RCC_OscConfig+0x508>)
 800461e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004622:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004624:	f7fd fff0 	bl	8002608 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800462c:	f7fd ffec 	bl	8002608 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e1b2      	b.n	80049a4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800463e:	4b15      	ldr	r3, [pc, #84]	@ (8004694 <HAL_RCC_OscConfig+0x508>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0f0      	beq.n	800462c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d108      	bne.n	8004664 <HAL_RCC_OscConfig+0x4d8>
 8004652:	4b0f      	ldr	r3, [pc, #60]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 8004654:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004658:	4a0d      	ldr	r2, [pc, #52]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004662:	e029      	b.n	80046b8 <HAL_RCC_OscConfig+0x52c>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b05      	cmp	r3, #5
 800466a:	d115      	bne.n	8004698 <HAL_RCC_OscConfig+0x50c>
 800466c:	4b08      	ldr	r3, [pc, #32]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 800466e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004672:	4a07      	ldr	r2, [pc, #28]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 8004674:	f043 0304 	orr.w	r3, r3, #4
 8004678:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800467c:	4b04      	ldr	r3, [pc, #16]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004682:	4a03      	ldr	r2, [pc, #12]	@ (8004690 <HAL_RCC_OscConfig+0x504>)
 8004684:	f043 0301 	orr.w	r3, r3, #1
 8004688:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800468c:	e014      	b.n	80046b8 <HAL_RCC_OscConfig+0x52c>
 800468e:	bf00      	nop
 8004690:	40021000 	.word	0x40021000
 8004694:	40007000 	.word	0x40007000
 8004698:	4b9a      	ldr	r3, [pc, #616]	@ (8004904 <HAL_RCC_OscConfig+0x778>)
 800469a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800469e:	4a99      	ldr	r2, [pc, #612]	@ (8004904 <HAL_RCC_OscConfig+0x778>)
 80046a0:	f023 0301 	bic.w	r3, r3, #1
 80046a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046a8:	4b96      	ldr	r3, [pc, #600]	@ (8004904 <HAL_RCC_OscConfig+0x778>)
 80046aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ae:	4a95      	ldr	r2, [pc, #596]	@ (8004904 <HAL_RCC_OscConfig+0x778>)
 80046b0:	f023 0304 	bic.w	r3, r3, #4
 80046b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d016      	beq.n	80046ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c0:	f7fd ffa2 	bl	8002608 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046c6:	e00a      	b.n	80046de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c8:	f7fd ff9e 	bl	8002608 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e162      	b.n	80049a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046de:	4b89      	ldr	r3, [pc, #548]	@ (8004904 <HAL_RCC_OscConfig+0x778>)
 80046e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0ed      	beq.n	80046c8 <HAL_RCC_OscConfig+0x53c>
 80046ec:	e015      	b.n	800471a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ee:	f7fd ff8b 	bl	8002608 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046f4:	e00a      	b.n	800470c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f6:	f7fd ff87 	bl	8002608 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004704:	4293      	cmp	r3, r2
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e14b      	b.n	80049a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800470c:	4b7d      	ldr	r3, [pc, #500]	@ (8004904 <HAL_RCC_OscConfig+0x778>)
 800470e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1ed      	bne.n	80046f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800471a:	7ffb      	ldrb	r3, [r7, #31]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d105      	bne.n	800472c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004720:	4b78      	ldr	r3, [pc, #480]	@ (8004904 <HAL_RCC_OscConfig+0x778>)
 8004722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004724:	4a77      	ldr	r2, [pc, #476]	@ (8004904 <HAL_RCC_OscConfig+0x778>)
 8004726:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800472a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0320 	and.w	r3, r3, #32
 8004734:	2b00      	cmp	r3, #0
 8004736:	d03c      	beq.n	80047b2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473c:	2b00      	cmp	r3, #0
 800473e:	d01c      	beq.n	800477a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004740:	4b70      	ldr	r3, [pc, #448]	@ (8004904 <HAL_RCC_OscConfig+0x778>)
 8004742:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004746:	4a6f      	ldr	r2, [pc, #444]	@ (8004904 <HAL_RCC_OscConfig+0x778>)
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004750:	f7fd ff5a 	bl	8002608 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004758:	f7fd ff56 	bl	8002608 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e11c      	b.n	80049a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800476a:	4b66      	ldr	r3, [pc, #408]	@ (8004904 <HAL_RCC_OscConfig+0x778>)
 800476c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0ef      	beq.n	8004758 <HAL_RCC_OscConfig+0x5cc>
 8004778:	e01b      	b.n	80047b2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800477a:	4b62      	ldr	r3, [pc, #392]	@ (8004904 <HAL_RCC_OscConfig+0x778>)
 800477c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004780:	4a60      	ldr	r2, [pc, #384]	@ (8004904 <HAL_RCC_OscConfig+0x778>)
 8004782:	f023 0301 	bic.w	r3, r3, #1
 8004786:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478a:	f7fd ff3d 	bl	8002608 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004792:	f7fd ff39 	bl	8002608 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e0ff      	b.n	80049a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047a4:	4b57      	ldr	r3, [pc, #348]	@ (8004904 <HAL_RCC_OscConfig+0x778>)
 80047a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1ef      	bne.n	8004792 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80f3 	beq.w	80049a2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	f040 80c9 	bne.w	8004958 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80047c6:	4b4f      	ldr	r3, [pc, #316]	@ (8004904 <HAL_RCC_OscConfig+0x778>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f003 0203 	and.w	r2, r3, #3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d12c      	bne.n	8004834 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e4:	3b01      	subs	r3, #1
 80047e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d123      	bne.n	8004834 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d11b      	bne.n	8004834 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004806:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004808:	429a      	cmp	r2, r3
 800480a:	d113      	bne.n	8004834 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004816:	085b      	lsrs	r3, r3, #1
 8004818:	3b01      	subs	r3, #1
 800481a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800481c:	429a      	cmp	r2, r3
 800481e:	d109      	bne.n	8004834 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482a:	085b      	lsrs	r3, r3, #1
 800482c:	3b01      	subs	r3, #1
 800482e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004830:	429a      	cmp	r2, r3
 8004832:	d06b      	beq.n	800490c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	2b0c      	cmp	r3, #12
 8004838:	d062      	beq.n	8004900 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800483a:	4b32      	ldr	r3, [pc, #200]	@ (8004904 <HAL_RCC_OscConfig+0x778>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e0ac      	b.n	80049a4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800484a:	4b2e      	ldr	r3, [pc, #184]	@ (8004904 <HAL_RCC_OscConfig+0x778>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a2d      	ldr	r2, [pc, #180]	@ (8004904 <HAL_RCC_OscConfig+0x778>)
 8004850:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004854:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004856:	f7fd fed7 	bl	8002608 <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800485e:	f7fd fed3 	bl	8002608 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e099      	b.n	80049a4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004870:	4b24      	ldr	r3, [pc, #144]	@ (8004904 <HAL_RCC_OscConfig+0x778>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1f0      	bne.n	800485e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800487c:	4b21      	ldr	r3, [pc, #132]	@ (8004904 <HAL_RCC_OscConfig+0x778>)
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	4b21      	ldr	r3, [pc, #132]	@ (8004908 <HAL_RCC_OscConfig+0x77c>)
 8004882:	4013      	ands	r3, r2
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800488c:	3a01      	subs	r2, #1
 800488e:	0112      	lsls	r2, r2, #4
 8004890:	4311      	orrs	r1, r2
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004896:	0212      	lsls	r2, r2, #8
 8004898:	4311      	orrs	r1, r2
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800489e:	0852      	lsrs	r2, r2, #1
 80048a0:	3a01      	subs	r2, #1
 80048a2:	0552      	lsls	r2, r2, #21
 80048a4:	4311      	orrs	r1, r2
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80048aa:	0852      	lsrs	r2, r2, #1
 80048ac:	3a01      	subs	r2, #1
 80048ae:	0652      	lsls	r2, r2, #25
 80048b0:	4311      	orrs	r1, r2
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80048b6:	06d2      	lsls	r2, r2, #27
 80048b8:	430a      	orrs	r2, r1
 80048ba:	4912      	ldr	r1, [pc, #72]	@ (8004904 <HAL_RCC_OscConfig+0x778>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80048c0:	4b10      	ldr	r3, [pc, #64]	@ (8004904 <HAL_RCC_OscConfig+0x778>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a0f      	ldr	r2, [pc, #60]	@ (8004904 <HAL_RCC_OscConfig+0x778>)
 80048c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004904 <HAL_RCC_OscConfig+0x778>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	4a0c      	ldr	r2, [pc, #48]	@ (8004904 <HAL_RCC_OscConfig+0x778>)
 80048d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048d8:	f7fd fe96 	bl	8002608 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e0:	f7fd fe92 	bl	8002608 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e058      	b.n	80049a4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048f2:	4b04      	ldr	r3, [pc, #16]	@ (8004904 <HAL_RCC_OscConfig+0x778>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d0f0      	beq.n	80048e0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048fe:	e050      	b.n	80049a2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e04f      	b.n	80049a4 <HAL_RCC_OscConfig+0x818>
 8004904:	40021000 	.word	0x40021000
 8004908:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800490c:	4b27      	ldr	r3, [pc, #156]	@ (80049ac <HAL_RCC_OscConfig+0x820>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d144      	bne.n	80049a2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004918:	4b24      	ldr	r3, [pc, #144]	@ (80049ac <HAL_RCC_OscConfig+0x820>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a23      	ldr	r2, [pc, #140]	@ (80049ac <HAL_RCC_OscConfig+0x820>)
 800491e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004922:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004924:	4b21      	ldr	r3, [pc, #132]	@ (80049ac <HAL_RCC_OscConfig+0x820>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	4a20      	ldr	r2, [pc, #128]	@ (80049ac <HAL_RCC_OscConfig+0x820>)
 800492a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800492e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004930:	f7fd fe6a 	bl	8002608 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004938:	f7fd fe66 	bl	8002608 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e02c      	b.n	80049a4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800494a:	4b18      	ldr	r3, [pc, #96]	@ (80049ac <HAL_RCC_OscConfig+0x820>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0f0      	beq.n	8004938 <HAL_RCC_OscConfig+0x7ac>
 8004956:	e024      	b.n	80049a2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	2b0c      	cmp	r3, #12
 800495c:	d01f      	beq.n	800499e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800495e:	4b13      	ldr	r3, [pc, #76]	@ (80049ac <HAL_RCC_OscConfig+0x820>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a12      	ldr	r2, [pc, #72]	@ (80049ac <HAL_RCC_OscConfig+0x820>)
 8004964:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496a:	f7fd fe4d 	bl	8002608 <HAL_GetTick>
 800496e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004970:	e008      	b.n	8004984 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004972:	f7fd fe49 	bl	8002608 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e00f      	b.n	80049a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004984:	4b09      	ldr	r3, [pc, #36]	@ (80049ac <HAL_RCC_OscConfig+0x820>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1f0      	bne.n	8004972 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004990:	4b06      	ldr	r3, [pc, #24]	@ (80049ac <HAL_RCC_OscConfig+0x820>)
 8004992:	68da      	ldr	r2, [r3, #12]
 8004994:	4905      	ldr	r1, [pc, #20]	@ (80049ac <HAL_RCC_OscConfig+0x820>)
 8004996:	4b06      	ldr	r3, [pc, #24]	@ (80049b0 <HAL_RCC_OscConfig+0x824>)
 8004998:	4013      	ands	r3, r2
 800499a:	60cb      	str	r3, [r1, #12]
 800499c:	e001      	b.n	80049a2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3720      	adds	r7, #32
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40021000 	.word	0x40021000
 80049b0:	feeefffc 	.word	0xfeeefffc

080049b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e0e7      	b.n	8004b98 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049c8:	4b75      	ldr	r3, [pc, #468]	@ (8004ba0 <HAL_RCC_ClockConfig+0x1ec>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d910      	bls.n	80049f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d6:	4b72      	ldr	r3, [pc, #456]	@ (8004ba0 <HAL_RCC_ClockConfig+0x1ec>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f023 0207 	bic.w	r2, r3, #7
 80049de:	4970      	ldr	r1, [pc, #448]	@ (8004ba0 <HAL_RCC_ClockConfig+0x1ec>)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e6:	4b6e      	ldr	r3, [pc, #440]	@ (8004ba0 <HAL_RCC_ClockConfig+0x1ec>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d001      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e0cf      	b.n	8004b98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d010      	beq.n	8004a26 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	4b66      	ldr	r3, [pc, #408]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d908      	bls.n	8004a26 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a14:	4b63      	ldr	r3, [pc, #396]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4960      	ldr	r1, [pc, #384]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d04c      	beq.n	8004acc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d107      	bne.n	8004a4a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a3a:	4b5a      	ldr	r3, [pc, #360]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d121      	bne.n	8004a8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e0a6      	b.n	8004b98 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d107      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a52:	4b54      	ldr	r3, [pc, #336]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d115      	bne.n	8004a8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e09a      	b.n	8004b98 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d107      	bne.n	8004a7a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a6a:	4b4e      	ldr	r3, [pc, #312]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d109      	bne.n	8004a8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e08e      	b.n	8004b98 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a7a:	4b4a      	ldr	r3, [pc, #296]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e086      	b.n	8004b98 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a8a:	4b46      	ldr	r3, [pc, #280]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f023 0203 	bic.w	r2, r3, #3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	4943      	ldr	r1, [pc, #268]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a9c:	f7fd fdb4 	bl	8002608 <HAL_GetTick>
 8004aa0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa2:	e00a      	b.n	8004aba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa4:	f7fd fdb0 	bl	8002608 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e06e      	b.n	8004b98 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aba:	4b3a      	ldr	r3, [pc, #232]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 020c 	and.w	r2, r3, #12
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d1eb      	bne.n	8004aa4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d010      	beq.n	8004afa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	4b31      	ldr	r3, [pc, #196]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d208      	bcs.n	8004afa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ae8:	4b2e      	ldr	r3, [pc, #184]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	492b      	ldr	r1, [pc, #172]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004afa:	4b29      	ldr	r3, [pc, #164]	@ (8004ba0 <HAL_RCC_ClockConfig+0x1ec>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d210      	bcs.n	8004b2a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b08:	4b25      	ldr	r3, [pc, #148]	@ (8004ba0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f023 0207 	bic.w	r2, r3, #7
 8004b10:	4923      	ldr	r1, [pc, #140]	@ (8004ba0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b18:	4b21      	ldr	r3, [pc, #132]	@ (8004ba0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d001      	beq.n	8004b2a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e036      	b.n	8004b98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d008      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b36:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	4918      	ldr	r1, [pc, #96]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d009      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b54:	4b13      	ldr	r3, [pc, #76]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	4910      	ldr	r1, [pc, #64]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b68:	f000 f824 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	091b      	lsrs	r3, r3, #4
 8004b74:	f003 030f 	and.w	r3, r3, #15
 8004b78:	490b      	ldr	r1, [pc, #44]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1f4>)
 8004b7a:	5ccb      	ldrb	r3, [r1, r3]
 8004b7c:	f003 031f 	and.w	r3, r3, #31
 8004b80:	fa22 f303 	lsr.w	r3, r2, r3
 8004b84:	4a09      	ldr	r2, [pc, #36]	@ (8004bac <HAL_RCC_ClockConfig+0x1f8>)
 8004b86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b88:	4b09      	ldr	r3, [pc, #36]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1fc>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fd fceb 	bl	8002568 <HAL_InitTick>
 8004b92:	4603      	mov	r3, r0
 8004b94:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b96:	7afb      	ldrb	r3, [r7, #11]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40022000 	.word	0x40022000
 8004ba4:	40021000 	.word	0x40021000
 8004ba8:	08007734 	.word	0x08007734
 8004bac:	20000034 	.word	0x20000034
 8004bb0:	20000038 	.word	0x20000038

08004bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b089      	sub	sp, #36	@ 0x24
 8004bb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bc2:	4b3e      	ldr	r3, [pc, #248]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 030c 	and.w	r3, r3, #12
 8004bca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bcc:	4b3b      	ldr	r3, [pc, #236]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f003 0303 	and.w	r3, r3, #3
 8004bd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d005      	beq.n	8004be8 <HAL_RCC_GetSysClockFreq+0x34>
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	2b0c      	cmp	r3, #12
 8004be0:	d121      	bne.n	8004c26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d11e      	bne.n	8004c26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004be8:	4b34      	ldr	r3, [pc, #208]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d107      	bne.n	8004c04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004bf4:	4b31      	ldr	r3, [pc, #196]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bfa:	0a1b      	lsrs	r3, r3, #8
 8004bfc:	f003 030f 	and.w	r3, r3, #15
 8004c00:	61fb      	str	r3, [r7, #28]
 8004c02:	e005      	b.n	8004c10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c04:	4b2d      	ldr	r3, [pc, #180]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	091b      	lsrs	r3, r3, #4
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c10:	4a2b      	ldr	r2, [pc, #172]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10d      	bne.n	8004c3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c24:	e00a      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d102      	bne.n	8004c32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c2c:	4b25      	ldr	r3, [pc, #148]	@ (8004cc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c2e:	61bb      	str	r3, [r7, #24]
 8004c30:	e004      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d101      	bne.n	8004c3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c38:	4b23      	ldr	r3, [pc, #140]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	2b0c      	cmp	r3, #12
 8004c40:	d134      	bne.n	8004cac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c42:	4b1e      	ldr	r3, [pc, #120]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d003      	beq.n	8004c5a <HAL_RCC_GetSysClockFreq+0xa6>
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b03      	cmp	r3, #3
 8004c56:	d003      	beq.n	8004c60 <HAL_RCC_GetSysClockFreq+0xac>
 8004c58:	e005      	b.n	8004c66 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8004cc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c5c:	617b      	str	r3, [r7, #20]
      break;
 8004c5e:	e005      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004c60:	4b19      	ldr	r3, [pc, #100]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c62:	617b      	str	r3, [r7, #20]
      break;
 8004c64:	e002      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	617b      	str	r3, [r7, #20]
      break;
 8004c6a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c6c:	4b13      	ldr	r3, [pc, #76]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	091b      	lsrs	r3, r3, #4
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	3301      	adds	r3, #1
 8004c78:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c7a:	4b10      	ldr	r3, [pc, #64]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	0a1b      	lsrs	r3, r3, #8
 8004c80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	fb03 f202 	mul.w	r2, r3, r2
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c90:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c92:	4b0a      	ldr	r3, [pc, #40]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	0e5b      	lsrs	r3, r3, #25
 8004c98:	f003 0303 	and.w	r3, r3, #3
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004caa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004cac:	69bb      	ldr	r3, [r7, #24]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3724      	adds	r7, #36	@ 0x24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	0800774c 	.word	0x0800774c
 8004cc4:	00f42400 	.word	0x00f42400
 8004cc8:	007a1200 	.word	0x007a1200

08004ccc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cd0:	4b03      	ldr	r3, [pc, #12]	@ (8004ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	20000034 	.word	0x20000034

08004ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ce8:	f7ff fff0 	bl	8004ccc <HAL_RCC_GetHCLKFreq>
 8004cec:	4602      	mov	r2, r0
 8004cee:	4b06      	ldr	r3, [pc, #24]	@ (8004d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	0a1b      	lsrs	r3, r3, #8
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	4904      	ldr	r1, [pc, #16]	@ (8004d0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cfa:	5ccb      	ldrb	r3, [r1, r3]
 8004cfc:	f003 031f 	and.w	r3, r3, #31
 8004d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	08007744 	.word	0x08007744

08004d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d14:	f7ff ffda 	bl	8004ccc <HAL_RCC_GetHCLKFreq>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	4b06      	ldr	r3, [pc, #24]	@ (8004d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	0adb      	lsrs	r3, r3, #11
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	4904      	ldr	r1, [pc, #16]	@ (8004d38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d26:	5ccb      	ldrb	r3, [r1, r3]
 8004d28:	f003 031f 	and.w	r3, r3, #31
 8004d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40021000 	.word	0x40021000
 8004d38:	08007744 	.word	0x08007744

08004d3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d44:	2300      	movs	r3, #0
 8004d46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d48:	4b2a      	ldr	r3, [pc, #168]	@ (8004df4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d54:	f7ff f9b6 	bl	80040c4 <HAL_PWREx_GetVoltageRange>
 8004d58:	6178      	str	r0, [r7, #20]
 8004d5a:	e014      	b.n	8004d86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d5c:	4b25      	ldr	r3, [pc, #148]	@ (8004df4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d60:	4a24      	ldr	r2, [pc, #144]	@ (8004df4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d66:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d68:	4b22      	ldr	r3, [pc, #136]	@ (8004df4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d74:	f7ff f9a6 	bl	80040c4 <HAL_PWREx_GetVoltageRange>
 8004d78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8004df4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d7e:	4a1d      	ldr	r2, [pc, #116]	@ (8004df4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d84:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d8c:	d10b      	bne.n	8004da6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b80      	cmp	r3, #128	@ 0x80
 8004d92:	d919      	bls.n	8004dc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2ba0      	cmp	r3, #160	@ 0xa0
 8004d98:	d902      	bls.n	8004da0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	613b      	str	r3, [r7, #16]
 8004d9e:	e013      	b.n	8004dc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004da0:	2301      	movs	r3, #1
 8004da2:	613b      	str	r3, [r7, #16]
 8004da4:	e010      	b.n	8004dc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b80      	cmp	r3, #128	@ 0x80
 8004daa:	d902      	bls.n	8004db2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004dac:	2303      	movs	r3, #3
 8004dae:	613b      	str	r3, [r7, #16]
 8004db0:	e00a      	b.n	8004dc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b80      	cmp	r3, #128	@ 0x80
 8004db6:	d102      	bne.n	8004dbe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004db8:	2302      	movs	r3, #2
 8004dba:	613b      	str	r3, [r7, #16]
 8004dbc:	e004      	b.n	8004dc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b70      	cmp	r3, #112	@ 0x70
 8004dc2:	d101      	bne.n	8004dc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004df8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f023 0207 	bic.w	r2, r3, #7
 8004dd0:	4909      	ldr	r1, [pc, #36]	@ (8004df8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004dd8:	4b07      	ldr	r3, [pc, #28]	@ (8004df8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d001      	beq.n	8004dea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e000      	b.n	8004dec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40021000 	.word	0x40021000
 8004df8:	40022000 	.word	0x40022000

08004dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e04:	2300      	movs	r3, #0
 8004e06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e08:	2300      	movs	r3, #0
 8004e0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d031      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e1c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e20:	d01a      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004e22:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e26:	d814      	bhi.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d009      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e30:	d10f      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004e32:	4b5d      	ldr	r3, [pc, #372]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	4a5c      	ldr	r2, [pc, #368]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e3c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e3e:	e00c      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3304      	adds	r3, #4
 8004e44:	2100      	movs	r1, #0
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 f9de 	bl	8005208 <RCCEx_PLLSAI1_Config>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e50:	e003      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	74fb      	strb	r3, [r7, #19]
      break;
 8004e56:	e000      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004e58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e5a:	7cfb      	ldrb	r3, [r7, #19]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10b      	bne.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e60:	4b51      	ldr	r3, [pc, #324]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e66:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e6e:	494e      	ldr	r1, [pc, #312]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004e76:	e001      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e78:	7cfb      	ldrb	r3, [r7, #19]
 8004e7a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 809e 	beq.w	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e8e:	4b46      	ldr	r3, [pc, #280]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e000      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00d      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea4:	4b40      	ldr	r3, [pc, #256]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ea8:	4a3f      	ldr	r2, [pc, #252]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004eaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eae:	6593      	str	r3, [r2, #88]	@ 0x58
 8004eb0:	4b3d      	ldr	r3, [pc, #244]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eb8:	60bb      	str	r3, [r7, #8]
 8004eba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ec0:	4b3a      	ldr	r3, [pc, #232]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a39      	ldr	r2, [pc, #228]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004ec6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ecc:	f7fd fb9c 	bl	8002608 <HAL_GetTick>
 8004ed0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ed2:	e009      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ed4:	f7fd fb98 	bl	8002608 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d902      	bls.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	74fb      	strb	r3, [r7, #19]
        break;
 8004ee6:	e005      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ee8:	4b30      	ldr	r3, [pc, #192]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0ef      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004ef4:	7cfb      	ldrb	r3, [r7, #19]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d15a      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004efa:	4b2b      	ldr	r3, [pc, #172]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f04:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d01e      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d019      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f16:	4b24      	ldr	r3, [pc, #144]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f20:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f22:	4b21      	ldr	r3, [pc, #132]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f28:	4a1f      	ldr	r2, [pc, #124]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f32:	4b1d      	ldr	r3, [pc, #116]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f38:	4a1b      	ldr	r2, [pc, #108]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f42:	4a19      	ldr	r2, [pc, #100]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d016      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f54:	f7fd fb58 	bl	8002608 <HAL_GetTick>
 8004f58:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f5a:	e00b      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f5c:	f7fd fb54 	bl	8002608 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d902      	bls.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	74fb      	strb	r3, [r7, #19]
            break;
 8004f72:	e006      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f74:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0ec      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004f82:	7cfb      	ldrb	r3, [r7, #19]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10b      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f88:	4b07      	ldr	r3, [pc, #28]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f8e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f96:	4904      	ldr	r1, [pc, #16]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f9e:	e009      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fa0:	7cfb      	ldrb	r3, [r7, #19]
 8004fa2:	74bb      	strb	r3, [r7, #18]
 8004fa4:	e006      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004fa6:	bf00      	nop
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb0:	7cfb      	ldrb	r3, [r7, #19]
 8004fb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fb4:	7c7b      	ldrb	r3, [r7, #17]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d105      	bne.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fba:	4b8a      	ldr	r3, [pc, #552]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fbe:	4a89      	ldr	r2, [pc, #548]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fc4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fd2:	4b84      	ldr	r3, [pc, #528]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd8:	f023 0203 	bic.w	r2, r3, #3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	4980      	ldr	r1, [pc, #512]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ff4:	4b7b      	ldr	r3, [pc, #492]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ffa:	f023 020c 	bic.w	r2, r3, #12
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005002:	4978      	ldr	r1, [pc, #480]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005016:	4b73      	ldr	r3, [pc, #460]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800501c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005024:	496f      	ldr	r1, [pc, #444]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005026:	4313      	orrs	r3, r2
 8005028:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005038:	4b6a      	ldr	r3, [pc, #424]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800503a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800503e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005046:	4967      	ldr	r1, [pc, #412]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005048:	4313      	orrs	r3, r2
 800504a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800505a:	4b62      	ldr	r3, [pc, #392]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800505c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005060:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005068:	495e      	ldr	r1, [pc, #376]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800506a:	4313      	orrs	r3, r2
 800506c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800507c:	4b59      	ldr	r3, [pc, #356]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005082:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508a:	4956      	ldr	r1, [pc, #344]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800509e:	4b51      	ldr	r3, [pc, #324]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ac:	494d      	ldr	r1, [pc, #308]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d028      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050c0:	4b48      	ldr	r3, [pc, #288]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ce:	4945      	ldr	r1, [pc, #276]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050de:	d106      	bne.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050e0:	4b40      	ldr	r3, [pc, #256]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	4a3f      	ldr	r2, [pc, #252]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050ea:	60d3      	str	r3, [r2, #12]
 80050ec:	e011      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050f6:	d10c      	bne.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3304      	adds	r3, #4
 80050fc:	2101      	movs	r1, #1
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 f882 	bl	8005208 <RCCEx_PLLSAI1_Config>
 8005104:	4603      	mov	r3, r0
 8005106:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005108:	7cfb      	ldrb	r3, [r7, #19]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800510e:	7cfb      	ldrb	r3, [r7, #19]
 8005110:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d028      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800511e:	4b31      	ldr	r3, [pc, #196]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005124:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800512c:	492d      	ldr	r1, [pc, #180]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005138:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800513c:	d106      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800513e:	4b29      	ldr	r3, [pc, #164]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	4a28      	ldr	r2, [pc, #160]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005144:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005148:	60d3      	str	r3, [r2, #12]
 800514a:	e011      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005150:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005154:	d10c      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	3304      	adds	r3, #4
 800515a:	2101      	movs	r1, #1
 800515c:	4618      	mov	r0, r3
 800515e:	f000 f853 	bl	8005208 <RCCEx_PLLSAI1_Config>
 8005162:	4603      	mov	r3, r0
 8005164:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005166:	7cfb      	ldrb	r3, [r7, #19]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800516c:	7cfb      	ldrb	r3, [r7, #19]
 800516e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d01c      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800517c:	4b19      	ldr	r3, [pc, #100]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800517e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005182:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800518a:	4916      	ldr	r1, [pc, #88]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800518c:	4313      	orrs	r3, r2
 800518e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005196:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800519a:	d10c      	bne.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3304      	adds	r3, #4
 80051a0:	2102      	movs	r1, #2
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 f830 	bl	8005208 <RCCEx_PLLSAI1_Config>
 80051a8:	4603      	mov	r3, r0
 80051aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051ac:	7cfb      	ldrb	r3, [r7, #19]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80051b2:	7cfb      	ldrb	r3, [r7, #19]
 80051b4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051c2:	4b08      	ldr	r3, [pc, #32]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051d0:	4904      	ldr	r1, [pc, #16]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80051d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3718      	adds	r7, #24
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	40021000 	.word	0x40021000

080051e8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80051ec:	4b05      	ldr	r3, [pc, #20]	@ (8005204 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a04      	ldr	r2, [pc, #16]	@ (8005204 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80051f2:	f043 0304 	orr.w	r3, r3, #4
 80051f6:	6013      	str	r3, [r2, #0]
}
 80051f8:	bf00      	nop
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	40021000 	.word	0x40021000

08005208 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005216:	4b74      	ldr	r3, [pc, #464]	@ (80053e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d018      	beq.n	8005254 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005222:	4b71      	ldr	r3, [pc, #452]	@ (80053e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f003 0203 	and.w	r2, r3, #3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	429a      	cmp	r2, r3
 8005230:	d10d      	bne.n	800524e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
       ||
 8005236:	2b00      	cmp	r3, #0
 8005238:	d009      	beq.n	800524e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800523a:	4b6b      	ldr	r3, [pc, #428]	@ (80053e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	091b      	lsrs	r3, r3, #4
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
       ||
 800524a:	429a      	cmp	r2, r3
 800524c:	d047      	beq.n	80052de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	73fb      	strb	r3, [r7, #15]
 8005252:	e044      	b.n	80052de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b03      	cmp	r3, #3
 800525a:	d018      	beq.n	800528e <RCCEx_PLLSAI1_Config+0x86>
 800525c:	2b03      	cmp	r3, #3
 800525e:	d825      	bhi.n	80052ac <RCCEx_PLLSAI1_Config+0xa4>
 8005260:	2b01      	cmp	r3, #1
 8005262:	d002      	beq.n	800526a <RCCEx_PLLSAI1_Config+0x62>
 8005264:	2b02      	cmp	r3, #2
 8005266:	d009      	beq.n	800527c <RCCEx_PLLSAI1_Config+0x74>
 8005268:	e020      	b.n	80052ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800526a:	4b5f      	ldr	r3, [pc, #380]	@ (80053e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d11d      	bne.n	80052b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800527a:	e01a      	b.n	80052b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800527c:	4b5a      	ldr	r3, [pc, #360]	@ (80053e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005284:	2b00      	cmp	r3, #0
 8005286:	d116      	bne.n	80052b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800528c:	e013      	b.n	80052b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800528e:	4b56      	ldr	r3, [pc, #344]	@ (80053e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10f      	bne.n	80052ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800529a:	4b53      	ldr	r3, [pc, #332]	@ (80053e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d109      	bne.n	80052ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052aa:	e006      	b.n	80052ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	73fb      	strb	r3, [r7, #15]
      break;
 80052b0:	e004      	b.n	80052bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052b2:	bf00      	nop
 80052b4:	e002      	b.n	80052bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052b6:	bf00      	nop
 80052b8:	e000      	b.n	80052bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10d      	bne.n	80052de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052c2:	4b49      	ldr	r3, [pc, #292]	@ (80053e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6819      	ldr	r1, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	430b      	orrs	r3, r1
 80052d8:	4943      	ldr	r1, [pc, #268]	@ (80053e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052de:	7bfb      	ldrb	r3, [r7, #15]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d17c      	bne.n	80053de <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80052e4:	4b40      	ldr	r3, [pc, #256]	@ (80053e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a3f      	ldr	r2, [pc, #252]	@ (80053e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052f0:	f7fd f98a 	bl	8002608 <HAL_GetTick>
 80052f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052f6:	e009      	b.n	800530c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052f8:	f7fd f986 	bl	8002608 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d902      	bls.n	800530c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	73fb      	strb	r3, [r7, #15]
        break;
 800530a:	e005      	b.n	8005318 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800530c:	4b36      	ldr	r3, [pc, #216]	@ (80053e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1ef      	bne.n	80052f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005318:	7bfb      	ldrb	r3, [r7, #15]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d15f      	bne.n	80053de <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d110      	bne.n	8005346 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005324:	4b30      	ldr	r3, [pc, #192]	@ (80053e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800532c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6892      	ldr	r2, [r2, #8]
 8005334:	0211      	lsls	r1, r2, #8
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	68d2      	ldr	r2, [r2, #12]
 800533a:	06d2      	lsls	r2, r2, #27
 800533c:	430a      	orrs	r2, r1
 800533e:	492a      	ldr	r1, [pc, #168]	@ (80053e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005340:	4313      	orrs	r3, r2
 8005342:	610b      	str	r3, [r1, #16]
 8005344:	e027      	b.n	8005396 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d112      	bne.n	8005372 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800534c:	4b26      	ldr	r3, [pc, #152]	@ (80053e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005354:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6892      	ldr	r2, [r2, #8]
 800535c:	0211      	lsls	r1, r2, #8
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6912      	ldr	r2, [r2, #16]
 8005362:	0852      	lsrs	r2, r2, #1
 8005364:	3a01      	subs	r2, #1
 8005366:	0552      	lsls	r2, r2, #21
 8005368:	430a      	orrs	r2, r1
 800536a:	491f      	ldr	r1, [pc, #124]	@ (80053e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800536c:	4313      	orrs	r3, r2
 800536e:	610b      	str	r3, [r1, #16]
 8005370:	e011      	b.n	8005396 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005372:	4b1d      	ldr	r3, [pc, #116]	@ (80053e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800537a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6892      	ldr	r2, [r2, #8]
 8005382:	0211      	lsls	r1, r2, #8
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	6952      	ldr	r2, [r2, #20]
 8005388:	0852      	lsrs	r2, r2, #1
 800538a:	3a01      	subs	r2, #1
 800538c:	0652      	lsls	r2, r2, #25
 800538e:	430a      	orrs	r2, r1
 8005390:	4915      	ldr	r1, [pc, #84]	@ (80053e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005392:	4313      	orrs	r3, r2
 8005394:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005396:	4b14      	ldr	r3, [pc, #80]	@ (80053e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a13      	ldr	r2, [pc, #76]	@ (80053e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800539c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80053a0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a2:	f7fd f931 	bl	8002608 <HAL_GetTick>
 80053a6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053a8:	e009      	b.n	80053be <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053aa:	f7fd f92d 	bl	8002608 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d902      	bls.n	80053be <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	73fb      	strb	r3, [r7, #15]
          break;
 80053bc:	e005      	b.n	80053ca <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053be:	4b0a      	ldr	r3, [pc, #40]	@ (80053e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d0ef      	beq.n	80053aa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80053ca:	7bfb      	ldrb	r3, [r7, #15]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d106      	bne.n	80053de <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80053d0:	4b05      	ldr	r3, [pc, #20]	@ (80053e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	4903      	ldr	r1, [pc, #12]	@ (80053e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80053de:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	40021000 	.word	0x40021000

080053ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e049      	b.n	8005492 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d106      	bne.n	8005418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f7fc ff74 	bl	8002300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3304      	adds	r3, #4
 8005428:	4619      	mov	r1, r3
 800542a:	4610      	mov	r0, r2
 800542c:	f000 fa74 	bl	8005918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b082      	sub	sp, #8
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e049      	b.n	8005540 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d106      	bne.n	80054c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f841 	bl	8005548 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2202      	movs	r2, #2
 80054ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	3304      	adds	r3, #4
 80054d6:	4619      	mov	r1, r3
 80054d8:	4610      	mov	r0, r2
 80054da:	f000 fa1d 	bl	8005918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005576:	2302      	movs	r3, #2
 8005578:	e0ff      	b.n	800577a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b14      	cmp	r3, #20
 8005586:	f200 80f0 	bhi.w	800576a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800558a:	a201      	add	r2, pc, #4	@ (adr r2, 8005590 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800558c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005590:	080055e5 	.word	0x080055e5
 8005594:	0800576b 	.word	0x0800576b
 8005598:	0800576b 	.word	0x0800576b
 800559c:	0800576b 	.word	0x0800576b
 80055a0:	08005625 	.word	0x08005625
 80055a4:	0800576b 	.word	0x0800576b
 80055a8:	0800576b 	.word	0x0800576b
 80055ac:	0800576b 	.word	0x0800576b
 80055b0:	08005667 	.word	0x08005667
 80055b4:	0800576b 	.word	0x0800576b
 80055b8:	0800576b 	.word	0x0800576b
 80055bc:	0800576b 	.word	0x0800576b
 80055c0:	080056a7 	.word	0x080056a7
 80055c4:	0800576b 	.word	0x0800576b
 80055c8:	0800576b 	.word	0x0800576b
 80055cc:	0800576b 	.word	0x0800576b
 80055d0:	080056e9 	.word	0x080056e9
 80055d4:	0800576b 	.word	0x0800576b
 80055d8:	0800576b 	.word	0x0800576b
 80055dc:	0800576b 	.word	0x0800576b
 80055e0:	08005729 	.word	0x08005729
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68b9      	ldr	r1, [r7, #8]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fa04 	bl	80059f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699a      	ldr	r2, [r3, #24]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0208 	orr.w	r2, r2, #8
 80055fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699a      	ldr	r2, [r3, #24]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0204 	bic.w	r2, r2, #4
 800560e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6999      	ldr	r1, [r3, #24]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	691a      	ldr	r2, [r3, #16]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	619a      	str	r2, [r3, #24]
      break;
 8005622:	e0a5      	b.n	8005770 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68b9      	ldr	r1, [r7, #8]
 800562a:	4618      	mov	r0, r3
 800562c:	f000 fa60 	bl	8005af0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699a      	ldr	r2, [r3, #24]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800563e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	699a      	ldr	r2, [r3, #24]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800564e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6999      	ldr	r1, [r3, #24]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	021a      	lsls	r2, r3, #8
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	619a      	str	r2, [r3, #24]
      break;
 8005664:	e084      	b.n	8005770 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68b9      	ldr	r1, [r7, #8]
 800566c:	4618      	mov	r0, r3
 800566e:	f000 fab9 	bl	8005be4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69da      	ldr	r2, [r3, #28]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f042 0208 	orr.w	r2, r2, #8
 8005680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69da      	ldr	r2, [r3, #28]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0204 	bic.w	r2, r2, #4
 8005690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69d9      	ldr	r1, [r3, #28]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	61da      	str	r2, [r3, #28]
      break;
 80056a4:	e064      	b.n	8005770 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68b9      	ldr	r1, [r7, #8]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 fb11 	bl	8005cd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	69da      	ldr	r2, [r3, #28]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	69da      	ldr	r2, [r3, #28]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	69d9      	ldr	r1, [r3, #28]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	021a      	lsls	r2, r3, #8
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	61da      	str	r2, [r3, #28]
      break;
 80056e6:	e043      	b.n	8005770 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68b9      	ldr	r1, [r7, #8]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 fb4e 	bl	8005d90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0208 	orr.w	r2, r2, #8
 8005702:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 0204 	bic.w	r2, r2, #4
 8005712:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	691a      	ldr	r2, [r3, #16]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005726:	e023      	b.n	8005770 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68b9      	ldr	r1, [r7, #8]
 800572e:	4618      	mov	r0, r3
 8005730:	f000 fb86 	bl	8005e40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005742:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005752:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	021a      	lsls	r2, r3, #8
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005768:	e002      	b.n	8005770 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	75fb      	strb	r3, [r7, #23]
      break;
 800576e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005778:	7dfb      	ldrb	r3, [r7, #23]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop

08005784 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <HAL_TIM_ConfigClockSource+0x1c>
 800579c:	2302      	movs	r3, #2
 800579e:	e0b6      	b.n	800590e <HAL_TIM_ConfigClockSource+0x18a>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80057c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057dc:	d03e      	beq.n	800585c <HAL_TIM_ConfigClockSource+0xd8>
 80057de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057e2:	f200 8087 	bhi.w	80058f4 <HAL_TIM_ConfigClockSource+0x170>
 80057e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ea:	f000 8086 	beq.w	80058fa <HAL_TIM_ConfigClockSource+0x176>
 80057ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057f2:	d87f      	bhi.n	80058f4 <HAL_TIM_ConfigClockSource+0x170>
 80057f4:	2b70      	cmp	r3, #112	@ 0x70
 80057f6:	d01a      	beq.n	800582e <HAL_TIM_ConfigClockSource+0xaa>
 80057f8:	2b70      	cmp	r3, #112	@ 0x70
 80057fa:	d87b      	bhi.n	80058f4 <HAL_TIM_ConfigClockSource+0x170>
 80057fc:	2b60      	cmp	r3, #96	@ 0x60
 80057fe:	d050      	beq.n	80058a2 <HAL_TIM_ConfigClockSource+0x11e>
 8005800:	2b60      	cmp	r3, #96	@ 0x60
 8005802:	d877      	bhi.n	80058f4 <HAL_TIM_ConfigClockSource+0x170>
 8005804:	2b50      	cmp	r3, #80	@ 0x50
 8005806:	d03c      	beq.n	8005882 <HAL_TIM_ConfigClockSource+0xfe>
 8005808:	2b50      	cmp	r3, #80	@ 0x50
 800580a:	d873      	bhi.n	80058f4 <HAL_TIM_ConfigClockSource+0x170>
 800580c:	2b40      	cmp	r3, #64	@ 0x40
 800580e:	d058      	beq.n	80058c2 <HAL_TIM_ConfigClockSource+0x13e>
 8005810:	2b40      	cmp	r3, #64	@ 0x40
 8005812:	d86f      	bhi.n	80058f4 <HAL_TIM_ConfigClockSource+0x170>
 8005814:	2b30      	cmp	r3, #48	@ 0x30
 8005816:	d064      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x15e>
 8005818:	2b30      	cmp	r3, #48	@ 0x30
 800581a:	d86b      	bhi.n	80058f4 <HAL_TIM_ConfigClockSource+0x170>
 800581c:	2b20      	cmp	r3, #32
 800581e:	d060      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x15e>
 8005820:	2b20      	cmp	r3, #32
 8005822:	d867      	bhi.n	80058f4 <HAL_TIM_ConfigClockSource+0x170>
 8005824:	2b00      	cmp	r3, #0
 8005826:	d05c      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x15e>
 8005828:	2b10      	cmp	r3, #16
 800582a:	d05a      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x15e>
 800582c:	e062      	b.n	80058f4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800583e:	f000 fbd3 	bl	8005fe8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005850:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	609a      	str	r2, [r3, #8]
      break;
 800585a:	e04f      	b.n	80058fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800586c:	f000 fbbc 	bl	8005fe8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689a      	ldr	r2, [r3, #8]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800587e:	609a      	str	r2, [r3, #8]
      break;
 8005880:	e03c      	b.n	80058fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800588e:	461a      	mov	r2, r3
 8005890:	f000 fb30 	bl	8005ef4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2150      	movs	r1, #80	@ 0x50
 800589a:	4618      	mov	r0, r3
 800589c:	f000 fb89 	bl	8005fb2 <TIM_ITRx_SetConfig>
      break;
 80058a0:	e02c      	b.n	80058fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058ae:	461a      	mov	r2, r3
 80058b0:	f000 fb4f 	bl	8005f52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2160      	movs	r1, #96	@ 0x60
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 fb79 	bl	8005fb2 <TIM_ITRx_SetConfig>
      break;
 80058c0:	e01c      	b.n	80058fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ce:	461a      	mov	r2, r3
 80058d0:	f000 fb10 	bl	8005ef4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2140      	movs	r1, #64	@ 0x40
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fb69 	bl	8005fb2 <TIM_ITRx_SetConfig>
      break;
 80058e0:	e00c      	b.n	80058fc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4619      	mov	r1, r3
 80058ec:	4610      	mov	r0, r2
 80058ee:	f000 fb60 	bl	8005fb2 <TIM_ITRx_SetConfig>
      break;
 80058f2:	e003      	b.n	80058fc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	73fb      	strb	r3, [r7, #15]
      break;
 80058f8:	e000      	b.n	80058fc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80058fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800590c:	7bfb      	ldrb	r3, [r7, #15]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
	...

08005918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a30      	ldr	r2, [pc, #192]	@ (80059ec <TIM_Base_SetConfig+0xd4>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d003      	beq.n	8005938 <TIM_Base_SetConfig+0x20>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005936:	d108      	bne.n	800594a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800593e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a27      	ldr	r2, [pc, #156]	@ (80059ec <TIM_Base_SetConfig+0xd4>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00b      	beq.n	800596a <TIM_Base_SetConfig+0x52>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005958:	d007      	beq.n	800596a <TIM_Base_SetConfig+0x52>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a24      	ldr	r2, [pc, #144]	@ (80059f0 <TIM_Base_SetConfig+0xd8>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d003      	beq.n	800596a <TIM_Base_SetConfig+0x52>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a23      	ldr	r2, [pc, #140]	@ (80059f4 <TIM_Base_SetConfig+0xdc>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d108      	bne.n	800597c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4313      	orrs	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a12      	ldr	r2, [pc, #72]	@ (80059ec <TIM_Base_SetConfig+0xd4>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d007      	beq.n	80059b8 <TIM_Base_SetConfig+0xa0>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a11      	ldr	r2, [pc, #68]	@ (80059f0 <TIM_Base_SetConfig+0xd8>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d003      	beq.n	80059b8 <TIM_Base_SetConfig+0xa0>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a10      	ldr	r2, [pc, #64]	@ (80059f4 <TIM_Base_SetConfig+0xdc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d103      	bne.n	80059c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	691a      	ldr	r2, [r3, #16]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d105      	bne.n	80059de <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f023 0201 	bic.w	r2, r3, #1
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	611a      	str	r2, [r3, #16]
  }
}
 80059de:	bf00      	nop
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	40012c00 	.word	0x40012c00
 80059f0:	40014000 	.word	0x40014000
 80059f4:	40014400 	.word	0x40014400

080059f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	f023 0201 	bic.w	r2, r3, #1
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0303 	bic.w	r3, r3, #3
 8005a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f023 0302 	bic.w	r3, r3, #2
 8005a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a24      	ldr	r2, [pc, #144]	@ (8005ae4 <TIM_OC1_SetConfig+0xec>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d007      	beq.n	8005a68 <TIM_OC1_SetConfig+0x70>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a23      	ldr	r2, [pc, #140]	@ (8005ae8 <TIM_OC1_SetConfig+0xf0>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d003      	beq.n	8005a68 <TIM_OC1_SetConfig+0x70>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a22      	ldr	r2, [pc, #136]	@ (8005aec <TIM_OC1_SetConfig+0xf4>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d10c      	bne.n	8005a82 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f023 0308 	bic.w	r3, r3, #8
 8005a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f023 0304 	bic.w	r3, r3, #4
 8005a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a17      	ldr	r2, [pc, #92]	@ (8005ae4 <TIM_OC1_SetConfig+0xec>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d007      	beq.n	8005a9a <TIM_OC1_SetConfig+0xa2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a16      	ldr	r2, [pc, #88]	@ (8005ae8 <TIM_OC1_SetConfig+0xf0>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d003      	beq.n	8005a9a <TIM_OC1_SetConfig+0xa2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a15      	ldr	r2, [pc, #84]	@ (8005aec <TIM_OC1_SetConfig+0xf4>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d111      	bne.n	8005abe <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	621a      	str	r2, [r3, #32]
}
 8005ad8:	bf00      	nop
 8005ada:	371c      	adds	r7, #28
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	40012c00 	.word	0x40012c00
 8005ae8:	40014000 	.word	0x40014000
 8005aec:	40014400 	.word	0x40014400

08005af0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	f023 0210 	bic.w	r2, r3, #16
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	021b      	lsls	r3, r3, #8
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f023 0320 	bic.w	r3, r3, #32
 8005b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a22      	ldr	r2, [pc, #136]	@ (8005bd8 <TIM_OC2_SetConfig+0xe8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d10d      	bne.n	8005b70 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	011b      	lsls	r3, r3, #4
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a19      	ldr	r2, [pc, #100]	@ (8005bd8 <TIM_OC2_SetConfig+0xe8>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d007      	beq.n	8005b88 <TIM_OC2_SetConfig+0x98>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a18      	ldr	r2, [pc, #96]	@ (8005bdc <TIM_OC2_SetConfig+0xec>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d003      	beq.n	8005b88 <TIM_OC2_SetConfig+0x98>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a17      	ldr	r2, [pc, #92]	@ (8005be0 <TIM_OC2_SetConfig+0xf0>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d113      	bne.n	8005bb0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	621a      	str	r2, [r3, #32]
}
 8005bca:	bf00      	nop
 8005bcc:	371c      	adds	r7, #28
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	40012c00 	.word	0x40012c00
 8005bdc:	40014000 	.word	0x40014000
 8005be0:	40014400 	.word	0x40014400

08005be4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 0303 	bic.w	r3, r3, #3
 8005c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	021b      	lsls	r3, r3, #8
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a21      	ldr	r2, [pc, #132]	@ (8005cc8 <TIM_OC3_SetConfig+0xe4>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d10d      	bne.n	8005c62 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	021b      	lsls	r3, r3, #8
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a18      	ldr	r2, [pc, #96]	@ (8005cc8 <TIM_OC3_SetConfig+0xe4>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d007      	beq.n	8005c7a <TIM_OC3_SetConfig+0x96>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a17      	ldr	r2, [pc, #92]	@ (8005ccc <TIM_OC3_SetConfig+0xe8>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d003      	beq.n	8005c7a <TIM_OC3_SetConfig+0x96>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a16      	ldr	r2, [pc, #88]	@ (8005cd0 <TIM_OC3_SetConfig+0xec>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d113      	bne.n	8005ca2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	011b      	lsls	r3, r3, #4
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	011b      	lsls	r3, r3, #4
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	621a      	str	r2, [r3, #32]
}
 8005cbc:	bf00      	nop
 8005cbe:	371c      	adds	r7, #28
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	40012c00 	.word	0x40012c00
 8005ccc:	40014000 	.word	0x40014000
 8005cd0:	40014400 	.word	0x40014400

08005cd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	021b      	lsls	r3, r3, #8
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	031b      	lsls	r3, r3, #12
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a14      	ldr	r2, [pc, #80]	@ (8005d84 <TIM_OC4_SetConfig+0xb0>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d007      	beq.n	8005d48 <TIM_OC4_SetConfig+0x74>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a13      	ldr	r2, [pc, #76]	@ (8005d88 <TIM_OC4_SetConfig+0xb4>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d003      	beq.n	8005d48 <TIM_OC4_SetConfig+0x74>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a12      	ldr	r2, [pc, #72]	@ (8005d8c <TIM_OC4_SetConfig+0xb8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d109      	bne.n	8005d5c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	019b      	lsls	r3, r3, #6
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	621a      	str	r2, [r3, #32]
}
 8005d76:	bf00      	nop
 8005d78:	371c      	adds	r7, #28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	40012c00 	.word	0x40012c00
 8005d88:	40014000 	.word	0x40014000
 8005d8c:	40014400 	.word	0x40014400

08005d90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b087      	sub	sp, #28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005dd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	041b      	lsls	r3, r3, #16
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a13      	ldr	r2, [pc, #76]	@ (8005e34 <TIM_OC5_SetConfig+0xa4>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d007      	beq.n	8005dfa <TIM_OC5_SetConfig+0x6a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a12      	ldr	r2, [pc, #72]	@ (8005e38 <TIM_OC5_SetConfig+0xa8>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d003      	beq.n	8005dfa <TIM_OC5_SetConfig+0x6a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a11      	ldr	r2, [pc, #68]	@ (8005e3c <TIM_OC5_SetConfig+0xac>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d109      	bne.n	8005e0e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	021b      	lsls	r3, r3, #8
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	621a      	str	r2, [r3, #32]
}
 8005e28:	bf00      	nop
 8005e2a:	371c      	adds	r7, #28
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	40012c00 	.word	0x40012c00
 8005e38:	40014000 	.word	0x40014000
 8005e3c:	40014400 	.word	0x40014400

08005e40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	021b      	lsls	r3, r3, #8
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	051b      	lsls	r3, r3, #20
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a14      	ldr	r2, [pc, #80]	@ (8005ee8 <TIM_OC6_SetConfig+0xa8>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d007      	beq.n	8005eac <TIM_OC6_SetConfig+0x6c>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a13      	ldr	r2, [pc, #76]	@ (8005eec <TIM_OC6_SetConfig+0xac>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d003      	beq.n	8005eac <TIM_OC6_SetConfig+0x6c>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a12      	ldr	r2, [pc, #72]	@ (8005ef0 <TIM_OC6_SetConfig+0xb0>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d109      	bne.n	8005ec0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	029b      	lsls	r3, r3, #10
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	621a      	str	r2, [r3, #32]
}
 8005eda:	bf00      	nop
 8005edc:	371c      	adds	r7, #28
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	40012c00 	.word	0x40012c00
 8005eec:	40014000 	.word	0x40014000
 8005ef0:	40014400 	.word	0x40014400

08005ef4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	f023 0201 	bic.w	r2, r3, #1
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	f023 030a 	bic.w	r3, r3, #10
 8005f30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	621a      	str	r2, [r3, #32]
}
 8005f46:	bf00      	nop
 8005f48:	371c      	adds	r7, #28
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b087      	sub	sp, #28
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	60f8      	str	r0, [r7, #12]
 8005f5a:	60b9      	str	r1, [r7, #8]
 8005f5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	f023 0210 	bic.w	r2, r3, #16
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	031b      	lsls	r3, r3, #12
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	011b      	lsls	r3, r3, #4
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	621a      	str	r2, [r3, #32]
}
 8005fa6:	bf00      	nop
 8005fa8:	371c      	adds	r7, #28
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b085      	sub	sp, #20
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
 8005fba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	f043 0307 	orr.w	r3, r3, #7
 8005fd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	609a      	str	r2, [r3, #8]
}
 8005fdc:	bf00      	nop
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
 8005ff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006002:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	021a      	lsls	r2, r3, #8
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	431a      	orrs	r2, r3
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	4313      	orrs	r3, r2
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	4313      	orrs	r3, r2
 8006014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	609a      	str	r2, [r3, #8]
}
 800601c:	bf00      	nop
 800601e:	371c      	adds	r7, #28
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d109      	bne.n	800604c <HAL_TIMEx_PWMN_Start+0x24>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b01      	cmp	r3, #1
 8006042:	bf14      	ite	ne
 8006044:	2301      	movne	r3, #1
 8006046:	2300      	moveq	r3, #0
 8006048:	b2db      	uxtb	r3, r3
 800604a:	e022      	b.n	8006092 <HAL_TIMEx_PWMN_Start+0x6a>
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2b04      	cmp	r3, #4
 8006050:	d109      	bne.n	8006066 <HAL_TIMEx_PWMN_Start+0x3e>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b01      	cmp	r3, #1
 800605c:	bf14      	ite	ne
 800605e:	2301      	movne	r3, #1
 8006060:	2300      	moveq	r3, #0
 8006062:	b2db      	uxtb	r3, r3
 8006064:	e015      	b.n	8006092 <HAL_TIMEx_PWMN_Start+0x6a>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b08      	cmp	r3, #8
 800606a:	d109      	bne.n	8006080 <HAL_TIMEx_PWMN_Start+0x58>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b01      	cmp	r3, #1
 8006076:	bf14      	ite	ne
 8006078:	2301      	movne	r3, #1
 800607a:	2300      	moveq	r3, #0
 800607c:	b2db      	uxtb	r3, r3
 800607e:	e008      	b.n	8006092 <HAL_TIMEx_PWMN_Start+0x6a>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b01      	cmp	r3, #1
 800608a:	bf14      	ite	ne
 800608c:	2301      	movne	r3, #1
 800608e:	2300      	moveq	r3, #0
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e05a      	b.n	8006150 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d104      	bne.n	80060aa <HAL_TIMEx_PWMN_Start+0x82>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060a8:	e013      	b.n	80060d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	2b04      	cmp	r3, #4
 80060ae:	d104      	bne.n	80060ba <HAL_TIMEx_PWMN_Start+0x92>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060b8:	e00b      	b.n	80060d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d104      	bne.n	80060ca <HAL_TIMEx_PWMN_Start+0xa2>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80060c8:	e003      	b.n	80060d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2202      	movs	r2, #2
 80060ce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2204      	movs	r2, #4
 80060d8:	6839      	ldr	r1, [r7, #0]
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 f920 	bl	8006320 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80060ee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a18      	ldr	r2, [pc, #96]	@ (8006158 <HAL_TIMEx_PWMN_Start+0x130>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d009      	beq.n	800610e <HAL_TIMEx_PWMN_Start+0xe6>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006102:	d004      	beq.n	800610e <HAL_TIMEx_PWMN_Start+0xe6>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a14      	ldr	r2, [pc, #80]	@ (800615c <HAL_TIMEx_PWMN_Start+0x134>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d115      	bne.n	800613a <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	4b12      	ldr	r3, [pc, #72]	@ (8006160 <HAL_TIMEx_PWMN_Start+0x138>)
 8006116:	4013      	ands	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2b06      	cmp	r3, #6
 800611e:	d015      	beq.n	800614c <HAL_TIMEx_PWMN_Start+0x124>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006126:	d011      	beq.n	800614c <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0201 	orr.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006138:	e008      	b.n	800614c <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f042 0201 	orr.w	r2, r2, #1
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	e000      	b.n	800614e <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800614c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	40012c00 	.word	0x40012c00
 800615c:	40014000 	.word	0x40014000
 8006160:	00010007 	.word	0x00010007

08006164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006174:	2b01      	cmp	r3, #1
 8006176:	d101      	bne.n	800617c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006178:	2302      	movs	r3, #2
 800617a:	e04f      	b.n	800621c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a21      	ldr	r2, [pc, #132]	@ (8006228 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d108      	bne.n	80061b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80061ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a14      	ldr	r2, [pc, #80]	@ (8006228 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d009      	beq.n	80061f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061e4:	d004      	beq.n	80061f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a10      	ldr	r2, [pc, #64]	@ (800622c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d10c      	bne.n	800620a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	40012c00 	.word	0x40012c00
 800622c:	40014000 	.word	0x40014000

08006230 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800623a:	2300      	movs	r3, #0
 800623c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006244:	2b01      	cmp	r3, #1
 8006246:	d101      	bne.n	800624c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006248:	2302      	movs	r3, #2
 800624a:	e060      	b.n	800630e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	4313      	orrs	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	4313      	orrs	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	4313      	orrs	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4313      	orrs	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	4313      	orrs	r3, r2
 8006298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	041b      	lsls	r3, r3, #16
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a14      	ldr	r2, [pc, #80]	@ (800631c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d115      	bne.n	80062fc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062da:	051b      	lsls	r3, r3, #20
 80062dc:	4313      	orrs	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	40012c00 	.word	0x40012c00

08006320 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f003 030f 	and.w	r3, r3, #15
 8006332:	2204      	movs	r2, #4
 8006334:	fa02 f303 	lsl.w	r3, r2, r3
 8006338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6a1a      	ldr	r2, [r3, #32]
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	43db      	mvns	r3, r3
 8006342:	401a      	ands	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6a1a      	ldr	r2, [r3, #32]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f003 030f 	and.w	r3, r3, #15
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	fa01 f303 	lsl.w	r3, r1, r3
 8006358:	431a      	orrs	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	621a      	str	r2, [r3, #32]
}
 800635e:	bf00      	nop
 8006360:	371c      	adds	r7, #28
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b082      	sub	sp, #8
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e040      	b.n	80063fe <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006380:	2b00      	cmp	r3, #0
 8006382:	d106      	bne.n	8006392 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7fc f83f 	bl	8002410 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2224      	movs	r2, #36	@ 0x24
 8006396:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 0201 	bic.w	r2, r2, #1
 80063a6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fadd 	bl	8006970 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f8ae 	bl	8006518 <UART_SetConfig>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d101      	bne.n	80063c6 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e01b      	b.n	80063fe <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f042 0201 	orr.w	r2, r2, #1
 80063f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fb5c 	bl	8006ab4 <UART_CheckIdleState>
 80063fc:	4603      	mov	r3, r0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b08a      	sub	sp, #40	@ 0x28
 800640a:	af02      	add	r7, sp, #8
 800640c:	60f8      	str	r0, [r7, #12]
 800640e:	60b9      	str	r1, [r7, #8]
 8006410:	603b      	str	r3, [r7, #0]
 8006412:	4613      	mov	r3, r2
 8006414:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800641a:	2b20      	cmp	r3, #32
 800641c:	d177      	bne.n	800650e <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <HAL_UART_Transmit+0x24>
 8006424:	88fb      	ldrh	r3, [r7, #6]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e070      	b.n	8006510 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2221      	movs	r2, #33	@ 0x21
 800643a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800643c:	f7fc f8e4 	bl	8002608 <HAL_GetTick>
 8006440:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	88fa      	ldrh	r2, [r7, #6]
 8006446:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	88fa      	ldrh	r2, [r7, #6]
 800644e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800645a:	d108      	bne.n	800646e <HAL_UART_Transmit+0x68>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d104      	bne.n	800646e <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006464:	2300      	movs	r3, #0
 8006466:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	61bb      	str	r3, [r7, #24]
 800646c:	e003      	b.n	8006476 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006472:	2300      	movs	r3, #0
 8006474:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006476:	e02f      	b.n	80064d8 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	2200      	movs	r2, #0
 8006480:	2180      	movs	r1, #128	@ 0x80
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f000 fbbe 	bl	8006c04 <UART_WaitOnFlagUntilTimeout>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d004      	beq.n	8006498 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2220      	movs	r2, #32
 8006492:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e03b      	b.n	8006510 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10b      	bne.n	80064b6 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	881a      	ldrh	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064aa:	b292      	uxth	r2, r2
 80064ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	3302      	adds	r3, #2
 80064b2:	61bb      	str	r3, [r7, #24]
 80064b4:	e007      	b.n	80064c6 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	781a      	ldrb	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	3301      	adds	r3, #1
 80064c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	3b01      	subs	r3, #1
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80064de:	b29b      	uxth	r3, r3
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1c9      	bne.n	8006478 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	2200      	movs	r2, #0
 80064ec:	2140      	movs	r1, #64	@ 0x40
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f000 fb88 	bl	8006c04 <UART_WaitOnFlagUntilTimeout>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d004      	beq.n	8006504 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2220      	movs	r2, #32
 80064fe:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e005      	b.n	8006510 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2220      	movs	r2, #32
 8006508:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800650a:	2300      	movs	r3, #0
 800650c:	e000      	b.n	8006510 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800650e:	2302      	movs	r3, #2
  }
}
 8006510:	4618      	mov	r0, r3
 8006512:	3720      	adds	r7, #32
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800651c:	b08a      	sub	sp, #40	@ 0x28
 800651e:	af00      	add	r7, sp, #0
 8006520:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	689a      	ldr	r2, [r3, #8]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	431a      	orrs	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	431a      	orrs	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	69db      	ldr	r3, [r3, #28]
 800653c:	4313      	orrs	r3, r2
 800653e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	4bb4      	ldr	r3, [pc, #720]	@ (8006818 <UART_SetConfig+0x300>)
 8006548:	4013      	ands	r3, r2
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	6812      	ldr	r2, [r2, #0]
 800654e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006550:	430b      	orrs	r3, r1
 8006552:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	68da      	ldr	r2, [r3, #12]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4aa9      	ldr	r2, [pc, #676]	@ (800681c <UART_SetConfig+0x304>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d004      	beq.n	8006584 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006580:	4313      	orrs	r3, r2
 8006582:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006594:	430a      	orrs	r2, r1
 8006596:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4aa0      	ldr	r2, [pc, #640]	@ (8006820 <UART_SetConfig+0x308>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d126      	bne.n	80065f0 <UART_SetConfig+0xd8>
 80065a2:	4ba0      	ldr	r3, [pc, #640]	@ (8006824 <UART_SetConfig+0x30c>)
 80065a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a8:	f003 0303 	and.w	r3, r3, #3
 80065ac:	2b03      	cmp	r3, #3
 80065ae:	d81b      	bhi.n	80065e8 <UART_SetConfig+0xd0>
 80065b0:	a201      	add	r2, pc, #4	@ (adr r2, 80065b8 <UART_SetConfig+0xa0>)
 80065b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b6:	bf00      	nop
 80065b8:	080065c9 	.word	0x080065c9
 80065bc:	080065d9 	.word	0x080065d9
 80065c0:	080065d1 	.word	0x080065d1
 80065c4:	080065e1 	.word	0x080065e1
 80065c8:	2301      	movs	r3, #1
 80065ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ce:	e080      	b.n	80066d2 <UART_SetConfig+0x1ba>
 80065d0:	2302      	movs	r3, #2
 80065d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065d6:	e07c      	b.n	80066d2 <UART_SetConfig+0x1ba>
 80065d8:	2304      	movs	r3, #4
 80065da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065de:	e078      	b.n	80066d2 <UART_SetConfig+0x1ba>
 80065e0:	2308      	movs	r3, #8
 80065e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065e6:	e074      	b.n	80066d2 <UART_SetConfig+0x1ba>
 80065e8:	2310      	movs	r3, #16
 80065ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ee:	e070      	b.n	80066d2 <UART_SetConfig+0x1ba>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a8c      	ldr	r2, [pc, #560]	@ (8006828 <UART_SetConfig+0x310>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d138      	bne.n	800666c <UART_SetConfig+0x154>
 80065fa:	4b8a      	ldr	r3, [pc, #552]	@ (8006824 <UART_SetConfig+0x30c>)
 80065fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006600:	f003 030c 	and.w	r3, r3, #12
 8006604:	2b0c      	cmp	r3, #12
 8006606:	d82d      	bhi.n	8006664 <UART_SetConfig+0x14c>
 8006608:	a201      	add	r2, pc, #4	@ (adr r2, 8006610 <UART_SetConfig+0xf8>)
 800660a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660e:	bf00      	nop
 8006610:	08006645 	.word	0x08006645
 8006614:	08006665 	.word	0x08006665
 8006618:	08006665 	.word	0x08006665
 800661c:	08006665 	.word	0x08006665
 8006620:	08006655 	.word	0x08006655
 8006624:	08006665 	.word	0x08006665
 8006628:	08006665 	.word	0x08006665
 800662c:	08006665 	.word	0x08006665
 8006630:	0800664d 	.word	0x0800664d
 8006634:	08006665 	.word	0x08006665
 8006638:	08006665 	.word	0x08006665
 800663c:	08006665 	.word	0x08006665
 8006640:	0800665d 	.word	0x0800665d
 8006644:	2300      	movs	r3, #0
 8006646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800664a:	e042      	b.n	80066d2 <UART_SetConfig+0x1ba>
 800664c:	2302      	movs	r3, #2
 800664e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006652:	e03e      	b.n	80066d2 <UART_SetConfig+0x1ba>
 8006654:	2304      	movs	r3, #4
 8006656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800665a:	e03a      	b.n	80066d2 <UART_SetConfig+0x1ba>
 800665c:	2308      	movs	r3, #8
 800665e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006662:	e036      	b.n	80066d2 <UART_SetConfig+0x1ba>
 8006664:	2310      	movs	r3, #16
 8006666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800666a:	e032      	b.n	80066d2 <UART_SetConfig+0x1ba>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a6a      	ldr	r2, [pc, #424]	@ (800681c <UART_SetConfig+0x304>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d12a      	bne.n	80066cc <UART_SetConfig+0x1b4>
 8006676:	4b6b      	ldr	r3, [pc, #428]	@ (8006824 <UART_SetConfig+0x30c>)
 8006678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800667c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006680:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006684:	d01a      	beq.n	80066bc <UART_SetConfig+0x1a4>
 8006686:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800668a:	d81b      	bhi.n	80066c4 <UART_SetConfig+0x1ac>
 800668c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006690:	d00c      	beq.n	80066ac <UART_SetConfig+0x194>
 8006692:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006696:	d815      	bhi.n	80066c4 <UART_SetConfig+0x1ac>
 8006698:	2b00      	cmp	r3, #0
 800669a:	d003      	beq.n	80066a4 <UART_SetConfig+0x18c>
 800669c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066a0:	d008      	beq.n	80066b4 <UART_SetConfig+0x19c>
 80066a2:	e00f      	b.n	80066c4 <UART_SetConfig+0x1ac>
 80066a4:	2300      	movs	r3, #0
 80066a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066aa:	e012      	b.n	80066d2 <UART_SetConfig+0x1ba>
 80066ac:	2302      	movs	r3, #2
 80066ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066b2:	e00e      	b.n	80066d2 <UART_SetConfig+0x1ba>
 80066b4:	2304      	movs	r3, #4
 80066b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ba:	e00a      	b.n	80066d2 <UART_SetConfig+0x1ba>
 80066bc:	2308      	movs	r3, #8
 80066be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066c2:	e006      	b.n	80066d2 <UART_SetConfig+0x1ba>
 80066c4:	2310      	movs	r3, #16
 80066c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ca:	e002      	b.n	80066d2 <UART_SetConfig+0x1ba>
 80066cc:	2310      	movs	r3, #16
 80066ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a51      	ldr	r2, [pc, #324]	@ (800681c <UART_SetConfig+0x304>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d17a      	bne.n	80067d2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d824      	bhi.n	800672e <UART_SetConfig+0x216>
 80066e4:	a201      	add	r2, pc, #4	@ (adr r2, 80066ec <UART_SetConfig+0x1d4>)
 80066e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ea:	bf00      	nop
 80066ec:	08006711 	.word	0x08006711
 80066f0:	0800672f 	.word	0x0800672f
 80066f4:	08006719 	.word	0x08006719
 80066f8:	0800672f 	.word	0x0800672f
 80066fc:	0800671f 	.word	0x0800671f
 8006700:	0800672f 	.word	0x0800672f
 8006704:	0800672f 	.word	0x0800672f
 8006708:	0800672f 	.word	0x0800672f
 800670c:	08006727 	.word	0x08006727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006710:	f7fe fae8 	bl	8004ce4 <HAL_RCC_GetPCLK1Freq>
 8006714:	61f8      	str	r0, [r7, #28]
        break;
 8006716:	e010      	b.n	800673a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006718:	4b44      	ldr	r3, [pc, #272]	@ (800682c <UART_SetConfig+0x314>)
 800671a:	61fb      	str	r3, [r7, #28]
        break;
 800671c:	e00d      	b.n	800673a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800671e:	f7fe fa49 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 8006722:	61f8      	str	r0, [r7, #28]
        break;
 8006724:	e009      	b.n	800673a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006726:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800672a:	61fb      	str	r3, [r7, #28]
        break;
 800672c:	e005      	b.n	800673a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006738:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	2b00      	cmp	r3, #0
 800673e:	f000 8107 	beq.w	8006950 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	685a      	ldr	r2, [r3, #4]
 8006746:	4613      	mov	r3, r2
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	4413      	add	r3, r2
 800674c:	69fa      	ldr	r2, [r7, #28]
 800674e:	429a      	cmp	r2, r3
 8006750:	d305      	bcc.n	800675e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006758:	69fa      	ldr	r2, [r7, #28]
 800675a:	429a      	cmp	r2, r3
 800675c:	d903      	bls.n	8006766 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006764:	e0f4      	b.n	8006950 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	2200      	movs	r2, #0
 800676a:	461c      	mov	r4, r3
 800676c:	4615      	mov	r5, r2
 800676e:	f04f 0200 	mov.w	r2, #0
 8006772:	f04f 0300 	mov.w	r3, #0
 8006776:	022b      	lsls	r3, r5, #8
 8006778:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800677c:	0222      	lsls	r2, r4, #8
 800677e:	68f9      	ldr	r1, [r7, #12]
 8006780:	6849      	ldr	r1, [r1, #4]
 8006782:	0849      	lsrs	r1, r1, #1
 8006784:	2000      	movs	r0, #0
 8006786:	4688      	mov	r8, r1
 8006788:	4681      	mov	r9, r0
 800678a:	eb12 0a08 	adds.w	sl, r2, r8
 800678e:	eb43 0b09 	adc.w	fp, r3, r9
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	603b      	str	r3, [r7, #0]
 800679a:	607a      	str	r2, [r7, #4]
 800679c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067a0:	4650      	mov	r0, sl
 80067a2:	4659      	mov	r1, fp
 80067a4:	f7fa f95a 	bl	8000a5c <__aeabi_uldivmod>
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	4613      	mov	r3, r2
 80067ae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067b6:	d308      	bcc.n	80067ca <UART_SetConfig+0x2b2>
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067be:	d204      	bcs.n	80067ca <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	69ba      	ldr	r2, [r7, #24]
 80067c6:	60da      	str	r2, [r3, #12]
 80067c8:	e0c2      	b.n	8006950 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80067d0:	e0be      	b.n	8006950 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067da:	d16a      	bne.n	80068b2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80067dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d834      	bhi.n	800684e <UART_SetConfig+0x336>
 80067e4:	a201      	add	r2, pc, #4	@ (adr r2, 80067ec <UART_SetConfig+0x2d4>)
 80067e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ea:	bf00      	nop
 80067ec:	08006811 	.word	0x08006811
 80067f0:	08006831 	.word	0x08006831
 80067f4:	08006839 	.word	0x08006839
 80067f8:	0800684f 	.word	0x0800684f
 80067fc:	0800683f 	.word	0x0800683f
 8006800:	0800684f 	.word	0x0800684f
 8006804:	0800684f 	.word	0x0800684f
 8006808:	0800684f 	.word	0x0800684f
 800680c:	08006847 	.word	0x08006847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006810:	f7fe fa68 	bl	8004ce4 <HAL_RCC_GetPCLK1Freq>
 8006814:	61f8      	str	r0, [r7, #28]
        break;
 8006816:	e020      	b.n	800685a <UART_SetConfig+0x342>
 8006818:	efff69f3 	.word	0xefff69f3
 800681c:	40008000 	.word	0x40008000
 8006820:	40013800 	.word	0x40013800
 8006824:	40021000 	.word	0x40021000
 8006828:	40004400 	.word	0x40004400
 800682c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006830:	f7fe fa6e 	bl	8004d10 <HAL_RCC_GetPCLK2Freq>
 8006834:	61f8      	str	r0, [r7, #28]
        break;
 8006836:	e010      	b.n	800685a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006838:	4b4c      	ldr	r3, [pc, #304]	@ (800696c <UART_SetConfig+0x454>)
 800683a:	61fb      	str	r3, [r7, #28]
        break;
 800683c:	e00d      	b.n	800685a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800683e:	f7fe f9b9 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 8006842:	61f8      	str	r0, [r7, #28]
        break;
 8006844:	e009      	b.n	800685a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006846:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800684a:	61fb      	str	r3, [r7, #28]
        break;
 800684c:	e005      	b.n	800685a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800684e:	2300      	movs	r3, #0
 8006850:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006858:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d077      	beq.n	8006950 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	005a      	lsls	r2, r3, #1
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	085b      	lsrs	r3, r3, #1
 800686a:	441a      	add	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	fbb2 f3f3 	udiv	r3, r2, r3
 8006874:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	2b0f      	cmp	r3, #15
 800687a:	d916      	bls.n	80068aa <UART_SetConfig+0x392>
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006882:	d212      	bcs.n	80068aa <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	b29b      	uxth	r3, r3
 8006888:	f023 030f 	bic.w	r3, r3, #15
 800688c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	085b      	lsrs	r3, r3, #1
 8006892:	b29b      	uxth	r3, r3
 8006894:	f003 0307 	and.w	r3, r3, #7
 8006898:	b29a      	uxth	r2, r3
 800689a:	8afb      	ldrh	r3, [r7, #22]
 800689c:	4313      	orrs	r3, r2
 800689e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	8afa      	ldrh	r2, [r7, #22]
 80068a6:	60da      	str	r2, [r3, #12]
 80068a8:	e052      	b.n	8006950 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80068b0:	e04e      	b.n	8006950 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80068b6:	2b08      	cmp	r3, #8
 80068b8:	d827      	bhi.n	800690a <UART_SetConfig+0x3f2>
 80068ba:	a201      	add	r2, pc, #4	@ (adr r2, 80068c0 <UART_SetConfig+0x3a8>)
 80068bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c0:	080068e5 	.word	0x080068e5
 80068c4:	080068ed 	.word	0x080068ed
 80068c8:	080068f5 	.word	0x080068f5
 80068cc:	0800690b 	.word	0x0800690b
 80068d0:	080068fb 	.word	0x080068fb
 80068d4:	0800690b 	.word	0x0800690b
 80068d8:	0800690b 	.word	0x0800690b
 80068dc:	0800690b 	.word	0x0800690b
 80068e0:	08006903 	.word	0x08006903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068e4:	f7fe f9fe 	bl	8004ce4 <HAL_RCC_GetPCLK1Freq>
 80068e8:	61f8      	str	r0, [r7, #28]
        break;
 80068ea:	e014      	b.n	8006916 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068ec:	f7fe fa10 	bl	8004d10 <HAL_RCC_GetPCLK2Freq>
 80068f0:	61f8      	str	r0, [r7, #28]
        break;
 80068f2:	e010      	b.n	8006916 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068f4:	4b1d      	ldr	r3, [pc, #116]	@ (800696c <UART_SetConfig+0x454>)
 80068f6:	61fb      	str	r3, [r7, #28]
        break;
 80068f8:	e00d      	b.n	8006916 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068fa:	f7fe f95b 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 80068fe:	61f8      	str	r0, [r7, #28]
        break;
 8006900:	e009      	b.n	8006916 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006902:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006906:	61fb      	str	r3, [r7, #28]
        break;
 8006908:	e005      	b.n	8006916 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800690a:	2300      	movs	r3, #0
 800690c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006914:	bf00      	nop
    }

    if (pclk != 0U)
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d019      	beq.n	8006950 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	085a      	lsrs	r2, r3, #1
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	441a      	add	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	fbb2 f3f3 	udiv	r3, r2, r3
 800692e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	2b0f      	cmp	r3, #15
 8006934:	d909      	bls.n	800694a <UART_SetConfig+0x432>
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800693c:	d205      	bcs.n	800694a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	b29a      	uxth	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	60da      	str	r2, [r3, #12]
 8006948:	e002      	b.n	8006950 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800695c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006960:	4618      	mov	r0, r3
 8006962:	3728      	adds	r7, #40	@ 0x28
 8006964:	46bd      	mov	sp, r7
 8006966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800696a:	bf00      	nop
 800696c:	00f42400 	.word	0x00f42400

08006970 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800697c:	f003 0308 	and.w	r3, r3, #8
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00a      	beq.n	800699a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00a      	beq.n	80069bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00a      	beq.n	80069de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e2:	f003 0304 	and.w	r3, r3, #4
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00a      	beq.n	8006a00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	430a      	orrs	r2, r1
 80069fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a04:	f003 0310 	and.w	r3, r3, #16
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00a      	beq.n	8006a22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a26:	f003 0320 	and.w	r3, r3, #32
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00a      	beq.n	8006a44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	430a      	orrs	r2, r1
 8006a42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d01a      	beq.n	8006a86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a6e:	d10a      	bne.n	8006a86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00a      	beq.n	8006aa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	605a      	str	r2, [r3, #4]
  }
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b098      	sub	sp, #96	@ 0x60
 8006ab8:	af02      	add	r7, sp, #8
 8006aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ac4:	f7fb fda0 	bl	8002608 <HAL_GetTick>
 8006ac8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0308 	and.w	r3, r3, #8
 8006ad4:	2b08      	cmp	r3, #8
 8006ad6:	d12e      	bne.n	8006b36 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ad8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f88c 	bl	8006c04 <UART_WaitOnFlagUntilTimeout>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d021      	beq.n	8006b36 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006afa:	e853 3f00 	ldrex	r3, [r3]
 8006afe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b06:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b10:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b12:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b18:	e841 2300 	strex	r3, r2, [r1]
 8006b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1e6      	bne.n	8006af2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2220      	movs	r2, #32
 8006b28:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e062      	b.n	8006bfc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0304 	and.w	r3, r3, #4
 8006b40:	2b04      	cmp	r3, #4
 8006b42:	d149      	bne.n	8006bd8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f856 	bl	8006c04 <UART_WaitOnFlagUntilTimeout>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d03c      	beq.n	8006bd8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b66:	e853 3f00 	ldrex	r3, [r3]
 8006b6a:	623b      	str	r3, [r7, #32]
   return(result);
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b84:	e841 2300 	strex	r3, r2, [r1]
 8006b88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1e6      	bne.n	8006b5e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3308      	adds	r3, #8
 8006b96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	e853 3f00 	ldrex	r3, [r3]
 8006b9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f023 0301 	bic.w	r3, r3, #1
 8006ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3308      	adds	r3, #8
 8006bae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bb0:	61fa      	str	r2, [r7, #28]
 8006bb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb4:	69b9      	ldr	r1, [r7, #24]
 8006bb6:	69fa      	ldr	r2, [r7, #28]
 8006bb8:	e841 2300 	strex	r3, r2, [r1]
 8006bbc:	617b      	str	r3, [r7, #20]
   return(result);
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1e5      	bne.n	8006b90 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e011      	b.n	8006bfc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2220      	movs	r2, #32
 8006be2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3758      	adds	r7, #88	@ 0x58
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	603b      	str	r3, [r7, #0]
 8006c10:	4613      	mov	r3, r2
 8006c12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c14:	e04f      	b.n	8006cb6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1c:	d04b      	beq.n	8006cb6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c1e:	f7fb fcf3 	bl	8002608 <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d302      	bcc.n	8006c34 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d101      	bne.n	8006c38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e04e      	b.n	8006cd6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0304 	and.w	r3, r3, #4
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d037      	beq.n	8006cb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	2b80      	cmp	r3, #128	@ 0x80
 8006c4a:	d034      	beq.n	8006cb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2b40      	cmp	r3, #64	@ 0x40
 8006c50:	d031      	beq.n	8006cb6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	69db      	ldr	r3, [r3, #28]
 8006c58:	f003 0308 	and.w	r3, r3, #8
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d110      	bne.n	8006c82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2208      	movs	r2, #8
 8006c66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 f838 	bl	8006cde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2208      	movs	r2, #8
 8006c72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e029      	b.n	8006cd6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c90:	d111      	bne.n	8006cb6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 f81e 	bl	8006cde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	e00f      	b.n	8006cd6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	69da      	ldr	r2, [r3, #28]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	bf0c      	ite	eq
 8006cc6:	2301      	moveq	r3, #1
 8006cc8:	2300      	movne	r3, #0
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	461a      	mov	r2, r3
 8006cce:	79fb      	ldrb	r3, [r7, #7]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d0a0      	beq.n	8006c16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b095      	sub	sp, #84	@ 0x54
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cee:	e853 3f00 	ldrex	r3, [r3]
 8006cf2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	461a      	mov	r2, r3
 8006d02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d04:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d06:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d0c:	e841 2300 	strex	r3, r2, [r1]
 8006d10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1e6      	bne.n	8006ce6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	3308      	adds	r3, #8
 8006d1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	e853 3f00 	ldrex	r3, [r3]
 8006d26:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	f023 0301 	bic.w	r3, r3, #1
 8006d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	3308      	adds	r3, #8
 8006d36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d40:	e841 2300 	strex	r3, r2, [r1]
 8006d44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1e5      	bne.n	8006d18 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d118      	bne.n	8006d86 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	f023 0310 	bic.w	r3, r3, #16
 8006d68:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d72:	61bb      	str	r3, [r7, #24]
 8006d74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d76:	6979      	ldr	r1, [r7, #20]
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	e841 2300 	strex	r3, r2, [r1]
 8006d7e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1e6      	bne.n	8006d54 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006d9a:	bf00      	nop
 8006d9c:	3754      	adds	r7, #84	@ 0x54
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
	...

08006da8 <siprintf>:
 8006da8:	b40e      	push	{r1, r2, r3}
 8006daa:	b510      	push	{r4, lr}
 8006dac:	b09d      	sub	sp, #116	@ 0x74
 8006dae:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006db0:	9002      	str	r0, [sp, #8]
 8006db2:	9006      	str	r0, [sp, #24]
 8006db4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006db8:	480a      	ldr	r0, [pc, #40]	@ (8006de4 <siprintf+0x3c>)
 8006dba:	9107      	str	r1, [sp, #28]
 8006dbc:	9104      	str	r1, [sp, #16]
 8006dbe:	490a      	ldr	r1, [pc, #40]	@ (8006de8 <siprintf+0x40>)
 8006dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dc4:	9105      	str	r1, [sp, #20]
 8006dc6:	2400      	movs	r4, #0
 8006dc8:	a902      	add	r1, sp, #8
 8006dca:	6800      	ldr	r0, [r0, #0]
 8006dcc:	9301      	str	r3, [sp, #4]
 8006dce:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006dd0:	f000 f994 	bl	80070fc <_svfiprintf_r>
 8006dd4:	9b02      	ldr	r3, [sp, #8]
 8006dd6:	701c      	strb	r4, [r3, #0]
 8006dd8:	b01d      	add	sp, #116	@ 0x74
 8006dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dde:	b003      	add	sp, #12
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	20000040 	.word	0x20000040
 8006de8:	ffff0208 	.word	0xffff0208

08006dec <memset>:
 8006dec:	4402      	add	r2, r0
 8006dee:	4603      	mov	r3, r0
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d100      	bne.n	8006df6 <memset+0xa>
 8006df4:	4770      	bx	lr
 8006df6:	f803 1b01 	strb.w	r1, [r3], #1
 8006dfa:	e7f9      	b.n	8006df0 <memset+0x4>

08006dfc <__errno>:
 8006dfc:	4b01      	ldr	r3, [pc, #4]	@ (8006e04 <__errno+0x8>)
 8006dfe:	6818      	ldr	r0, [r3, #0]
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	20000040 	.word	0x20000040

08006e08 <__libc_init_array>:
 8006e08:	b570      	push	{r4, r5, r6, lr}
 8006e0a:	4d0d      	ldr	r5, [pc, #52]	@ (8006e40 <__libc_init_array+0x38>)
 8006e0c:	4c0d      	ldr	r4, [pc, #52]	@ (8006e44 <__libc_init_array+0x3c>)
 8006e0e:	1b64      	subs	r4, r4, r5
 8006e10:	10a4      	asrs	r4, r4, #2
 8006e12:	2600      	movs	r6, #0
 8006e14:	42a6      	cmp	r6, r4
 8006e16:	d109      	bne.n	8006e2c <__libc_init_array+0x24>
 8006e18:	4d0b      	ldr	r5, [pc, #44]	@ (8006e48 <__libc_init_array+0x40>)
 8006e1a:	4c0c      	ldr	r4, [pc, #48]	@ (8006e4c <__libc_init_array+0x44>)
 8006e1c:	f000 fc64 	bl	80076e8 <_init>
 8006e20:	1b64      	subs	r4, r4, r5
 8006e22:	10a4      	asrs	r4, r4, #2
 8006e24:	2600      	movs	r6, #0
 8006e26:	42a6      	cmp	r6, r4
 8006e28:	d105      	bne.n	8006e36 <__libc_init_array+0x2e>
 8006e2a:	bd70      	pop	{r4, r5, r6, pc}
 8006e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e30:	4798      	blx	r3
 8006e32:	3601      	adds	r6, #1
 8006e34:	e7ee      	b.n	8006e14 <__libc_init_array+0xc>
 8006e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e3a:	4798      	blx	r3
 8006e3c:	3601      	adds	r6, #1
 8006e3e:	e7f2      	b.n	8006e26 <__libc_init_array+0x1e>
 8006e40:	080077b8 	.word	0x080077b8
 8006e44:	080077b8 	.word	0x080077b8
 8006e48:	080077b8 	.word	0x080077b8
 8006e4c:	080077bc 	.word	0x080077bc

08006e50 <__retarget_lock_acquire_recursive>:
 8006e50:	4770      	bx	lr

08006e52 <__retarget_lock_release_recursive>:
 8006e52:	4770      	bx	lr

08006e54 <_free_r>:
 8006e54:	b538      	push	{r3, r4, r5, lr}
 8006e56:	4605      	mov	r5, r0
 8006e58:	2900      	cmp	r1, #0
 8006e5a:	d041      	beq.n	8006ee0 <_free_r+0x8c>
 8006e5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e60:	1f0c      	subs	r4, r1, #4
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	bfb8      	it	lt
 8006e66:	18e4      	addlt	r4, r4, r3
 8006e68:	f000 f8e0 	bl	800702c <__malloc_lock>
 8006e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ee4 <_free_r+0x90>)
 8006e6e:	6813      	ldr	r3, [r2, #0]
 8006e70:	b933      	cbnz	r3, 8006e80 <_free_r+0x2c>
 8006e72:	6063      	str	r3, [r4, #4]
 8006e74:	6014      	str	r4, [r2, #0]
 8006e76:	4628      	mov	r0, r5
 8006e78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e7c:	f000 b8dc 	b.w	8007038 <__malloc_unlock>
 8006e80:	42a3      	cmp	r3, r4
 8006e82:	d908      	bls.n	8006e96 <_free_r+0x42>
 8006e84:	6820      	ldr	r0, [r4, #0]
 8006e86:	1821      	adds	r1, r4, r0
 8006e88:	428b      	cmp	r3, r1
 8006e8a:	bf01      	itttt	eq
 8006e8c:	6819      	ldreq	r1, [r3, #0]
 8006e8e:	685b      	ldreq	r3, [r3, #4]
 8006e90:	1809      	addeq	r1, r1, r0
 8006e92:	6021      	streq	r1, [r4, #0]
 8006e94:	e7ed      	b.n	8006e72 <_free_r+0x1e>
 8006e96:	461a      	mov	r2, r3
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	b10b      	cbz	r3, 8006ea0 <_free_r+0x4c>
 8006e9c:	42a3      	cmp	r3, r4
 8006e9e:	d9fa      	bls.n	8006e96 <_free_r+0x42>
 8006ea0:	6811      	ldr	r1, [r2, #0]
 8006ea2:	1850      	adds	r0, r2, r1
 8006ea4:	42a0      	cmp	r0, r4
 8006ea6:	d10b      	bne.n	8006ec0 <_free_r+0x6c>
 8006ea8:	6820      	ldr	r0, [r4, #0]
 8006eaa:	4401      	add	r1, r0
 8006eac:	1850      	adds	r0, r2, r1
 8006eae:	4283      	cmp	r3, r0
 8006eb0:	6011      	str	r1, [r2, #0]
 8006eb2:	d1e0      	bne.n	8006e76 <_free_r+0x22>
 8006eb4:	6818      	ldr	r0, [r3, #0]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	6053      	str	r3, [r2, #4]
 8006eba:	4408      	add	r0, r1
 8006ebc:	6010      	str	r0, [r2, #0]
 8006ebe:	e7da      	b.n	8006e76 <_free_r+0x22>
 8006ec0:	d902      	bls.n	8006ec8 <_free_r+0x74>
 8006ec2:	230c      	movs	r3, #12
 8006ec4:	602b      	str	r3, [r5, #0]
 8006ec6:	e7d6      	b.n	8006e76 <_free_r+0x22>
 8006ec8:	6820      	ldr	r0, [r4, #0]
 8006eca:	1821      	adds	r1, r4, r0
 8006ecc:	428b      	cmp	r3, r1
 8006ece:	bf04      	itt	eq
 8006ed0:	6819      	ldreq	r1, [r3, #0]
 8006ed2:	685b      	ldreq	r3, [r3, #4]
 8006ed4:	6063      	str	r3, [r4, #4]
 8006ed6:	bf04      	itt	eq
 8006ed8:	1809      	addeq	r1, r1, r0
 8006eda:	6021      	streq	r1, [r4, #0]
 8006edc:	6054      	str	r4, [r2, #4]
 8006ede:	e7ca      	b.n	8006e76 <_free_r+0x22>
 8006ee0:	bd38      	pop	{r3, r4, r5, pc}
 8006ee2:	bf00      	nop
 8006ee4:	2000042c 	.word	0x2000042c

08006ee8 <sbrk_aligned>:
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	4e0f      	ldr	r6, [pc, #60]	@ (8006f28 <sbrk_aligned+0x40>)
 8006eec:	460c      	mov	r4, r1
 8006eee:	6831      	ldr	r1, [r6, #0]
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	b911      	cbnz	r1, 8006efa <sbrk_aligned+0x12>
 8006ef4:	f000 fba4 	bl	8007640 <_sbrk_r>
 8006ef8:	6030      	str	r0, [r6, #0]
 8006efa:	4621      	mov	r1, r4
 8006efc:	4628      	mov	r0, r5
 8006efe:	f000 fb9f 	bl	8007640 <_sbrk_r>
 8006f02:	1c43      	adds	r3, r0, #1
 8006f04:	d103      	bne.n	8006f0e <sbrk_aligned+0x26>
 8006f06:	f04f 34ff 	mov.w	r4, #4294967295
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	bd70      	pop	{r4, r5, r6, pc}
 8006f0e:	1cc4      	adds	r4, r0, #3
 8006f10:	f024 0403 	bic.w	r4, r4, #3
 8006f14:	42a0      	cmp	r0, r4
 8006f16:	d0f8      	beq.n	8006f0a <sbrk_aligned+0x22>
 8006f18:	1a21      	subs	r1, r4, r0
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	f000 fb90 	bl	8007640 <_sbrk_r>
 8006f20:	3001      	adds	r0, #1
 8006f22:	d1f2      	bne.n	8006f0a <sbrk_aligned+0x22>
 8006f24:	e7ef      	b.n	8006f06 <sbrk_aligned+0x1e>
 8006f26:	bf00      	nop
 8006f28:	20000428 	.word	0x20000428

08006f2c <_malloc_r>:
 8006f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f30:	1ccd      	adds	r5, r1, #3
 8006f32:	f025 0503 	bic.w	r5, r5, #3
 8006f36:	3508      	adds	r5, #8
 8006f38:	2d0c      	cmp	r5, #12
 8006f3a:	bf38      	it	cc
 8006f3c:	250c      	movcc	r5, #12
 8006f3e:	2d00      	cmp	r5, #0
 8006f40:	4606      	mov	r6, r0
 8006f42:	db01      	blt.n	8006f48 <_malloc_r+0x1c>
 8006f44:	42a9      	cmp	r1, r5
 8006f46:	d904      	bls.n	8006f52 <_malloc_r+0x26>
 8006f48:	230c      	movs	r3, #12
 8006f4a:	6033      	str	r3, [r6, #0]
 8006f4c:	2000      	movs	r0, #0
 8006f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007028 <_malloc_r+0xfc>
 8006f56:	f000 f869 	bl	800702c <__malloc_lock>
 8006f5a:	f8d8 3000 	ldr.w	r3, [r8]
 8006f5e:	461c      	mov	r4, r3
 8006f60:	bb44      	cbnz	r4, 8006fb4 <_malloc_r+0x88>
 8006f62:	4629      	mov	r1, r5
 8006f64:	4630      	mov	r0, r6
 8006f66:	f7ff ffbf 	bl	8006ee8 <sbrk_aligned>
 8006f6a:	1c43      	adds	r3, r0, #1
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	d158      	bne.n	8007022 <_malloc_r+0xf6>
 8006f70:	f8d8 4000 	ldr.w	r4, [r8]
 8006f74:	4627      	mov	r7, r4
 8006f76:	2f00      	cmp	r7, #0
 8006f78:	d143      	bne.n	8007002 <_malloc_r+0xd6>
 8006f7a:	2c00      	cmp	r4, #0
 8006f7c:	d04b      	beq.n	8007016 <_malloc_r+0xea>
 8006f7e:	6823      	ldr	r3, [r4, #0]
 8006f80:	4639      	mov	r1, r7
 8006f82:	4630      	mov	r0, r6
 8006f84:	eb04 0903 	add.w	r9, r4, r3
 8006f88:	f000 fb5a 	bl	8007640 <_sbrk_r>
 8006f8c:	4581      	cmp	r9, r0
 8006f8e:	d142      	bne.n	8007016 <_malloc_r+0xea>
 8006f90:	6821      	ldr	r1, [r4, #0]
 8006f92:	1a6d      	subs	r5, r5, r1
 8006f94:	4629      	mov	r1, r5
 8006f96:	4630      	mov	r0, r6
 8006f98:	f7ff ffa6 	bl	8006ee8 <sbrk_aligned>
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	d03a      	beq.n	8007016 <_malloc_r+0xea>
 8006fa0:	6823      	ldr	r3, [r4, #0]
 8006fa2:	442b      	add	r3, r5
 8006fa4:	6023      	str	r3, [r4, #0]
 8006fa6:	f8d8 3000 	ldr.w	r3, [r8]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	bb62      	cbnz	r2, 8007008 <_malloc_r+0xdc>
 8006fae:	f8c8 7000 	str.w	r7, [r8]
 8006fb2:	e00f      	b.n	8006fd4 <_malloc_r+0xa8>
 8006fb4:	6822      	ldr	r2, [r4, #0]
 8006fb6:	1b52      	subs	r2, r2, r5
 8006fb8:	d420      	bmi.n	8006ffc <_malloc_r+0xd0>
 8006fba:	2a0b      	cmp	r2, #11
 8006fbc:	d917      	bls.n	8006fee <_malloc_r+0xc2>
 8006fbe:	1961      	adds	r1, r4, r5
 8006fc0:	42a3      	cmp	r3, r4
 8006fc2:	6025      	str	r5, [r4, #0]
 8006fc4:	bf18      	it	ne
 8006fc6:	6059      	strne	r1, [r3, #4]
 8006fc8:	6863      	ldr	r3, [r4, #4]
 8006fca:	bf08      	it	eq
 8006fcc:	f8c8 1000 	streq.w	r1, [r8]
 8006fd0:	5162      	str	r2, [r4, r5]
 8006fd2:	604b      	str	r3, [r1, #4]
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	f000 f82f 	bl	8007038 <__malloc_unlock>
 8006fda:	f104 000b 	add.w	r0, r4, #11
 8006fde:	1d23      	adds	r3, r4, #4
 8006fe0:	f020 0007 	bic.w	r0, r0, #7
 8006fe4:	1ac2      	subs	r2, r0, r3
 8006fe6:	bf1c      	itt	ne
 8006fe8:	1a1b      	subne	r3, r3, r0
 8006fea:	50a3      	strne	r3, [r4, r2]
 8006fec:	e7af      	b.n	8006f4e <_malloc_r+0x22>
 8006fee:	6862      	ldr	r2, [r4, #4]
 8006ff0:	42a3      	cmp	r3, r4
 8006ff2:	bf0c      	ite	eq
 8006ff4:	f8c8 2000 	streq.w	r2, [r8]
 8006ff8:	605a      	strne	r2, [r3, #4]
 8006ffa:	e7eb      	b.n	8006fd4 <_malloc_r+0xa8>
 8006ffc:	4623      	mov	r3, r4
 8006ffe:	6864      	ldr	r4, [r4, #4]
 8007000:	e7ae      	b.n	8006f60 <_malloc_r+0x34>
 8007002:	463c      	mov	r4, r7
 8007004:	687f      	ldr	r7, [r7, #4]
 8007006:	e7b6      	b.n	8006f76 <_malloc_r+0x4a>
 8007008:	461a      	mov	r2, r3
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	42a3      	cmp	r3, r4
 800700e:	d1fb      	bne.n	8007008 <_malloc_r+0xdc>
 8007010:	2300      	movs	r3, #0
 8007012:	6053      	str	r3, [r2, #4]
 8007014:	e7de      	b.n	8006fd4 <_malloc_r+0xa8>
 8007016:	230c      	movs	r3, #12
 8007018:	6033      	str	r3, [r6, #0]
 800701a:	4630      	mov	r0, r6
 800701c:	f000 f80c 	bl	8007038 <__malloc_unlock>
 8007020:	e794      	b.n	8006f4c <_malloc_r+0x20>
 8007022:	6005      	str	r5, [r0, #0]
 8007024:	e7d6      	b.n	8006fd4 <_malloc_r+0xa8>
 8007026:	bf00      	nop
 8007028:	2000042c 	.word	0x2000042c

0800702c <__malloc_lock>:
 800702c:	4801      	ldr	r0, [pc, #4]	@ (8007034 <__malloc_lock+0x8>)
 800702e:	f7ff bf0f 	b.w	8006e50 <__retarget_lock_acquire_recursive>
 8007032:	bf00      	nop
 8007034:	20000424 	.word	0x20000424

08007038 <__malloc_unlock>:
 8007038:	4801      	ldr	r0, [pc, #4]	@ (8007040 <__malloc_unlock+0x8>)
 800703a:	f7ff bf0a 	b.w	8006e52 <__retarget_lock_release_recursive>
 800703e:	bf00      	nop
 8007040:	20000424 	.word	0x20000424

08007044 <__ssputs_r>:
 8007044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007048:	688e      	ldr	r6, [r1, #8]
 800704a:	461f      	mov	r7, r3
 800704c:	42be      	cmp	r6, r7
 800704e:	680b      	ldr	r3, [r1, #0]
 8007050:	4682      	mov	sl, r0
 8007052:	460c      	mov	r4, r1
 8007054:	4690      	mov	r8, r2
 8007056:	d82d      	bhi.n	80070b4 <__ssputs_r+0x70>
 8007058:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800705c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007060:	d026      	beq.n	80070b0 <__ssputs_r+0x6c>
 8007062:	6965      	ldr	r5, [r4, #20]
 8007064:	6909      	ldr	r1, [r1, #16]
 8007066:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800706a:	eba3 0901 	sub.w	r9, r3, r1
 800706e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007072:	1c7b      	adds	r3, r7, #1
 8007074:	444b      	add	r3, r9
 8007076:	106d      	asrs	r5, r5, #1
 8007078:	429d      	cmp	r5, r3
 800707a:	bf38      	it	cc
 800707c:	461d      	movcc	r5, r3
 800707e:	0553      	lsls	r3, r2, #21
 8007080:	d527      	bpl.n	80070d2 <__ssputs_r+0x8e>
 8007082:	4629      	mov	r1, r5
 8007084:	f7ff ff52 	bl	8006f2c <_malloc_r>
 8007088:	4606      	mov	r6, r0
 800708a:	b360      	cbz	r0, 80070e6 <__ssputs_r+0xa2>
 800708c:	6921      	ldr	r1, [r4, #16]
 800708e:	464a      	mov	r2, r9
 8007090:	f000 fae6 	bl	8007660 <memcpy>
 8007094:	89a3      	ldrh	r3, [r4, #12]
 8007096:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800709a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800709e:	81a3      	strh	r3, [r4, #12]
 80070a0:	6126      	str	r6, [r4, #16]
 80070a2:	6165      	str	r5, [r4, #20]
 80070a4:	444e      	add	r6, r9
 80070a6:	eba5 0509 	sub.w	r5, r5, r9
 80070aa:	6026      	str	r6, [r4, #0]
 80070ac:	60a5      	str	r5, [r4, #8]
 80070ae:	463e      	mov	r6, r7
 80070b0:	42be      	cmp	r6, r7
 80070b2:	d900      	bls.n	80070b6 <__ssputs_r+0x72>
 80070b4:	463e      	mov	r6, r7
 80070b6:	6820      	ldr	r0, [r4, #0]
 80070b8:	4632      	mov	r2, r6
 80070ba:	4641      	mov	r1, r8
 80070bc:	f000 faa6 	bl	800760c <memmove>
 80070c0:	68a3      	ldr	r3, [r4, #8]
 80070c2:	1b9b      	subs	r3, r3, r6
 80070c4:	60a3      	str	r3, [r4, #8]
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	4433      	add	r3, r6
 80070ca:	6023      	str	r3, [r4, #0]
 80070cc:	2000      	movs	r0, #0
 80070ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070d2:	462a      	mov	r2, r5
 80070d4:	f000 fad2 	bl	800767c <_realloc_r>
 80070d8:	4606      	mov	r6, r0
 80070da:	2800      	cmp	r0, #0
 80070dc:	d1e0      	bne.n	80070a0 <__ssputs_r+0x5c>
 80070de:	6921      	ldr	r1, [r4, #16]
 80070e0:	4650      	mov	r0, sl
 80070e2:	f7ff feb7 	bl	8006e54 <_free_r>
 80070e6:	230c      	movs	r3, #12
 80070e8:	f8ca 3000 	str.w	r3, [sl]
 80070ec:	89a3      	ldrh	r3, [r4, #12]
 80070ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070f2:	81a3      	strh	r3, [r4, #12]
 80070f4:	f04f 30ff 	mov.w	r0, #4294967295
 80070f8:	e7e9      	b.n	80070ce <__ssputs_r+0x8a>
	...

080070fc <_svfiprintf_r>:
 80070fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007100:	4698      	mov	r8, r3
 8007102:	898b      	ldrh	r3, [r1, #12]
 8007104:	061b      	lsls	r3, r3, #24
 8007106:	b09d      	sub	sp, #116	@ 0x74
 8007108:	4607      	mov	r7, r0
 800710a:	460d      	mov	r5, r1
 800710c:	4614      	mov	r4, r2
 800710e:	d510      	bpl.n	8007132 <_svfiprintf_r+0x36>
 8007110:	690b      	ldr	r3, [r1, #16]
 8007112:	b973      	cbnz	r3, 8007132 <_svfiprintf_r+0x36>
 8007114:	2140      	movs	r1, #64	@ 0x40
 8007116:	f7ff ff09 	bl	8006f2c <_malloc_r>
 800711a:	6028      	str	r0, [r5, #0]
 800711c:	6128      	str	r0, [r5, #16]
 800711e:	b930      	cbnz	r0, 800712e <_svfiprintf_r+0x32>
 8007120:	230c      	movs	r3, #12
 8007122:	603b      	str	r3, [r7, #0]
 8007124:	f04f 30ff 	mov.w	r0, #4294967295
 8007128:	b01d      	add	sp, #116	@ 0x74
 800712a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800712e:	2340      	movs	r3, #64	@ 0x40
 8007130:	616b      	str	r3, [r5, #20]
 8007132:	2300      	movs	r3, #0
 8007134:	9309      	str	r3, [sp, #36]	@ 0x24
 8007136:	2320      	movs	r3, #32
 8007138:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800713c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007140:	2330      	movs	r3, #48	@ 0x30
 8007142:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80072e0 <_svfiprintf_r+0x1e4>
 8007146:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800714a:	f04f 0901 	mov.w	r9, #1
 800714e:	4623      	mov	r3, r4
 8007150:	469a      	mov	sl, r3
 8007152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007156:	b10a      	cbz	r2, 800715c <_svfiprintf_r+0x60>
 8007158:	2a25      	cmp	r2, #37	@ 0x25
 800715a:	d1f9      	bne.n	8007150 <_svfiprintf_r+0x54>
 800715c:	ebba 0b04 	subs.w	fp, sl, r4
 8007160:	d00b      	beq.n	800717a <_svfiprintf_r+0x7e>
 8007162:	465b      	mov	r3, fp
 8007164:	4622      	mov	r2, r4
 8007166:	4629      	mov	r1, r5
 8007168:	4638      	mov	r0, r7
 800716a:	f7ff ff6b 	bl	8007044 <__ssputs_r>
 800716e:	3001      	adds	r0, #1
 8007170:	f000 80a7 	beq.w	80072c2 <_svfiprintf_r+0x1c6>
 8007174:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007176:	445a      	add	r2, fp
 8007178:	9209      	str	r2, [sp, #36]	@ 0x24
 800717a:	f89a 3000 	ldrb.w	r3, [sl]
 800717e:	2b00      	cmp	r3, #0
 8007180:	f000 809f 	beq.w	80072c2 <_svfiprintf_r+0x1c6>
 8007184:	2300      	movs	r3, #0
 8007186:	f04f 32ff 	mov.w	r2, #4294967295
 800718a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800718e:	f10a 0a01 	add.w	sl, sl, #1
 8007192:	9304      	str	r3, [sp, #16]
 8007194:	9307      	str	r3, [sp, #28]
 8007196:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800719a:	931a      	str	r3, [sp, #104]	@ 0x68
 800719c:	4654      	mov	r4, sl
 800719e:	2205      	movs	r2, #5
 80071a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071a4:	484e      	ldr	r0, [pc, #312]	@ (80072e0 <_svfiprintf_r+0x1e4>)
 80071a6:	f7f9 f813 	bl	80001d0 <memchr>
 80071aa:	9a04      	ldr	r2, [sp, #16]
 80071ac:	b9d8      	cbnz	r0, 80071e6 <_svfiprintf_r+0xea>
 80071ae:	06d0      	lsls	r0, r2, #27
 80071b0:	bf44      	itt	mi
 80071b2:	2320      	movmi	r3, #32
 80071b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071b8:	0711      	lsls	r1, r2, #28
 80071ba:	bf44      	itt	mi
 80071bc:	232b      	movmi	r3, #43	@ 0x2b
 80071be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071c2:	f89a 3000 	ldrb.w	r3, [sl]
 80071c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80071c8:	d015      	beq.n	80071f6 <_svfiprintf_r+0xfa>
 80071ca:	9a07      	ldr	r2, [sp, #28]
 80071cc:	4654      	mov	r4, sl
 80071ce:	2000      	movs	r0, #0
 80071d0:	f04f 0c0a 	mov.w	ip, #10
 80071d4:	4621      	mov	r1, r4
 80071d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071da:	3b30      	subs	r3, #48	@ 0x30
 80071dc:	2b09      	cmp	r3, #9
 80071de:	d94b      	bls.n	8007278 <_svfiprintf_r+0x17c>
 80071e0:	b1b0      	cbz	r0, 8007210 <_svfiprintf_r+0x114>
 80071e2:	9207      	str	r2, [sp, #28]
 80071e4:	e014      	b.n	8007210 <_svfiprintf_r+0x114>
 80071e6:	eba0 0308 	sub.w	r3, r0, r8
 80071ea:	fa09 f303 	lsl.w	r3, r9, r3
 80071ee:	4313      	orrs	r3, r2
 80071f0:	9304      	str	r3, [sp, #16]
 80071f2:	46a2      	mov	sl, r4
 80071f4:	e7d2      	b.n	800719c <_svfiprintf_r+0xa0>
 80071f6:	9b03      	ldr	r3, [sp, #12]
 80071f8:	1d19      	adds	r1, r3, #4
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	9103      	str	r1, [sp, #12]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	bfbb      	ittet	lt
 8007202:	425b      	neglt	r3, r3
 8007204:	f042 0202 	orrlt.w	r2, r2, #2
 8007208:	9307      	strge	r3, [sp, #28]
 800720a:	9307      	strlt	r3, [sp, #28]
 800720c:	bfb8      	it	lt
 800720e:	9204      	strlt	r2, [sp, #16]
 8007210:	7823      	ldrb	r3, [r4, #0]
 8007212:	2b2e      	cmp	r3, #46	@ 0x2e
 8007214:	d10a      	bne.n	800722c <_svfiprintf_r+0x130>
 8007216:	7863      	ldrb	r3, [r4, #1]
 8007218:	2b2a      	cmp	r3, #42	@ 0x2a
 800721a:	d132      	bne.n	8007282 <_svfiprintf_r+0x186>
 800721c:	9b03      	ldr	r3, [sp, #12]
 800721e:	1d1a      	adds	r2, r3, #4
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	9203      	str	r2, [sp, #12]
 8007224:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007228:	3402      	adds	r4, #2
 800722a:	9305      	str	r3, [sp, #20]
 800722c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80072f0 <_svfiprintf_r+0x1f4>
 8007230:	7821      	ldrb	r1, [r4, #0]
 8007232:	2203      	movs	r2, #3
 8007234:	4650      	mov	r0, sl
 8007236:	f7f8 ffcb 	bl	80001d0 <memchr>
 800723a:	b138      	cbz	r0, 800724c <_svfiprintf_r+0x150>
 800723c:	9b04      	ldr	r3, [sp, #16]
 800723e:	eba0 000a 	sub.w	r0, r0, sl
 8007242:	2240      	movs	r2, #64	@ 0x40
 8007244:	4082      	lsls	r2, r0
 8007246:	4313      	orrs	r3, r2
 8007248:	3401      	adds	r4, #1
 800724a:	9304      	str	r3, [sp, #16]
 800724c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007250:	4824      	ldr	r0, [pc, #144]	@ (80072e4 <_svfiprintf_r+0x1e8>)
 8007252:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007256:	2206      	movs	r2, #6
 8007258:	f7f8 ffba 	bl	80001d0 <memchr>
 800725c:	2800      	cmp	r0, #0
 800725e:	d036      	beq.n	80072ce <_svfiprintf_r+0x1d2>
 8007260:	4b21      	ldr	r3, [pc, #132]	@ (80072e8 <_svfiprintf_r+0x1ec>)
 8007262:	bb1b      	cbnz	r3, 80072ac <_svfiprintf_r+0x1b0>
 8007264:	9b03      	ldr	r3, [sp, #12]
 8007266:	3307      	adds	r3, #7
 8007268:	f023 0307 	bic.w	r3, r3, #7
 800726c:	3308      	adds	r3, #8
 800726e:	9303      	str	r3, [sp, #12]
 8007270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007272:	4433      	add	r3, r6
 8007274:	9309      	str	r3, [sp, #36]	@ 0x24
 8007276:	e76a      	b.n	800714e <_svfiprintf_r+0x52>
 8007278:	fb0c 3202 	mla	r2, ip, r2, r3
 800727c:	460c      	mov	r4, r1
 800727e:	2001      	movs	r0, #1
 8007280:	e7a8      	b.n	80071d4 <_svfiprintf_r+0xd8>
 8007282:	2300      	movs	r3, #0
 8007284:	3401      	adds	r4, #1
 8007286:	9305      	str	r3, [sp, #20]
 8007288:	4619      	mov	r1, r3
 800728a:	f04f 0c0a 	mov.w	ip, #10
 800728e:	4620      	mov	r0, r4
 8007290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007294:	3a30      	subs	r2, #48	@ 0x30
 8007296:	2a09      	cmp	r2, #9
 8007298:	d903      	bls.n	80072a2 <_svfiprintf_r+0x1a6>
 800729a:	2b00      	cmp	r3, #0
 800729c:	d0c6      	beq.n	800722c <_svfiprintf_r+0x130>
 800729e:	9105      	str	r1, [sp, #20]
 80072a0:	e7c4      	b.n	800722c <_svfiprintf_r+0x130>
 80072a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80072a6:	4604      	mov	r4, r0
 80072a8:	2301      	movs	r3, #1
 80072aa:	e7f0      	b.n	800728e <_svfiprintf_r+0x192>
 80072ac:	ab03      	add	r3, sp, #12
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	462a      	mov	r2, r5
 80072b2:	4b0e      	ldr	r3, [pc, #56]	@ (80072ec <_svfiprintf_r+0x1f0>)
 80072b4:	a904      	add	r1, sp, #16
 80072b6:	4638      	mov	r0, r7
 80072b8:	f3af 8000 	nop.w
 80072bc:	1c42      	adds	r2, r0, #1
 80072be:	4606      	mov	r6, r0
 80072c0:	d1d6      	bne.n	8007270 <_svfiprintf_r+0x174>
 80072c2:	89ab      	ldrh	r3, [r5, #12]
 80072c4:	065b      	lsls	r3, r3, #25
 80072c6:	f53f af2d 	bmi.w	8007124 <_svfiprintf_r+0x28>
 80072ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072cc:	e72c      	b.n	8007128 <_svfiprintf_r+0x2c>
 80072ce:	ab03      	add	r3, sp, #12
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	462a      	mov	r2, r5
 80072d4:	4b05      	ldr	r3, [pc, #20]	@ (80072ec <_svfiprintf_r+0x1f0>)
 80072d6:	a904      	add	r1, sp, #16
 80072d8:	4638      	mov	r0, r7
 80072da:	f000 f879 	bl	80073d0 <_printf_i>
 80072de:	e7ed      	b.n	80072bc <_svfiprintf_r+0x1c0>
 80072e0:	0800777c 	.word	0x0800777c
 80072e4:	08007786 	.word	0x08007786
 80072e8:	00000000 	.word	0x00000000
 80072ec:	08007045 	.word	0x08007045
 80072f0:	08007782 	.word	0x08007782

080072f4 <_printf_common>:
 80072f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f8:	4616      	mov	r6, r2
 80072fa:	4698      	mov	r8, r3
 80072fc:	688a      	ldr	r2, [r1, #8]
 80072fe:	690b      	ldr	r3, [r1, #16]
 8007300:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007304:	4293      	cmp	r3, r2
 8007306:	bfb8      	it	lt
 8007308:	4613      	movlt	r3, r2
 800730a:	6033      	str	r3, [r6, #0]
 800730c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007310:	4607      	mov	r7, r0
 8007312:	460c      	mov	r4, r1
 8007314:	b10a      	cbz	r2, 800731a <_printf_common+0x26>
 8007316:	3301      	adds	r3, #1
 8007318:	6033      	str	r3, [r6, #0]
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	0699      	lsls	r1, r3, #26
 800731e:	bf42      	ittt	mi
 8007320:	6833      	ldrmi	r3, [r6, #0]
 8007322:	3302      	addmi	r3, #2
 8007324:	6033      	strmi	r3, [r6, #0]
 8007326:	6825      	ldr	r5, [r4, #0]
 8007328:	f015 0506 	ands.w	r5, r5, #6
 800732c:	d106      	bne.n	800733c <_printf_common+0x48>
 800732e:	f104 0a19 	add.w	sl, r4, #25
 8007332:	68e3      	ldr	r3, [r4, #12]
 8007334:	6832      	ldr	r2, [r6, #0]
 8007336:	1a9b      	subs	r3, r3, r2
 8007338:	42ab      	cmp	r3, r5
 800733a:	dc26      	bgt.n	800738a <_printf_common+0x96>
 800733c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007340:	6822      	ldr	r2, [r4, #0]
 8007342:	3b00      	subs	r3, #0
 8007344:	bf18      	it	ne
 8007346:	2301      	movne	r3, #1
 8007348:	0692      	lsls	r2, r2, #26
 800734a:	d42b      	bmi.n	80073a4 <_printf_common+0xb0>
 800734c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007350:	4641      	mov	r1, r8
 8007352:	4638      	mov	r0, r7
 8007354:	47c8      	blx	r9
 8007356:	3001      	adds	r0, #1
 8007358:	d01e      	beq.n	8007398 <_printf_common+0xa4>
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	6922      	ldr	r2, [r4, #16]
 800735e:	f003 0306 	and.w	r3, r3, #6
 8007362:	2b04      	cmp	r3, #4
 8007364:	bf02      	ittt	eq
 8007366:	68e5      	ldreq	r5, [r4, #12]
 8007368:	6833      	ldreq	r3, [r6, #0]
 800736a:	1aed      	subeq	r5, r5, r3
 800736c:	68a3      	ldr	r3, [r4, #8]
 800736e:	bf0c      	ite	eq
 8007370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007374:	2500      	movne	r5, #0
 8007376:	4293      	cmp	r3, r2
 8007378:	bfc4      	itt	gt
 800737a:	1a9b      	subgt	r3, r3, r2
 800737c:	18ed      	addgt	r5, r5, r3
 800737e:	2600      	movs	r6, #0
 8007380:	341a      	adds	r4, #26
 8007382:	42b5      	cmp	r5, r6
 8007384:	d11a      	bne.n	80073bc <_printf_common+0xc8>
 8007386:	2000      	movs	r0, #0
 8007388:	e008      	b.n	800739c <_printf_common+0xa8>
 800738a:	2301      	movs	r3, #1
 800738c:	4652      	mov	r2, sl
 800738e:	4641      	mov	r1, r8
 8007390:	4638      	mov	r0, r7
 8007392:	47c8      	blx	r9
 8007394:	3001      	adds	r0, #1
 8007396:	d103      	bne.n	80073a0 <_printf_common+0xac>
 8007398:	f04f 30ff 	mov.w	r0, #4294967295
 800739c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a0:	3501      	adds	r5, #1
 80073a2:	e7c6      	b.n	8007332 <_printf_common+0x3e>
 80073a4:	18e1      	adds	r1, r4, r3
 80073a6:	1c5a      	adds	r2, r3, #1
 80073a8:	2030      	movs	r0, #48	@ 0x30
 80073aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80073ae:	4422      	add	r2, r4
 80073b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80073b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80073b8:	3302      	adds	r3, #2
 80073ba:	e7c7      	b.n	800734c <_printf_common+0x58>
 80073bc:	2301      	movs	r3, #1
 80073be:	4622      	mov	r2, r4
 80073c0:	4641      	mov	r1, r8
 80073c2:	4638      	mov	r0, r7
 80073c4:	47c8      	blx	r9
 80073c6:	3001      	adds	r0, #1
 80073c8:	d0e6      	beq.n	8007398 <_printf_common+0xa4>
 80073ca:	3601      	adds	r6, #1
 80073cc:	e7d9      	b.n	8007382 <_printf_common+0x8e>
	...

080073d0 <_printf_i>:
 80073d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073d4:	7e0f      	ldrb	r7, [r1, #24]
 80073d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80073d8:	2f78      	cmp	r7, #120	@ 0x78
 80073da:	4691      	mov	r9, r2
 80073dc:	4680      	mov	r8, r0
 80073de:	460c      	mov	r4, r1
 80073e0:	469a      	mov	sl, r3
 80073e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80073e6:	d807      	bhi.n	80073f8 <_printf_i+0x28>
 80073e8:	2f62      	cmp	r7, #98	@ 0x62
 80073ea:	d80a      	bhi.n	8007402 <_printf_i+0x32>
 80073ec:	2f00      	cmp	r7, #0
 80073ee:	f000 80d1 	beq.w	8007594 <_printf_i+0x1c4>
 80073f2:	2f58      	cmp	r7, #88	@ 0x58
 80073f4:	f000 80b8 	beq.w	8007568 <_printf_i+0x198>
 80073f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007400:	e03a      	b.n	8007478 <_printf_i+0xa8>
 8007402:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007406:	2b15      	cmp	r3, #21
 8007408:	d8f6      	bhi.n	80073f8 <_printf_i+0x28>
 800740a:	a101      	add	r1, pc, #4	@ (adr r1, 8007410 <_printf_i+0x40>)
 800740c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007410:	08007469 	.word	0x08007469
 8007414:	0800747d 	.word	0x0800747d
 8007418:	080073f9 	.word	0x080073f9
 800741c:	080073f9 	.word	0x080073f9
 8007420:	080073f9 	.word	0x080073f9
 8007424:	080073f9 	.word	0x080073f9
 8007428:	0800747d 	.word	0x0800747d
 800742c:	080073f9 	.word	0x080073f9
 8007430:	080073f9 	.word	0x080073f9
 8007434:	080073f9 	.word	0x080073f9
 8007438:	080073f9 	.word	0x080073f9
 800743c:	0800757b 	.word	0x0800757b
 8007440:	080074a7 	.word	0x080074a7
 8007444:	08007535 	.word	0x08007535
 8007448:	080073f9 	.word	0x080073f9
 800744c:	080073f9 	.word	0x080073f9
 8007450:	0800759d 	.word	0x0800759d
 8007454:	080073f9 	.word	0x080073f9
 8007458:	080074a7 	.word	0x080074a7
 800745c:	080073f9 	.word	0x080073f9
 8007460:	080073f9 	.word	0x080073f9
 8007464:	0800753d 	.word	0x0800753d
 8007468:	6833      	ldr	r3, [r6, #0]
 800746a:	1d1a      	adds	r2, r3, #4
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6032      	str	r2, [r6, #0]
 8007470:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007474:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007478:	2301      	movs	r3, #1
 800747a:	e09c      	b.n	80075b6 <_printf_i+0x1e6>
 800747c:	6833      	ldr	r3, [r6, #0]
 800747e:	6820      	ldr	r0, [r4, #0]
 8007480:	1d19      	adds	r1, r3, #4
 8007482:	6031      	str	r1, [r6, #0]
 8007484:	0606      	lsls	r6, r0, #24
 8007486:	d501      	bpl.n	800748c <_printf_i+0xbc>
 8007488:	681d      	ldr	r5, [r3, #0]
 800748a:	e003      	b.n	8007494 <_printf_i+0xc4>
 800748c:	0645      	lsls	r5, r0, #25
 800748e:	d5fb      	bpl.n	8007488 <_printf_i+0xb8>
 8007490:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007494:	2d00      	cmp	r5, #0
 8007496:	da03      	bge.n	80074a0 <_printf_i+0xd0>
 8007498:	232d      	movs	r3, #45	@ 0x2d
 800749a:	426d      	negs	r5, r5
 800749c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074a0:	4858      	ldr	r0, [pc, #352]	@ (8007604 <_printf_i+0x234>)
 80074a2:	230a      	movs	r3, #10
 80074a4:	e011      	b.n	80074ca <_printf_i+0xfa>
 80074a6:	6821      	ldr	r1, [r4, #0]
 80074a8:	6833      	ldr	r3, [r6, #0]
 80074aa:	0608      	lsls	r0, r1, #24
 80074ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80074b0:	d402      	bmi.n	80074b8 <_printf_i+0xe8>
 80074b2:	0649      	lsls	r1, r1, #25
 80074b4:	bf48      	it	mi
 80074b6:	b2ad      	uxthmi	r5, r5
 80074b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80074ba:	4852      	ldr	r0, [pc, #328]	@ (8007604 <_printf_i+0x234>)
 80074bc:	6033      	str	r3, [r6, #0]
 80074be:	bf14      	ite	ne
 80074c0:	230a      	movne	r3, #10
 80074c2:	2308      	moveq	r3, #8
 80074c4:	2100      	movs	r1, #0
 80074c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80074ca:	6866      	ldr	r6, [r4, #4]
 80074cc:	60a6      	str	r6, [r4, #8]
 80074ce:	2e00      	cmp	r6, #0
 80074d0:	db05      	blt.n	80074de <_printf_i+0x10e>
 80074d2:	6821      	ldr	r1, [r4, #0]
 80074d4:	432e      	orrs	r6, r5
 80074d6:	f021 0104 	bic.w	r1, r1, #4
 80074da:	6021      	str	r1, [r4, #0]
 80074dc:	d04b      	beq.n	8007576 <_printf_i+0x1a6>
 80074de:	4616      	mov	r6, r2
 80074e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80074e4:	fb03 5711 	mls	r7, r3, r1, r5
 80074e8:	5dc7      	ldrb	r7, [r0, r7]
 80074ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074ee:	462f      	mov	r7, r5
 80074f0:	42bb      	cmp	r3, r7
 80074f2:	460d      	mov	r5, r1
 80074f4:	d9f4      	bls.n	80074e0 <_printf_i+0x110>
 80074f6:	2b08      	cmp	r3, #8
 80074f8:	d10b      	bne.n	8007512 <_printf_i+0x142>
 80074fa:	6823      	ldr	r3, [r4, #0]
 80074fc:	07df      	lsls	r7, r3, #31
 80074fe:	d508      	bpl.n	8007512 <_printf_i+0x142>
 8007500:	6923      	ldr	r3, [r4, #16]
 8007502:	6861      	ldr	r1, [r4, #4]
 8007504:	4299      	cmp	r1, r3
 8007506:	bfde      	ittt	le
 8007508:	2330      	movle	r3, #48	@ 0x30
 800750a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800750e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007512:	1b92      	subs	r2, r2, r6
 8007514:	6122      	str	r2, [r4, #16]
 8007516:	f8cd a000 	str.w	sl, [sp]
 800751a:	464b      	mov	r3, r9
 800751c:	aa03      	add	r2, sp, #12
 800751e:	4621      	mov	r1, r4
 8007520:	4640      	mov	r0, r8
 8007522:	f7ff fee7 	bl	80072f4 <_printf_common>
 8007526:	3001      	adds	r0, #1
 8007528:	d14a      	bne.n	80075c0 <_printf_i+0x1f0>
 800752a:	f04f 30ff 	mov.w	r0, #4294967295
 800752e:	b004      	add	sp, #16
 8007530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007534:	6823      	ldr	r3, [r4, #0]
 8007536:	f043 0320 	orr.w	r3, r3, #32
 800753a:	6023      	str	r3, [r4, #0]
 800753c:	4832      	ldr	r0, [pc, #200]	@ (8007608 <_printf_i+0x238>)
 800753e:	2778      	movs	r7, #120	@ 0x78
 8007540:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	6831      	ldr	r1, [r6, #0]
 8007548:	061f      	lsls	r7, r3, #24
 800754a:	f851 5b04 	ldr.w	r5, [r1], #4
 800754e:	d402      	bmi.n	8007556 <_printf_i+0x186>
 8007550:	065f      	lsls	r7, r3, #25
 8007552:	bf48      	it	mi
 8007554:	b2ad      	uxthmi	r5, r5
 8007556:	6031      	str	r1, [r6, #0]
 8007558:	07d9      	lsls	r1, r3, #31
 800755a:	bf44      	itt	mi
 800755c:	f043 0320 	orrmi.w	r3, r3, #32
 8007560:	6023      	strmi	r3, [r4, #0]
 8007562:	b11d      	cbz	r5, 800756c <_printf_i+0x19c>
 8007564:	2310      	movs	r3, #16
 8007566:	e7ad      	b.n	80074c4 <_printf_i+0xf4>
 8007568:	4826      	ldr	r0, [pc, #152]	@ (8007604 <_printf_i+0x234>)
 800756a:	e7e9      	b.n	8007540 <_printf_i+0x170>
 800756c:	6823      	ldr	r3, [r4, #0]
 800756e:	f023 0320 	bic.w	r3, r3, #32
 8007572:	6023      	str	r3, [r4, #0]
 8007574:	e7f6      	b.n	8007564 <_printf_i+0x194>
 8007576:	4616      	mov	r6, r2
 8007578:	e7bd      	b.n	80074f6 <_printf_i+0x126>
 800757a:	6833      	ldr	r3, [r6, #0]
 800757c:	6825      	ldr	r5, [r4, #0]
 800757e:	6961      	ldr	r1, [r4, #20]
 8007580:	1d18      	adds	r0, r3, #4
 8007582:	6030      	str	r0, [r6, #0]
 8007584:	062e      	lsls	r6, r5, #24
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	d501      	bpl.n	800758e <_printf_i+0x1be>
 800758a:	6019      	str	r1, [r3, #0]
 800758c:	e002      	b.n	8007594 <_printf_i+0x1c4>
 800758e:	0668      	lsls	r0, r5, #25
 8007590:	d5fb      	bpl.n	800758a <_printf_i+0x1ba>
 8007592:	8019      	strh	r1, [r3, #0]
 8007594:	2300      	movs	r3, #0
 8007596:	6123      	str	r3, [r4, #16]
 8007598:	4616      	mov	r6, r2
 800759a:	e7bc      	b.n	8007516 <_printf_i+0x146>
 800759c:	6833      	ldr	r3, [r6, #0]
 800759e:	1d1a      	adds	r2, r3, #4
 80075a0:	6032      	str	r2, [r6, #0]
 80075a2:	681e      	ldr	r6, [r3, #0]
 80075a4:	6862      	ldr	r2, [r4, #4]
 80075a6:	2100      	movs	r1, #0
 80075a8:	4630      	mov	r0, r6
 80075aa:	f7f8 fe11 	bl	80001d0 <memchr>
 80075ae:	b108      	cbz	r0, 80075b4 <_printf_i+0x1e4>
 80075b0:	1b80      	subs	r0, r0, r6
 80075b2:	6060      	str	r0, [r4, #4]
 80075b4:	6863      	ldr	r3, [r4, #4]
 80075b6:	6123      	str	r3, [r4, #16]
 80075b8:	2300      	movs	r3, #0
 80075ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075be:	e7aa      	b.n	8007516 <_printf_i+0x146>
 80075c0:	6923      	ldr	r3, [r4, #16]
 80075c2:	4632      	mov	r2, r6
 80075c4:	4649      	mov	r1, r9
 80075c6:	4640      	mov	r0, r8
 80075c8:	47d0      	blx	sl
 80075ca:	3001      	adds	r0, #1
 80075cc:	d0ad      	beq.n	800752a <_printf_i+0x15a>
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	079b      	lsls	r3, r3, #30
 80075d2:	d413      	bmi.n	80075fc <_printf_i+0x22c>
 80075d4:	68e0      	ldr	r0, [r4, #12]
 80075d6:	9b03      	ldr	r3, [sp, #12]
 80075d8:	4298      	cmp	r0, r3
 80075da:	bfb8      	it	lt
 80075dc:	4618      	movlt	r0, r3
 80075de:	e7a6      	b.n	800752e <_printf_i+0x15e>
 80075e0:	2301      	movs	r3, #1
 80075e2:	4632      	mov	r2, r6
 80075e4:	4649      	mov	r1, r9
 80075e6:	4640      	mov	r0, r8
 80075e8:	47d0      	blx	sl
 80075ea:	3001      	adds	r0, #1
 80075ec:	d09d      	beq.n	800752a <_printf_i+0x15a>
 80075ee:	3501      	adds	r5, #1
 80075f0:	68e3      	ldr	r3, [r4, #12]
 80075f2:	9903      	ldr	r1, [sp, #12]
 80075f4:	1a5b      	subs	r3, r3, r1
 80075f6:	42ab      	cmp	r3, r5
 80075f8:	dcf2      	bgt.n	80075e0 <_printf_i+0x210>
 80075fa:	e7eb      	b.n	80075d4 <_printf_i+0x204>
 80075fc:	2500      	movs	r5, #0
 80075fe:	f104 0619 	add.w	r6, r4, #25
 8007602:	e7f5      	b.n	80075f0 <_printf_i+0x220>
 8007604:	0800778d 	.word	0x0800778d
 8007608:	0800779e 	.word	0x0800779e

0800760c <memmove>:
 800760c:	4288      	cmp	r0, r1
 800760e:	b510      	push	{r4, lr}
 8007610:	eb01 0402 	add.w	r4, r1, r2
 8007614:	d902      	bls.n	800761c <memmove+0x10>
 8007616:	4284      	cmp	r4, r0
 8007618:	4623      	mov	r3, r4
 800761a:	d807      	bhi.n	800762c <memmove+0x20>
 800761c:	1e43      	subs	r3, r0, #1
 800761e:	42a1      	cmp	r1, r4
 8007620:	d008      	beq.n	8007634 <memmove+0x28>
 8007622:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007626:	f803 2f01 	strb.w	r2, [r3, #1]!
 800762a:	e7f8      	b.n	800761e <memmove+0x12>
 800762c:	4402      	add	r2, r0
 800762e:	4601      	mov	r1, r0
 8007630:	428a      	cmp	r2, r1
 8007632:	d100      	bne.n	8007636 <memmove+0x2a>
 8007634:	bd10      	pop	{r4, pc}
 8007636:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800763a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800763e:	e7f7      	b.n	8007630 <memmove+0x24>

08007640 <_sbrk_r>:
 8007640:	b538      	push	{r3, r4, r5, lr}
 8007642:	4d06      	ldr	r5, [pc, #24]	@ (800765c <_sbrk_r+0x1c>)
 8007644:	2300      	movs	r3, #0
 8007646:	4604      	mov	r4, r0
 8007648:	4608      	mov	r0, r1
 800764a:	602b      	str	r3, [r5, #0]
 800764c:	f7fa fd58 	bl	8002100 <_sbrk>
 8007650:	1c43      	adds	r3, r0, #1
 8007652:	d102      	bne.n	800765a <_sbrk_r+0x1a>
 8007654:	682b      	ldr	r3, [r5, #0]
 8007656:	b103      	cbz	r3, 800765a <_sbrk_r+0x1a>
 8007658:	6023      	str	r3, [r4, #0]
 800765a:	bd38      	pop	{r3, r4, r5, pc}
 800765c:	20000420 	.word	0x20000420

08007660 <memcpy>:
 8007660:	440a      	add	r2, r1
 8007662:	4291      	cmp	r1, r2
 8007664:	f100 33ff 	add.w	r3, r0, #4294967295
 8007668:	d100      	bne.n	800766c <memcpy+0xc>
 800766a:	4770      	bx	lr
 800766c:	b510      	push	{r4, lr}
 800766e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007672:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007676:	4291      	cmp	r1, r2
 8007678:	d1f9      	bne.n	800766e <memcpy+0xe>
 800767a:	bd10      	pop	{r4, pc}

0800767c <_realloc_r>:
 800767c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007680:	4607      	mov	r7, r0
 8007682:	4614      	mov	r4, r2
 8007684:	460d      	mov	r5, r1
 8007686:	b921      	cbnz	r1, 8007692 <_realloc_r+0x16>
 8007688:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800768c:	4611      	mov	r1, r2
 800768e:	f7ff bc4d 	b.w	8006f2c <_malloc_r>
 8007692:	b92a      	cbnz	r2, 80076a0 <_realloc_r+0x24>
 8007694:	f7ff fbde 	bl	8006e54 <_free_r>
 8007698:	4625      	mov	r5, r4
 800769a:	4628      	mov	r0, r5
 800769c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076a0:	f000 f81a 	bl	80076d8 <_malloc_usable_size_r>
 80076a4:	4284      	cmp	r4, r0
 80076a6:	4606      	mov	r6, r0
 80076a8:	d802      	bhi.n	80076b0 <_realloc_r+0x34>
 80076aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80076ae:	d8f4      	bhi.n	800769a <_realloc_r+0x1e>
 80076b0:	4621      	mov	r1, r4
 80076b2:	4638      	mov	r0, r7
 80076b4:	f7ff fc3a 	bl	8006f2c <_malloc_r>
 80076b8:	4680      	mov	r8, r0
 80076ba:	b908      	cbnz	r0, 80076c0 <_realloc_r+0x44>
 80076bc:	4645      	mov	r5, r8
 80076be:	e7ec      	b.n	800769a <_realloc_r+0x1e>
 80076c0:	42b4      	cmp	r4, r6
 80076c2:	4622      	mov	r2, r4
 80076c4:	4629      	mov	r1, r5
 80076c6:	bf28      	it	cs
 80076c8:	4632      	movcs	r2, r6
 80076ca:	f7ff ffc9 	bl	8007660 <memcpy>
 80076ce:	4629      	mov	r1, r5
 80076d0:	4638      	mov	r0, r7
 80076d2:	f7ff fbbf 	bl	8006e54 <_free_r>
 80076d6:	e7f1      	b.n	80076bc <_realloc_r+0x40>

080076d8 <_malloc_usable_size_r>:
 80076d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076dc:	1f18      	subs	r0, r3, #4
 80076de:	2b00      	cmp	r3, #0
 80076e0:	bfbc      	itt	lt
 80076e2:	580b      	ldrlt	r3, [r1, r0]
 80076e4:	18c0      	addlt	r0, r0, r3
 80076e6:	4770      	bx	lr

080076e8 <_init>:
 80076e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ea:	bf00      	nop
 80076ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ee:	bc08      	pop	{r3}
 80076f0:	469e      	mov	lr, r3
 80076f2:	4770      	bx	lr

080076f4 <_fini>:
 80076f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f6:	bf00      	nop
 80076f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076fa:	bc08      	pop	{r3}
 80076fc:	469e      	mov	lr, r3
 80076fe:	4770      	bx	lr
